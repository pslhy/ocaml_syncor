code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let
Next Token :  rec, Posbility: 0.4160
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec
Next Token :  , Posbility: 0.3340
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec 
Next Token : ad, Posbility: 0.2178
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec ad
Next Token : verb, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb
Next Token : _, Posbility: 0.7578
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_
Next Token : ending, Posbility: 0.3359
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending
Next Token : _, Posbility: 0.5547
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_
Next Token : with, Posbility: 0.3379
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_
Next Token : ly, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly
Next Token :  , Posbility: 0.5156
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly 
Next Token : s, Posbility: 0.3809
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s
Next Token :  =, Posbility: 0.4492
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
Next Token : 
, Posbility: 0.8047
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =

Next Token :   , Posbility: 0.8164
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  
Next Token : let, Posbility: 0.4355
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let
Next Token :  , Posbility: 0.3672
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let 
Next Token : s, Posbility: 0.1348
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s
Next Token :  =, Posbility: 0.5273
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s =
Next Token :  String, Posbility: 0.7031
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String
Next Token : ., Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.
Next Token : trim, Posbility: 0.2930
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim
Next Token :  , Posbility: 0.5547
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim 
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s
Next Token :  in, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  
Next Token : let, Posbility: 0.4824
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let
Next Token :  , Posbility: 0.4102
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let 
Next Token : s, Posbility: 0.2539
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s
Next Token :  =, Posbility: 0.6875
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s =
Next Token :  String, Posbility: 0.6875
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.
Next Token : to, Posbility: 0.1836
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_
Next Token : list, Posbility: 0.3125
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  
Next Token : let, Posbility: 0.6914
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let
Next Token :  , Posbility: 0.3633
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let 
Next Token : s, Posbility: 0.2656
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s
Next Token :  =, Posbility: 0.8203
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s =
Next Token :  , Posbility: 0.7148
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = 
Next Token : List, Posbility: 0.6914
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.
Next Token : filter, Posbility: 0.3047
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter
Next Token :  , Posbility: 0.8203
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter 
Next Token : (, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (
Next Token : fun, Posbility: 0.6602
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun
Next Token :  , Posbility: 0.8594
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun 
Next Token : x, Posbility: 0.5234
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x ->
Next Token :  , Posbility: 0.5078
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> 
Next Token : x, Posbility: 0.6836
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x
Next Token :  , Posbility: 0.4473
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x 
Next Token : <, Posbility: 0.7148
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <
Next Token : >, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <>
Next Token :  ", Posbility: 0.3965
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "
Next Token : ly, Posbility: 0.6758
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly
Next Token : "), Posbility: 0.7812
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly")
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s
Next Token :  in, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  
Next Token : let, Posbility: 0.5859
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let
Next Token :  , Posbility: 0.6367
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let 
Next Token : s, Posbility: 0.6875
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s
Next Token :  =, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s =
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = 
Next Token : List, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.
Next Token : map, Posbility: 0.2891
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map 
Next Token : (, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (
Next Token : fun, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.6250
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 0.5039
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 0.2969
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 0.7812
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "
Next Token : ly, Posbility: 0.5977
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly
Next Token : "), Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  
Next Token : let, Posbility: 0.6992
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let
Next Token :  , Posbility: 0.6484
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let 
Next Token : s, Posbility: 0.6992
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s
Next Token :  =, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s =
Next Token :  , Posbility: 0.7148
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = 
Next Token : List, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.
Next Token : map, Posbility: 0.1387
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map 
Next Token : (, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (
Next Token : fun, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 0.5586
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 0.3730
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 0.7852
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "
Next Token : s, Posbility: 0.2021
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s
Next Token : "), Posbility: 0.7695
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  
Next Token : let, Posbility: 0.7930
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let
Next Token :  , Posbility: 0.7773
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let 
Next Token : s, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s =
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = 
Next Token : List, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.
Next Token : map, Posbility: 0.6562
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map 
Next Token : (, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (
Next Token : fun, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "
Next Token : es, Posbility: 0.3438
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es
Next Token : "), Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  
Next Token : let, Posbility: 0.8359
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let 
Next Token : s, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s =
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = 
Next Token : List, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.
Next Token : map, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map 
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "
Next Token : ed, Posbility: 0.2197
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed
Next Token : "), Posbility: 0.7812
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  
Next Token : let, Posbility: 0.8398
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let 
Next Token : s, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s =
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = 
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.
Next Token : map, Posbility: 0.8672
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map 
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.2930
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing
Next Token : "), Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  
Next Token : let, Posbility: 0.8320
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let 
Next Token : s, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s =
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = 
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.
Next Token : map, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map 
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.2207
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.6016
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.8242
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.8867
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.2969
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.7617
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 0.3574
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.7344
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.8750
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.4355
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.7148
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 0.7656
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.7930
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.6992
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.8711
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.8047
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9141
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = 
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x +
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "
Next Token : ing, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ing
Next Token : ly, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x <> "ly") s in
  let s = List.map (fun x -> x + "ly") s in
  let s = List.map (fun x -> x + "s") s in
  let s = List.map (fun x -> x + "es") s in
  let s = List.map (fun x -> x + "ed") s in
  let s = List.map (fun x -> x + "ing") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s = List.map (fun x -> x + "ingly") s in
  let s


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>