code:
 (* Write a function to merge three lists into a single sorted list. *)
let
Next Token :  rec, Posbility: 0.4844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec
Next Token :  merge, Posbility: 0.7031
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge
Next Token : _, Posbility: 0.3926
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_
Next Token : lists, Posbility: 0.2910
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists
Next Token :  , Posbility: 0.4609
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists 
Next Token : (, Posbility: 0.2363
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (
Next Token : l, Posbility: 0.2637
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l
Next Token : 1,, Posbility: 0.4609
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1,
Next Token :  l, Posbility: 0.8594
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l
Next Token : 2,, Posbility: 0.8945
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2,
Next Token :  l, Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l
Next Token : 3, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3
Next Token : ), Posbility: 0.9766
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3)
Next Token :  =, Posbility: 0.8984
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
Next Token : 
, Posbility: 0.8672
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =

Next Token :   , Posbility: 0.7539
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  
Next Token : match, Posbility: 0.6250
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match
Next Token :  , Posbility: 0.5547
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match 
Next Token : (, Posbility: 0.6523
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (
Next Token : l, Posbility: 0.8242
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l
Next Token : 1,, Posbility: 0.9141
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1,
Next Token :  l, Posbility: 0.9688
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l
Next Token : 2,, Posbility: 0.9336
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2,
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l
Next Token : 3, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3)
Next Token :  with, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with

Next Token :   , Posbility: 0.9414
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  
Next Token : |, Posbility: 0.9180
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  |
Next Token :  , Posbility: 0.6094
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | 
Next Token : ([], Posbility: 0.4727
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([]
Next Token : ,, Posbility: 0.9805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([],
Next Token :  [],, Posbility: 0.6484
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [],
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], 
Next Token : []), Posbility: 0.9414
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], [])
Next Token :  , Posbility: 0.6680
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) ->
Next Token :  [], Posbility: 0.8516
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  |
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | 
Next Token : ([], Posbility: 0.4395
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([]
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([],
Next Token :  [],, Posbility: 0.4707
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [],
Next Token :  , Posbility: 0.5156
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], 
Next Token : x, Posbility: 0.3613
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], x
Next Token : s, Posbility: 0.4883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs
Next Token : ), Posbility: 0.9453
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs)
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) ->
Next Token :  , Posbility: 0.6523
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> 
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  |
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | 
Next Token : ([], Posbility: 0.5391
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([]
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([],
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], 
Next Token : x, Posbility: 0.9062
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], x
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs
Next Token : ,, Posbility: 0.8906
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs,
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, 
Next Token : []), Posbility: 0.8047
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, [])
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) ->
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  |
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | 
Next Token : ([], Posbility: 0.6562
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([]
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([],
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], 
Next Token : x, Posbility: 0.9102
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], x
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs
Next Token : ,, Posbility: 0.6719
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs,
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, 
Next Token : x, Posbility: 0.5469
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, x
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs
Next Token : ), Posbility: 0.4668
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs)
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) 
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) ->
Next Token :  , Posbility: 0.5508
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> 
Next Token : x, Posbility: 0.6055
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
Next Token : 
, Posbility: 0.5820
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs

Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  |
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | 
Next Token : (, Posbility: 0.7188
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (
Next Token : x, Posbility: 0.8945
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (x
Next Token : s, Posbility: 0.8750
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs
Next Token : ,, Posbility: 0.8047
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs,
Next Token :  [],, Posbility: 0.8672
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [],
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], 
Next Token : []), Posbility: 0.9102
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], [])
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  |
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | 
Next Token : (, Posbility: 0.9414
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (x
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs,
Next Token :  [],, Posbility: 0.8750
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [],
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], 
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs
Next Token : ), Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs)
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) ->
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> 
Next Token : x, Posbility: 0.9414
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  |
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | 
Next Token : (, Posbility: 0.9727
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (x
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs,
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, 
Next Token : x, Posbility: 0.9414
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, x
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs
Next Token : ,, Posbility: 0.6680
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs,
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, 
Next Token : []), Posbility: 0.8672
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, [])
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) ->
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> 
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  |
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | 
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (x
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs,
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, 
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs)
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) 
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
Next Token : 
, Posbility: 0.4336
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->

Next Token :     , Posbility: 0.5703
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    
Next Token : let, Posbility: 0.5430
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let
Next Token :  , Posbility: 0.4336
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let 
Next Token : x, Posbility: 0.3945
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let x
Next Token : s, Posbility: 0.6562
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs
Next Token : 1, Posbility: 0.2773
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1
Next Token :  =, Posbility: 0.9688
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 =
Next Token :  , Posbility: 0.6602
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = 
Next Token : x, Posbility: 0.5469
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs
Next Token :  in, Posbility: 0.2168
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in

Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    
Next Token : let, Posbility: 0.6680
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let
Next Token :  , Posbility: 0.8711
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let 
Next Token : x, Posbility: 0.9375
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let x
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs
Next Token : 2, Posbility: 0.9531
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 =
Next Token :  , Posbility: 0.8086
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = 
Next Token : x, Posbility: 0.9609
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs
Next Token :  in, Posbility: 0.7656
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    
Next Token : let, Posbility: 0.8203
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let 
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let x
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs
Next Token : 3, Posbility: 0.9805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 =
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs
Next Token :  in, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in

Next Token :     , Posbility: 0.9766
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    
Next Token : let, Posbility: 0.4805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let
Next Token :  , Posbility: 0.6172
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let 
Next Token : x, Posbility: 0.6055
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let x
Next Token : s, Posbility: 0.9609
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs
Next Token :  =, Posbility: 0.3594
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs =
Next Token :  , Posbility: 0.5938
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = 
Next Token : x, Posbility: 0.4863
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = x
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs
Next Token : 1, Posbility: 0.8984
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1
Next Token :  , Posbility: 0.6133
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 
Next Token : ::, Posbility: 0.8047
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 ::
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: 
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs
Next Token : 2, Posbility: 0.9688
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 ::
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs
Next Token : 3, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3
Next Token :  in, Posbility: 0.9766
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in

Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    
Next Token : let, Posbility: 0.2891
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let
Next Token :  , Posbility: 0.4668
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let 
Next Token : x, Posbility: 0.5273
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let x
Next Token : s, Posbility: 0.9180
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let xs
Next Token :  =, Posbility: 0.3789
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let xs =
Next Token :  , Posbility: 0.5859
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let xs = 
Next Token : List, Posbility: 0.4258
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let xs = List
Next Token : ., Posbility: 0.9688
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let xs = List.
Next Token : sort, Posbility: 0.8594
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let xs = List.sort
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let xs = List.sort 
Next Token : x, Posbility: 0.7773
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let xs = List.sort x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let xs = List.sort xs
Next Token :  in, Posbility: 0.9805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let xs = List.sort xs in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let xs = List.sort xs in

Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let xs = List.sort xs in
    
Next Token : x, Posbility: 0.4180
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let xs = List.sort xs in
    x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
    let xs1 = xs in
    let xs2 = xs in
    let xs3 = xs in
    let xs = xs1 :: xs2 :: xs3 in
    let xs = List.sort xs in
    xs
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END--------

processing time : :7.3463451862335205

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>