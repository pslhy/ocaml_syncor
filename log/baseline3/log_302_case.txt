code:
 (* Write a function to find the size in bytes of the given tuple. *)
let
Next Token :  , Posbility: 0.4238
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let 
Next Token : size, Posbility: 0.5820
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size
Next Token : _, Posbility: 0.6055
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_
Next Token : of, Posbility: 0.8203
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of
Next Token : _, Posbility: 0.7188
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_
Next Token : tuple, Posbility: 0.7305
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple
Next Token :  , Posbility: 0.5117
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple 
Next Token : t, Posbility: 0.5664
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t
Next Token :  =, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
Next Token : 
, Posbility: 0.7109
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =

Next Token :   , Posbility: 0.8867
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  
Next Token : let, Posbility: 0.5938
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let
Next Token :  , Posbility: 0.3203
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let 
Next Token : size, Posbility: 0.3340
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size
Next Token :  =, Posbility: 0.6797
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size =
Next Token :  , Posbility: 0.4453
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = 
Next Token : ref, Posbility: 0.1069
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref
Next Token :  0, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0
Next Token :  in, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in

Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  
Next Token : let, Posbility: 0.4707
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let
Next Token :  rec, Posbility: 0.6797
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec
Next Token :  , Posbility: 0.4590
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec 
Next Token : size, Posbility: 0.4883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size
Next Token : _, Posbility: 0.8359
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_
Next Token : of, Posbility: 0.6719
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of
Next Token : _, Posbility: 0.8008
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_
Next Token : tuple, Posbility: 0.2295
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple
Next Token : _, Posbility: 0.4863
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_
Next Token : aux, Posbility: 0.1982
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux
Next Token :  , Posbility: 0.8359
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux 
Next Token : t, Posbility: 0.7617
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t
Next Token :  =, Posbility: 0.6406
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =

Next Token :     , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    
Next Token : match, Posbility: 0.6797
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match 
Next Token : t, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with

Next Token :     , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    
Next Token : |, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    |
Next Token :  , Posbility: 0.5742
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | 
Next Token : (, Posbility: 0.3066
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | (
Next Token :  , Posbility: 0.2178
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( 
Next Token : _, Posbility: 0.4336
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _
Next Token : ,, Posbility: 0.7734
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _,
Next Token :  , Posbility: 0.7578
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, 
Next Token : _, Posbility: 0.6094
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _
Next Token : ,, Posbility: 0.6133
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _,
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, 
Next Token : _, Posbility: 0.8125
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _
Next Token : ,, Posbility: 0.4980
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _,
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, 
Next Token : _, Posbility: 0.8594
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _
Next Token :  , Posbility: 0.4648
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ 
Next Token : ), Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ )
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) 
Next Token : ->, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) ->
Next Token :  , Posbility: 0.6641
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> 
Next Token : size, Posbility: 0.7344
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size
Next Token :  +, Posbility: 0.2383
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size +
Next Token :  4, Posbility: 0.4824
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
Next Token : 
, Posbility: 0.6836
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4

Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    |
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | 
Next Token : (, Posbility: 0.6914
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | (
Next Token :  , Posbility: 0.7656
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( 
Next Token : _, Posbility: 0.7344
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _
Next Token : ,, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _,
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, 
Next Token : _, Posbility: 0.8984
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _
Next Token : ,, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _,
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, 
Next Token : _, Posbility: 0.8750
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _
Next Token : ,, Posbility: 0.6992
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _,
Next Token :  , Posbility: 0.7930
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, 
Next Token : _, Posbility: 0.6406
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _
Next Token : ,, Posbility: 0.6406
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _,
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, 
Next Token : _, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _
Next Token :  , Posbility: 0.5156
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ )
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) 
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> 
Next Token : size, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size +
Next Token :  , Posbility: 0.6875
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 
Next Token : 8, Posbility: 0.8750
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8

Next Token :     , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    
Next Token : |, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    |
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | 
Next Token : (, Posbility: 0.7773
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | (
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( 
Next Token : _, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _
Next Token : ,, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _,
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, 
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _
Next Token : ,, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _,
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, 
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _
Next Token : ,, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _,
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, 
Next Token : _, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _
Next Token : ,, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _,
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, 
Next Token : _, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _,
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _
Next Token :  , Posbility: 0.6680
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ )
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size +
Next Token :  12, Posbility: 0.7031
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12

Next Token :     , Posbility: 0.9141
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    
Next Token : |, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    |
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | 
Next Token : (, Posbility: 0.7695
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | (
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( 
Next Token : _, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _,
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, 
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _,
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, 
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _
Next Token : ,, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _,
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, 
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, 
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ )
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size +
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 
Next Token : 16, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16

Next Token :     , Posbility: 0.8125
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    |
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | 
Next Token : (, Posbility: 0.7070
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | (
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( 
Next Token : _, Posbility: 0.8125
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _
Next Token : ,, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _,
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, 
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _,
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, 
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, 
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, 
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size +
Next Token :  20, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20

Next Token :     , Posbility: 0.8477
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    
Next Token : |, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    |
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | 
Next Token : (, Posbility: 0.7461
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | (
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( 
Next Token : _, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _,
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, 
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, 
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, 
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size +
Next Token :  24, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24

Next Token :     , Posbility: 0.8711
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    |
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | 
Next Token : (, Posbility: 0.7852
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | (
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( 
Next Token : _, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, 
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size +
Next Token :  28, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28

Next Token :     , Posbility: 0.7656
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    |
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | 
Next Token : (, Posbility: 0.7227
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | (
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( 
Next Token : _, Posbility: 0.8398
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _,
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, 
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, 
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size +
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 
Next Token : 32, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32

Next Token :     , Posbility: 0.6484
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    |
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | 
Next Token : (, Posbility: 0.7383
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | (
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( 
Next Token : _, Posbility: 0.8320
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _
Next Token : ,, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _,
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, 
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, 
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, 
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size +
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 
Next Token : 36, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36

Next Token :     , Posbility: 0.7617
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    
Next Token : |, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    |
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | 
Next Token : (, Posbility: 0.7734
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | (
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( 
Next Token : _, Posbility: 0.8477
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, 
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, 
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, 
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size +
Next Token :  40, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40

Next Token :     , Posbility: 0.8594
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    |
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | 
Next Token : (, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | (
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( 
Next Token : _, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, 
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, 
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size +
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 
Next Token : 44, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44

Next Token :     , Posbility: 0.8906
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    |
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | 
Next Token : (, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | (
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( 
Next Token : _, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, 
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size +
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 
Next Token : 48, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48

Next Token :     , Posbility: 0.8594
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    |
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | 
Next Token : (, Posbility: 0.8242
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | (
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( 
Next Token : _, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _,
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size +
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 
Next Token : 52, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52

Next Token :     , Posbility: 0.7852
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    
Next Token : |, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    |
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | 
Next Token : (, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | (
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( 
Next Token : _, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size +
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 
Next Token : 56, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56

Next Token :     , Posbility: 0.8477
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    
Next Token : |, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    |
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | 
Next Token : (, Posbility: 0.8047
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | (
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( 
Next Token : _, Posbility: 0.8984
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size +
Next Token :  60, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60

Next Token :     , Posbility: 0.7539
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    
Next Token : |, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    |
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | 
Next Token : (, Posbility: 0.8086
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | (
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( 
Next Token : _, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, 
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size +
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 
Next Token : 64, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64

Next Token :     , Posbility: 0.6680
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    
Next Token : |, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    |
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | 
Next Token : (, Posbility: 0.8203
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | (
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( 
Next Token : _, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, 
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size +
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 
Next Token : 68, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68

Next Token :     , Posbility: 0.8242
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    
Next Token : |, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    |
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | 
Next Token : (, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | (
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( 
Next Token : _, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size +
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 
Next Token : 72, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72

Next Token :     , Posbility: 0.7266
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    
Next Token : |, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    |
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | 
Next Token : (, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | (
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( 
Next Token : _, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token : ,, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ 
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ )
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> 
Next Token : size, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size +
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 
Next Token : 76, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76

Next Token :     , Posbility: 0.7656
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    
Next Token : |, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    |
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | 
Next Token : (, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | (
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | ( 
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | ( _
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | ( _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | ( _, 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | ( _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | ( _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | ( _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | ( _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | ( _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | ( _, _, _, 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | ( _, _, _, _
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | ( _, _, _, _,
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the size in bytes of the given tuple. *)
let size_of_tuple t =
  let size = ref 0 in
  let rec size_of_tuple_aux t =
    match t with
    | ( _, _, _, _ ) -> size + 4
    | ( _, _, _, _, _ ) -> size + 8
    | ( _, _, _, _, _, _ ) -> size + 12
    | ( _, _, _, _, _, _, _ ) -> size + 16
    | ( _, _, _, _, _, _, _, _ ) -> size + 20
    | ( _, _, _, _, _, _, _, _, _ ) -> size + 24
    | ( _, _, _, _, _, _, _, _, _, _ ) -> size + 28
    | ( _, _, _, _, _, _, _, _, _, _, _ ) -> size + 32
    | ( _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 36
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 40
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 44
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 48
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 52
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 56
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 60
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 64
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 68
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 72
    | ( _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ ) -> size + 76
    | ( _, _, _, _, 


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>