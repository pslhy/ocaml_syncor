code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0161
Next Token :  tuple, Posbility: 0.0208
Next Token :  count, Posbility: 0.2227
Next Token :  , Posbility: 0.2520
Next Token :  rec, Posbility: 0.3242
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0095
Next Token :  loop, Posbility: 0.0138
Next Token :  find, Posbility: 0.0292
Next Token :  , Posbility: 0.2158
Next Token :  count, Posbility: 0.5859
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0056
Next Token : -, Posbility: 0.0105
Next Token :  =, Posbility: 0.0776
Next Token :  , Posbility: 0.1865
Next Token : _, Posbility: 0.6523
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tuple, Posbility: 0.0537
Next Token : element, Posbility: 0.0688
Next Token : oc, Posbility: 0.1001
Next Token : occurrence, Posbility: 0.1289
Next Token : occ, Posbility: 0.2402
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0588
Next Token :  =, Posbility: 0.0588
Next Token : s, Posbility: 0.1602
Next Token : urs, Posbility: 0.1602
Next Token :  , Posbility: 0.4336
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0566
Next Token : occ, Posbility: 0.0728
Next Token : tup, Posbility: 0.1060
Next Token : (, Posbility: 0.1982
Next Token : t, Posbility: 0.2539
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0219
Next Token :  v, Posbility: 0.0281
Next Token :  el, Posbility: 0.1108
Next Token :  =, Posbility: 0.1260
Next Token :  , Posbility: 0.5625
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : elt, Posbility: 0.0212
Next Token : n, Posbility: 0.0240
Next Token : elem, Posbility: 0.0398
Next Token : x, Posbility: 0.1572
Next Token : e, Posbility: 0.6211
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0106
Next Token :  acc, Posbility: 0.0175
Next Token :  i, Posbility: 0.0474
Next Token :  , Posbility: 0.1001
Next Token :  =, Posbility: 0.7383
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0043
Next Token :  function, Posbility: 0.0049
Next Token :  match, Posbility: 0.0527
Next Token :  , Posbility: 0.0981
Next Token : 
, Posbility: 0.8242
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0077
Next Token :    , Posbility: 0.0143
Next Token : 	, Posbility: 0.0143
Next Token :     , Posbility: 0.1543
Next Token :   , Posbility: 0.7852
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : case, Posbility: 0.0069
Next Token : List, Posbility: 0.0101
Next Token : let, Posbility: 0.0952
Next Token : if, Posbility: 0.1572
Next Token : match, Posbility: 0.7031
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  O, Posbility: 0.0017
Next Token :  [, Posbility: 0.0021
Next Token :  !, Posbility: 0.0021
Next Token :  String, Posbility: 0.0051
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Tuple, Posbility: 0.0077
Next Token : (, Posbility: 0.0269
Next Token : e, Posbility: 0.0566
Next Token : List, Posbility: 0.0825
Next Token : t, Posbility: 0.7852
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : ., Posbility: 0.0004
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0027
Next Token : 

, Posbility: 0.0035
Next Token :  [, Posbility: 0.0045
Next Token :  , Posbility: 0.0066
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0006
Next Token :       , Posbility: 0.0025
Next Token :    , Posbility: 0.0032
Next Token :     , Posbility: 0.1060
Next Token :   , Posbility: 0.8867
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([], Posbility: 0.0004
Next Token : (, Posbility: 0.0031
Next Token : [], Posbility: 0.0058
Next Token : [, Posbility: 0.0123
Next Token : |, Posbility: 0.9766
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0120
Next Token :  nil, Posbility: 0.0137
Next Token :  [, Posbility: 0.0476
Next Token :  [], Posbility: 0.4531
Next Token :  , Posbility: 0.4531
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0327
Next Token : Nil, Posbility: 0.0327
Next Token : (), Posbility: 0.1660
Next Token : ([], Posbility: 0.1875
Next Token : (, Posbility: 0.4492
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : e, Posbility: 0.0918
Next Token : t, Posbility: 0.0918
Next Token : x, Posbility: 0.1040
Next Token :  , Posbility: 0.1182
Next Token : _, Posbility: 0.1943
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  |, Posbility: 0.0040
Next Token : ::, Posbility: 0.0058
Next Token : :, Posbility: 0.0066
Next Token :  , Posbility: 0.1030
Next Token : ,, Posbility: 0.8633
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : e, Posbility: 0.0182
Next Token :  None, Posbility: 0.0206
Next Token :  v, Posbility: 0.0300
Next Token : _, Posbility: 0.0437
Next Token :  , Posbility: 0.6836
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : t, Posbility: 0.0767
Next Token : x, Posbility: 0.1113
Next Token : []), Posbility: 0.1260
Next Token : e, Posbility: 0.1426
Next Token : _, Posbility: 0.3027
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0046
Next Token : ),, Posbility: 0.0046
Next Token :  , Posbility: 0.0161
Next Token : ), Posbility: 0.4160
Next Token : ,, Posbility: 0.5352
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0068
Next Token :  acc, Posbility: 0.0077
Next Token :  rest, Posbility: 0.0077
Next Token :  v, Posbility: 0.0128
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : []), Posbility: 0.0549
Next Token : t, Posbility: 0.0708
Next Token : x, Posbility: 0.0708
Next Token : e, Posbility: 0.1689
Next Token : _, Posbility: 0.4609
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0056
Next Token :  |, Posbility: 0.0056
Next Token :  , Posbility: 0.0220
Next Token : ,, Posbility: 0.4414
Next Token : ), Posbility: 0.5000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0052
Next Token :  |, Posbility: 0.0067
Next Token : ::, Posbility: 0.0183
Next Token :  when, Posbility: 0.0640
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0005
Next Token : →, Posbility: 0.0008
Next Token : ::, Posbility: 0.0483
Next Token : if, Posbility: 0.0903
Next Token : ->, Posbility: 0.8594
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0352
Next Token :  count, Posbility: 0.0579
Next Token :  0, Posbility: 0.0957
Next Token : 
, Posbility: 0.2598
Next Token :  , Posbility: 0.4277
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0703
Next Token : (, Posbility: 0.0903
Next Token : (), Posbility: 0.1162
Next Token : e, Posbility: 0.1494
Next Token : if, Posbility: 0.1689
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0027
Next Token :  !, Posbility: 0.0027
Next Token :  String, Posbility: 0.0031
Next Token :  not, Posbility: 0.0095
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : E, Posbility: 0.0005
Next Token : _, Posbility: 0.0014
Next Token : (, Posbility: 0.0107
Next Token : t, Posbility: 0.0177
Next Token : e, Posbility: 0.9648
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0017
Next Token :  ===, Posbility: 0.0037
Next Token :  , Posbility: 0.0447
Next Token :  ==, Posbility: 0.0447
Next Token :  =, Posbility: 0.8984
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0031
Next Token :  Some, Posbility: 0.0034
Next Token :  first, Posbility: 0.0057
Next Token :  First, Posbility: 0.0057
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : hd, Posbility: 0.0126
Next Token : Head, Posbility: 0.0142
Next Token : head, Posbility: 0.0342
Next Token : _, Posbility: 0.4160
Next Token : t, Posbility: 0.4707
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0035
Next Token : [1], Posbility: 0.0157
Next Token : [0], Posbility: 0.0294
Next Token :  then, Posbility: 0.0801
Next Token : ., Posbility: 0.8594
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0728
Next Token : [0], Posbility: 0.0728
Next Token : _, Posbility: 0.1201
Next Token : 0, Posbility: 0.2236
Next Token : 1, Posbility: 0.2871
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t.1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  else, Posbility: 0.0015
Next Token :  &&, Posbility: 0.0017
Next Token : 
, Posbility: 0.0024
Next Token :  , Posbility: 0.0052
Next Token :  then, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t.1 then
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t.1 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t.1

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t.1 &&
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t.1 else
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t.0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0012
Next Token :  &&, Posbility: 0.0015
Next Token : 
, Posbility: 0.0019
Next Token :  , Posbility: 0.0052
Next Token :  then, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t.0 then
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t.0 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t.0

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t.0 &&
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t.0  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0325
Next Token : 2, Posbility: 0.0608
Next Token : 0, Posbility: 0.1138
Next Token :  then, Posbility: 0.2402
Next Token : 1, Posbility: 0.5078
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  else, Posbility: 0.0015
Next Token :  &&, Posbility: 0.0017
Next Token : 
, Posbility: 0.0024
Next Token :  , Posbility: 0.0085
Next Token :  then, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0315
Next Token :  0, Posbility: 0.0315
Next Token :  Some, Posbility: 0.0315
Next Token :  , Posbility: 0.2334
Next Token :  1, Posbility: 0.6328
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0026
Next Token :  , Posbility: 0.0148
Next Token :  +, Posbility: 0.0277
Next Token : 
, Posbility: 0.0315
Next Token :  else, Posbility: 0.9180
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  -1, Posbility: 0.0020
Next Token :  , Posbility: 0.0151
Next Token :  0;, Posbility: 0.0413
Next Token :  count, Posbility: 0.1118
Next Token :  0, Posbility: 0.8281
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0078
Next Token :  +, Posbility: 0.0099
Next Token :  else, Posbility: 0.0271
Next Token :  , Posbility: 0.0393
Next Token : 
, Posbility: 0.8984
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0

 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0004
Next Token : end, Posbility: 0.0008
Next Token :       , Posbility: 0.0010
Next Token :     , Posbility: 0.0032
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : else, Posbility: 0.0012
Next Token : ;, Posbility: 0.0041
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0016
Next Token :  tuple, Posbility: 0.0016
Next Token :  [, Posbility: 0.0107
Next Token :  [], Posbility: 0.0137
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0065
Next Token : e, Posbility: 0.0084
Next Token : t, Posbility: 0.0293
Next Token : _, Posbility: 0.1680
Next Token : (, Posbility: 0.7539
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : e, Posbility: 0.0508
Next Token : x, Posbility: 0.0737
Next Token : t, Posbility: 0.1074
Next Token : h, Posbility: 0.1074
Next Token : _, Posbility: 0.4824
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0044
Next Token : 0,, Posbility: 0.0044
Next Token :  , Posbility: 0.0121
Next Token : 1,, Posbility: 0.0121
Next Token : ,, Posbility: 0.9570
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  rest, Posbility: 0.0078
Next Token : _, Posbility: 0.0100
Next Token :  v, Posbility: 0.0129
Next Token :  a, Posbility: 0.0146
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0430
Next Token : x, Posbility: 0.0486
Next Token : e, Posbility: 0.0623
Next Token : t, Posbility: 0.1167
Next Token : _, Posbility: 0.5898
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : e, Posbility: 0.0012
Next Token : 1,, Posbility: 0.0014
Next Token :  , Posbility: 0.0038
Next Token : ), Posbility: 0.1621
Next Token : ,, Posbility: 0.8203
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0086
Next Token :  a, Posbility: 0.0098
Next Token :  acc, Posbility: 0.0142
Next Token :  rest, Posbility: 0.0183
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0527
Next Token : e, Posbility: 0.0598
Next Token : x, Posbility: 0.0869
Next Token : t, Posbility: 0.1118
Next Token : _, Posbility: 0.4414
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ),, Posbility: 0.0078
Next Token : ;, Posbility: 0.0164
Next Token :  , Posbility: 0.0347
Next Token : ), Posbility: 0.4238
Next Token : ,, Posbility: 0.4785
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0043
Next Token :  a, Posbility: 0.0070
Next Token :  v, Posbility: 0.0103
Next Token :  rest, Posbility: 0.0245
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0125
Next Token : x, Posbility: 0.0437
Next Token : t, Posbility: 0.0815
Next Token : e, Posbility: 0.0923
Next Token : _, Posbility: 0.6836
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ),, Posbility: 0.0010
Next Token : e, Posbility: 0.0013
Next Token :  , Posbility: 0.0024
Next Token : ,, Posbility: 0.2197
Next Token : ), Posbility: 0.7656
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  then, Posbility: 0.0010
Next Token : 
, Posbility: 0.0018
Next Token :  =>, Posbility: 0.0027
Next Token :  when, Posbility: 0.0327
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token : if, Posbility: 0.0203
Next Token : ->, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0250
Next Token :  0, Posbility: 0.0679
Next Token : 
, Posbility: 0.1846
Next Token :  count, Posbility: 0.1846
Next Token :  , Posbility: 0.5039
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0114
Next Token : 2, Posbility: 0.0129
Next Token : (, Posbility: 0.0146
Next Token : let, Posbility: 0.0272
Next Token : if, Posbility: 0.9023
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0001
Next Token :  !, Posbility: 0.0001
Next Token :  not, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : t, Posbility: 0.0013
Next Token : (, Posbility: 0.0022
Next Token : e, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token : ., Posbility: 0.0002
Next Token :  ==, Posbility: 0.0004
Next Token :  , Posbility: 0.0028
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  last, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  first, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0003
Next Token : head, Posbility: 0.0004
Next Token : _, Posbility: 0.0019
Next Token : (, Posbility: 0.0032
Next Token : t, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1], Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token : [4], Posbility: 0.0000
Next Token : [3], Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : elem, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _4_, Posbility: 0.0001
Next Token : _1., Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0007
Next Token : 4, Posbility: 0.0176
Next Token : 1, Posbility: 0.1016
Next Token : 3, Posbility: 0.1299
Next Token : 2, Posbility: 0.7500
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token :  and, Posbility: 0.0003
Next Token :  &&, Posbility: 0.0008
Next Token :  then, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  0, Posbility: 0.0003
Next Token :  , Posbility: 0.0474
Next Token :  1, Posbility: 0.9531
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 0.0023
Next Token :  count, Posbility: 0.0171
Next Token :  0;, Posbility: 0.0464
Next Token :  0, Posbility: 0.9336
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
 score:False
Error type: noerr
---------------------------
Next Token :  then, Posbility: 0.0023
Next Token :  , Posbility: 0.0038
Next Token :  else, Posbility: 0.0056
Next Token : 

, Posbility: 0.0413
Next Token : 
, Posbility: 0.9414
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0

 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0010
Next Token :     , Posbility: 0.0013
Next Token : let, Posbility: 0.0040
Next Token : end, Posbility: 0.0045
Next Token :   , Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : ;, Posbility: 0.0008
Next Token : else, Posbility: 0.0067
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0015
Next Token :  tuple, Posbility: 0.0017
Next Token :  [, Posbility: 0.0074
Next Token :  [], Posbility: 0.0095
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0065
Next Token : x, Posbility: 0.0084
Next Token : t, Posbility: 0.0201
Next Token : _, Posbility: 0.0903
Next Token : (, Posbility: 0.8555
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : a, Posbility: 0.0265
Next Token : e, Posbility: 0.0339
Next Token : x, Posbility: 0.0386
Next Token : t, Posbility: 0.0437
Next Token : _, Posbility: 0.7734
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0003
Next Token : 0,, Posbility: 0.0004
Next Token : 1,, Posbility: 0.0017
Next Token :  , Posbility: 0.0022
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  ..., Posbility: 0.0007
Next Token :  v, Posbility: 0.0019
Next Token :  a, Posbility: 0.0031
Next Token : _, Posbility: 0.0052
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0062
Next Token : x, Posbility: 0.0102
Next Token : t, Posbility: 0.0215
Next Token : e, Posbility: 0.0277
Next Token : _, Posbility: 0.9180
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : ), Posbility: 0.0179
Next Token : ,, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0007
Next Token :  v, Posbility: 0.0009
Next Token :  ..., Posbility: 0.0015
Next Token :  a, Posbility: 0.0025
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0068
Next Token : x, Posbility: 0.0127
Next Token : t, Posbility: 0.0269
Next Token : e, Posbility: 0.0442
Next Token : _, Posbility: 0.8867
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0002
Next Token : _, Posbility: 0.0005
Next Token :  , Posbility: 0.0006
Next Token : ), Posbility: 0.0110
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0003
Next Token : _, Posbility: 0.0008
Next Token :  a, Posbility: 0.0009
Next Token :  ..., Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0026
Next Token : x, Posbility: 0.0072
Next Token : t, Posbility: 0.0118
Next Token : e, Posbility: 0.0250
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token : _, Posbility: 0.0004
Next Token :  , Posbility: 0.0015
Next Token : ), Posbility: 0.0032
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0012
Next Token :  a, Posbility: 0.0013
Next Token :  v, Posbility: 0.0019
Next Token :  rest, Posbility: 0.0022
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ...), Posbility: 0.0029
Next Token : x, Posbility: 0.0114
Next Token : t, Posbility: 0.0166
Next Token : e, Posbility: 0.0398
Next Token : _, Posbility: 0.9062
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ),, Posbility: 0.0001
Next Token : e, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ,, Posbility: 0.0757
Next Token : ), Posbility: 0.9219
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  then, Posbility: 0.0007
Next Token :  =>, Posbility: 0.0008
Next Token :  when, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : if, Posbility: 0.0008
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0024
Next Token :  count, Posbility: 0.0024
Next Token : 
, Posbility: 0.0065
Next Token :  0, Posbility: 0.0177
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token : e, Posbility: 0.0007
Next Token : (, Posbility: 0.0022
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  not, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  ==, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token :  `, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [5], Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token : [3], Posbility: 0.0000
Next Token : [4], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0000
Next Token : 4, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  then, Posbility: 0.0001
Next Token : 2, Posbility: 0.0004
Next Token : 4, Posbility: 0.0085
Next Token : 3, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1
 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  0), Posbility: 0.0009
Next Token :  0;, Posbility: 0.0179
Next Token :  0, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
 score:False
Error type: noerr
---------------------------
Next Token :  else, Posbility: 0.0014
Next Token :  then, Posbility: 0.0018
Next Token :  , Posbility: 0.0026
Next Token : 

, Posbility: 0.0669
Next Token : 
, Posbility: 0.9219
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0019
Next Token : end, Posbility: 0.0042
Next Token : let, Posbility: 0.0048
Next Token : else, Posbility: 0.0048
Next Token :   , Posbility: 0.9688
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0008
Next Token : then, Posbility: 0.0010
Next Token : ..., Posbility: 0.0010
Next Token : else, Posbility: 0.0085
Next Token : |, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0021
Next Token :  tuple, Posbility: 0.0038
Next Token :  [, Posbility: 0.0104
Next Token :  [], Posbility: 0.0250
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0055
Next Token : x, Posbility: 0.0116
Next Token : t, Posbility: 0.0278
Next Token : _, Posbility: 0.1099
Next Token : (, Posbility: 0.8125
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : e, Posbility: 0.0299
Next Token : x, Posbility: 0.0299
Next Token : h, Posbility: 0.0299
Next Token : t, Posbility: 0.0493
Next Token : _, Posbility: 0.7695
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0,, Posbility: 0.0003
Next Token : ), Posbility: 0.0004
Next Token : 1,, Posbility: 0.0015
Next Token :  , Posbility: 0.0019
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  ..., Posbility: 0.0003
Next Token :  v, Posbility: 0.0007
Next Token :  a, Posbility: 0.0017
Next Token : _, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0044
Next Token : x, Posbility: 0.0064
Next Token : t, Posbility: 0.0106
Next Token : e, Posbility: 0.0120
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : ), Posbility: 0.0059
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0003
Next Token :  a, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0015
Next Token : x, Posbility: 0.0022
Next Token : t, Posbility: 0.0035
Next Token : e, Posbility: 0.0058
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0041
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0005
Next Token : x, Posbility: 0.0008
Next Token : t, Posbility: 0.0019
Next Token : e, Posbility: 0.0032
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ), Posbility: 0.0010
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  ?, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0015
Next Token : t, Posbility: 0.0028
Next Token : e, Posbility: 0.0075
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : ), Posbility: 0.0022
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0005
Next Token : _, Posbility: 0.0007
Next Token :  rest, Posbility: 0.0007
Next Token :  ?, Posbility: 0.0008
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ...), Posbility: 0.0024
Next Token : x, Posbility: 0.0057
Next Token : t, Posbility: 0.0073
Next Token : e, Posbility: 0.0198
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )), Posbility: 0.0000
Next Token : 1), Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : ,, Posbility: 0.0757
Next Token : ), Posbility: 0.9219
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  then, Posbility: 0.0007
Next Token :  =>, Posbility: 0.0008
Next Token :  when, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : if, Posbility: 0.0004
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0014
Next Token :  count, Posbility: 0.0024
Next Token : 
, Posbility: 0.0107
Next Token :  0, Posbility: 0.0177
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0003
Next Token : raise, Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token : (, Posbility: 0.0019
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  not, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  ==, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token :  `, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  else, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token : [4], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 4, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  then, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : 5, Posbility: 0.0003
Next Token : 3, Posbility: 0.0008
Next Token : 4, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  else, Posbility: 0.0001
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  0);, Posbility: 0.0003
Next Token :  0), Posbility: 0.0009
Next Token :  0;, Posbility: 0.0067
Next Token :  0, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
 score:False
Error type: noerr
---------------------------
Next Token :  else, Posbility: 0.0012
Next Token :  then, Posbility: 0.0022
Next Token :  , Posbility: 0.0031
Next Token : 

, Posbility: 0.1182
Next Token : 
, Posbility: 0.8711
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0034
Next Token : end, Posbility: 0.0036
Next Token : let, Posbility: 0.0082
Next Token : else, Posbility: 0.0143
Next Token :   , Posbility: 0.9453
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0010
Next Token : in, Posbility: 0.0012
Next Token : then, Posbility: 0.0019
Next Token : else, Posbility: 0.0096
Next Token : |, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0033
Next Token :  tuple, Posbility: 0.0048
Next Token :  [, Posbility: 0.0115
Next Token :  [], Posbility: 0.0457
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0137
Next Token : (), Posbility: 0.0137
Next Token : t, Posbility: 0.0327
Next Token : _, Posbility: 0.1475
Next Token : (, Posbility: 0.7461
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : e, Posbility: 0.0306
Next Token : x, Posbility: 0.0393
Next Token : h, Posbility: 0.0444
Next Token : t, Posbility: 0.0649
Next Token : _, Posbility: 0.6953
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0,, Posbility: 0.0006
Next Token : ), Posbility: 0.0007
Next Token : 1,, Posbility: 0.0022
Next Token :  , Posbility: 0.0032
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  ..., Posbility: 0.0004
Next Token :  v, Posbility: 0.0012
Next Token : _, Posbility: 0.0025
Next Token :  a, Posbility: 0.0025
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0071
Next Token : x, Posbility: 0.0092
Next Token : e, Posbility: 0.0133
Next Token : t, Posbility: 0.0171
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : 1,, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : ), Posbility: 0.0124
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  a, Posbility: 0.0003
Next Token :  ..., Posbility: 0.0003
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0031
Next Token : x, Posbility: 0.0035
Next Token : t, Posbility: 0.0058
Next Token : e, Posbility: 0.0074
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : ), Posbility: 0.0052
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0006
Next Token : x, Posbility: 0.0008
Next Token : t, Posbility: 0.0019
Next Token : e, Posbility: 0.0025
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0022
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0004
Next Token : x, Posbility: 0.0005
Next Token : t, Posbility: 0.0015
Next Token : e, Posbility: 0.0022
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0017
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  ?, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0006
Next Token : t, Posbility: 0.0012
Next Token : e, Posbility: 0.0036
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ), Posbility: 0.0017
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  v, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  ?, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ...), Posbility: 0.0015
Next Token : t, Posbility: 0.0022
Next Token : x, Posbility: 0.0022
Next Token : e, Posbility: 0.0059
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )), Posbility: 0.0000
Next Token : 1), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 0.0293
Next Token : ), Posbility: 0.9688
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  then, Posbility: 0.0006
Next Token :  =>, Posbility: 0.0007
Next Token :  when, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0009
Next Token :  count, Posbility: 0.0009
Next Token : 
, Posbility: 0.0066
Next Token :  0, Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token : raise, Posbility: 0.0003
Next Token : (, Posbility: 0.0017
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  ==, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token :  `, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : [5], Posbility: 0.0000
Next Token : [4], Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : _1., Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0001
Next Token : 6, Posbility: 0.0002
Next Token :  then, Posbility: 0.0003
Next Token : 4, Posbility: 0.0025
Next Token : 5, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  0);, Posbility: 0.0009
Next Token :  0), Posbility: 0.0066
Next Token :  0;, Posbility: 0.0178
Next Token :  0, Posbility: 0.9727
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0012
Next Token :  then, Posbility: 0.0017
Next Token :  , Posbility: 0.0022
Next Token : 

, Posbility: 0.0947
Next Token : 
, Posbility: 0.8984
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0022
Next Token : end, Posbility: 0.0022
Next Token : let, Posbility: 0.0035
Next Token : else, Posbility: 0.0114
Next Token :   , Posbility: 0.9609
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0013
Next Token : in, Posbility: 0.0022
Next Token : then, Posbility: 0.0022
Next Token : else, Posbility: 0.0085
Next Token : |, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0037
Next Token :  tuple, Posbility: 0.0054
Next Token :  [, Posbility: 0.0114
Next Token :  [], Posbility: 0.0576
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0135
Next Token : (), Posbility: 0.0173
Next Token : t, Posbility: 0.0369
Next Token : _, Posbility: 0.1455
Next Token : (, Posbility: 0.7383
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : e, Posbility: 0.0276
Next Token : x, Posbility: 0.0354
Next Token : h, Posbility: 0.0400
Next Token : t, Posbility: 0.0659
Next Token : _, Posbility: 0.7109
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0007
Next Token : 0,, Posbility: 0.0007
Next Token : 1,, Posbility: 0.0022
Next Token :  , Posbility: 0.0032
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  ..., Posbility: 0.0004
Next Token :  v, Posbility: 0.0013
Next Token : _, Posbility: 0.0017
Next Token :  a, Posbility: 0.0028
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0063
Next Token : x, Posbility: 0.0092
Next Token : e, Posbility: 0.0134
Next Token : t, Posbility: 0.0151
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : ), Posbility: 0.0085
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0002
Next Token :  a, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0017
Next Token : x, Posbility: 0.0022
Next Token : t, Posbility: 0.0045
Next Token : e, Posbility: 0.0052
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : ), Posbility: 0.0052
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0004
Next Token : x, Posbility: 0.0005
Next Token : e, Posbility: 0.0013
Next Token : t, Posbility: 0.0013
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ), Posbility: 0.0019
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0003
Next Token : x, Posbility: 0.0003
Next Token : t, Posbility: 0.0009
Next Token : e, Posbility: 0.0012
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0013
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : t, Posbility: 0.0006
Next Token : e, Posbility: 0.0010
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0008
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : x, Posbility: 0.0005
Next Token : t, Posbility: 0.0010
Next Token : e, Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0017
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  ?, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : __), Posbility: 0.0005
Next Token : x, Posbility: 0.0006
Next Token : t, Posbility: 0.0009
Next Token : e, Posbility: 0.0019
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ),, Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 0.0140
Next Token : ), Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  =>, Posbility: 0.0007
Next Token :  then, Posbility: 0.0008
Next Token :  when, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0004
Next Token :  1, Posbility: 0.0007
Next Token : 
, Posbility: 0.0052
Next Token :  0, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token : raise, Posbility: 0.0003
Next Token : (, Posbility: 0.0015
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  ==, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  `, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [5], Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _1., Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  then, Posbility: 0.0001
Next Token : 4, Posbility: 0.0001
Next Token : 7, Posbility: 0.0002
Next Token : 5, Posbility: 0.0004
Next Token : 6, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  0);, Posbility: 0.0009
Next Token :  0), Posbility: 0.0025
Next Token :  0;, Posbility: 0.0067
Next Token :  0, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0014
Next Token :  , Posbility: 0.0018
Next Token :  then, Posbility: 0.0030
Next Token : 

, Posbility: 0.0530
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0021
Next Token : let, Posbility: 0.0025
Next Token : end, Posbility: 0.0027
Next Token : else, Posbility: 0.0084
Next Token :   , Posbility: 0.9688
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  
 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0010
Next Token : let, Posbility: 0.0017
Next Token : then, Posbility: 0.0022
Next Token : else, Posbility: 0.0085
Next Token : |, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rest, Posbility: 0.0026
Next Token :  tuple, Posbility: 0.0038
Next Token :  [, Posbility: 0.0081
Next Token :  [], Posbility: 0.0320
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0081
Next Token : (), Posbility: 0.0117
Next Token : t, Posbility: 0.0219
Next Token : _, Posbility: 0.1113
Next Token : (, Posbility: 0.8203
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : e, Posbility: 0.0216
Next Token : x, Posbility: 0.0245
Next Token : h, Posbility: 0.0245
Next Token : t, Posbility: 0.0403
Next Token : _, Posbility: 0.8125
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0,, Posbility: 0.0003
Next Token : ), Posbility: 0.0004
Next Token : 1,, Posbility: 0.0009
Next Token :  , Posbility: 0.0019
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  ..., Posbility: 0.0002
Next Token :  v, Posbility: 0.0005
Next Token : _, Posbility: 0.0010
Next Token :  a, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0031
Next Token : x, Posbility: 0.0045
Next Token : e, Posbility: 0.0065
Next Token : t, Posbility: 0.0084
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ), Posbility: 0.0046
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0007
Next Token : x, Posbility: 0.0009
Next Token : t, Posbility: 0.0019
Next Token : e, Posbility: 0.0022
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0019
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : t, Posbility: 0.0005
Next Token : e, Posbility: 0.0006
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0009
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : h, Posbility: 0.0001
Next Token : e, Posbility: 0.0004
Next Token : t, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0004
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : t, Posbility: 0.0002
Next Token : e, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0003
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : t, Posbility: 0.0001
Next Token : e, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0004
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : t, Posbility: 0.0002
Next Token : e, Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0019
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  ?, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0004
Next Token : __), Posbility: 0.0005
Next Token : t, Posbility: 0.0005
Next Token : e, Posbility: 0.0012
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 0.0097
Next Token : ), Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token :  =>, Posbility: 0.0006
Next Token :  when, Posbility: 0.0010
Next Token :  then, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :  1, Posbility: 0.0012
Next Token :  0, Posbility: 0.0066
Next Token : 
, Posbility: 0.0085
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : raise, Posbility: 0.0003
Next Token : (, Posbility: 0.0015
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  ==, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 9, Posbility: 0.0000
Next Token :  then, Posbility: 0.0001
Next Token : 6, Posbility: 0.0002
Next Token : 8, Posbility: 0.0003
Next Token : 7, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Then, Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  0);, Posbility: 0.0009
Next Token :  0;, Posbility: 0.0067
Next Token :  0), Posbility: 0.0067
Next Token :  0, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0011
Next Token :  , Posbility: 0.0016
Next Token :  then, Posbility: 0.0027
Next Token : 

, Posbility: 0.0471
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0

 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0021
Next Token :     , Posbility: 0.0023
Next Token : end, Posbility: 0.0027
Next Token : else, Posbility: 0.0095
Next Token :   , Posbility: 0.9688
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  
 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0012
Next Token : let, Posbility: 0.0022
Next Token : then, Posbility: 0.0028
Next Token : else, Posbility: 0.0085
Next Token : |, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rest, Posbility: 0.0023
Next Token :  tuple, Posbility: 0.0030
Next Token :  [, Posbility: 0.0056
Next Token :  [], Posbility: 0.0253
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0073
Next Token : (), Posbility: 0.0093
Next Token : t, Posbility: 0.0198
Next Token : _, Posbility: 0.1001
Next Token : (, Posbility: 0.8398
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0157
Next Token : e, Posbility: 0.0178
Next Token : x, Posbility: 0.0178
Next Token : t, Posbility: 0.0294
Next Token : _, Posbility: 0.8594
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0,, Posbility: 0.0003
Next Token : ), Posbility: 0.0004
Next Token : 1,, Posbility: 0.0007
Next Token :  , Posbility: 0.0015
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  ..., Posbility: 0.0001
Next Token :  v, Posbility: 0.0004
Next Token : _, Posbility: 0.0007
Next Token :  a, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0015
Next Token : x, Posbility: 0.0022
Next Token : e, Posbility: 0.0031
Next Token : t, Posbility: 0.0040
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0025
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0003
Next Token : x, Posbility: 0.0005
Next Token : e, Posbility: 0.0010
Next Token : t, Posbility: 0.0010
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0008
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : e, Posbility: 0.0002
Next Token : t, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0004
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : e, Posbility: 0.0002
Next Token : t, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : t, Posbility: 0.0001
Next Token : e, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : t, Posbility: 0.0001
Next Token : e, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0025
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  ?, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : t, Posbility: 0.0002
Next Token : __), Posbility: 0.0004
Next Token : e, Posbility: 0.0006
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 0.0076
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0005
Next Token : 
, Posbility: 0.0006
Next Token :  when, Posbility: 0.0008
Next Token :  then, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fail, Posbility: 0.0004
Next Token :  1, Posbility: 0.0012
Next Token :  0, Posbility: 0.0052
Next Token : 
, Posbility: 0.0066
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : raise, Posbility: 0.0002
Next Token : (, Posbility: 0.0015
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  ==, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  else, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 8, Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 10, Posbility: 0.0001
Next Token : 9, Posbility: 0.0004
Next Token : 7, Posbility: 0.0008
Next Token : 8, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Then, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  else, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  0);, Posbility: 0.0009
Next Token :  0), Posbility: 0.0025
Next Token :  0;, Posbility: 0.0067
Next Token :  0, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0029
Next Token :  in, Posbility: 0.0042
Next Token :  then, Posbility: 0.0048
Next Token : 

, Posbility: 0.0664
Next Token : 
, Posbility: 0.9180
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0

 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0029
Next Token : then, Posbility: 0.0030
Next Token :     , Posbility: 0.0044
Next Token : else, Posbility: 0.0136
Next Token :   , Posbility: 0.9531
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0031
Next Token : then, Posbility: 0.0040
Next Token : in, Posbility: 0.0065
Next Token : else, Posbility: 0.0095
Next Token : |, Posbility: 0.9688
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rest, Posbility: 0.0038
Next Token :  tuple, Posbility: 0.0055
Next Token :  [, Posbility: 0.0079
Next Token :  [], Posbility: 0.0403
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0167
Next Token : (), Posbility: 0.0244
Next Token : t, Posbility: 0.0400
Next Token : _, Posbility: 0.1592
Next Token : (, Posbility: 0.7109
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : e, Posbility: 0.0203
Next Token : x, Posbility: 0.0294
Next Token : h, Posbility: 0.0294
Next Token : t, Posbility: 0.0486
Next Token : _, Posbility: 0.7578
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0,, Posbility: 0.0004
Next Token : ), Posbility: 0.0004
Next Token : 1,, Posbility: 0.0009
Next Token :  , Posbility: 0.0019
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  rest, Posbility: 0.0002
Next Token : _, Posbility: 0.0007
Next Token :  v, Posbility: 0.0007
Next Token :  a, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0027
Next Token : x, Posbility: 0.0040
Next Token : e, Posbility: 0.0058
Next Token : t, Posbility: 0.0084
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ), Posbility: 0.0036
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0007
Next Token : x, Posbility: 0.0008
Next Token : e, Posbility: 0.0015
Next Token : t, Posbility: 0.0019
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0015
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : e, Posbility: 0.0003
Next Token : t, Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0007
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : e, Posbility: 0.0002
Next Token : t, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0003
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : e, Posbility: 0.0001
Next Token : t, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : e, Posbility: 0.0001
Next Token : t, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ?, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : t, Posbility: 0.0003
Next Token : e, Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0052
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  ?, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0003
Next Token : ...), Posbility: 0.0004
Next Token : __), Posbility: 0.0005
Next Token : e, Posbility: 0.0010
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 0.0179
Next Token : ), Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0006
Next Token : 
, Posbility: 0.0006
Next Token :  then, Posbility: 0.0008
Next Token :  when, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fail, Posbility: 0.0005
Next Token :  1, Posbility: 0.0024
Next Token :  0, Posbility: 0.0051
Next Token : 
, Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token : raise, Posbility: 0.0003
Next Token : (, Posbility: 0.0013
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  ==, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 8, Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : tail, Posbility: 0.0000
Next Token : _1., Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  then, Posbility: 0.0001
Next Token : 7, Posbility: 0.0001
Next Token : 10, Posbility: 0.0003
Next Token : 8, Posbility: 0.0007
Next Token : 9, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Then, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  else, Posbility: 0.0010
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  0);, Posbility: 0.0024
Next Token :  0;, Posbility: 0.0066
Next Token :  0), Posbility: 0.0066
Next Token :  0, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0033
Next Token :  then, Posbility: 0.0033
Next Token :  , Posbility: 0.0038
Next Token : 

, Posbility: 0.0664
Next Token : 
, Posbility: 0.9180
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0025
Next Token :     , Posbility: 0.0038
Next Token : let, Posbility: 0.0041
Next Token : else, Posbility: 0.0184
Next Token :   , Posbility: 0.9414
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  
 score:False
Error type: noerr
---------------------------
Next Token : then, Posbility: 0.0016
Next Token : let, Posbility: 0.0039
Next Token : else, Posbility: 0.0107
Next Token : in, Posbility: 0.0137
Next Token : |, Posbility: 0.9609
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0045
Next Token :  tuple, Posbility: 0.0066
Next Token :  [, Posbility: 0.0123
Next Token :  [], Posbility: 0.0806
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0151
Next Token : (), Posbility: 0.0361
Next Token : t, Posbility: 0.0410
Next Token : _, Posbility: 0.2090
Next Token : (, Posbility: 0.6406
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : e, Posbility: 0.0287
Next Token : x, Posbility: 0.0417
Next Token : h, Posbility: 0.0417
Next Token : t, Posbility: 0.0781
Next Token : _, Posbility: 0.6523
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0009
Next Token : 0,, Posbility: 0.0019
Next Token : 1,, Posbility: 0.0028
Next Token :  , Posbility: 0.0066
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  rest, Posbility: 0.0008
Next Token : _, Posbility: 0.0013
Next Token :  v, Posbility: 0.0024
Next Token :  a, Posbility: 0.0052
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0062
Next Token : x, Posbility: 0.0090
Next Token : e, Posbility: 0.0116
Next Token : t, Posbility: 0.0217
Next Token : _, Posbility: 0.9219
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : 1,, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : ), Posbility: 0.0085
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0002
Next Token :  ?, Posbility: 0.0002
Next Token :  a, Posbility: 0.0004
Next Token :  ..., Posbility: 0.0004
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0017
Next Token : x, Posbility: 0.0021
Next Token : e, Posbility: 0.0051
Next Token : t, Posbility: 0.0066
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0032
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0003
Next Token : x, Posbility: 0.0004
Next Token : e, Posbility: 0.0010
Next Token : t, Posbility: 0.0013
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0019
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0003
Next Token : h, Posbility: 0.0003
Next Token : e, Posbility: 0.0006
Next Token : t, Posbility: 0.0012
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0017
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : f, Posbility: 0.0002
Next Token : e, Posbility: 0.0004
Next Token : t, Posbility: 0.0006
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0007
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : e, Posbility: 0.0002
Next Token : t, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : e, Posbility: 0.0001
Next Token : t, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 0.0001
Next Token : e, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : t, Posbility: 0.0001
Next Token : e, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0003
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  ?, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : x, Posbility: 0.0005
Next Token : t, Posbility: 0.0009
Next Token : e, Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0001
Next Token : ), Posbility: 0.0110
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  ?, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0007
Next Token : __), Posbility: 0.0007
Next Token : ...), Posbility: 0.0007
Next Token : e, Posbility: 0.0022
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ),, Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 0.0179
Next Token : ), Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token :  then, Posbility: 0.0007
Next Token :  when, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fail, Posbility: 0.0007
Next Token :  1, Posbility: 0.0040
Next Token :  0, Posbility: 0.0051
Next Token : 
, Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token : raise, Posbility: 0.0004
Next Token : (, Posbility: 0.0017
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  ==, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  `, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : tail, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : _1., Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  then, Posbility: 0.0002
Next Token : a, Posbility: 0.0006
Next Token : 0, Posbility: 0.0010
Next Token : 9, Posbility: 0.0013
Next Token : 10, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1
 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  0);, Posbility: 0.0009
Next Token :  0;, Posbility: 0.0067
Next Token :  0), Posbility: 0.0067
Next Token :  0, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0023
Next Token :  then, Posbility: 0.0034
Next Token :  in, Posbility: 0.0063
Next Token : 

, Posbility: 0.0525
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0028
Next Token :     , Posbility: 0.0046
Next Token : let, Posbility: 0.0049
Next Token : else, Posbility: 0.0143
Next Token :   , Posbility: 0.9453
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  
 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0019
Next Token : let, Posbility: 0.0045
Next Token : in, Posbility: 0.0083
Next Token : else, Posbility: 0.0137
Next Token : |, Posbility: 0.9648
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rest, Posbility: 0.0033
Next Token :  tuple, Posbility: 0.0049
Next Token :  [, Posbility: 0.0070
Next Token :  [], Posbility: 0.0359
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0165
Next Token : (), Posbility: 0.0187
Next Token : t, Posbility: 0.0396
Next Token : _, Posbility: 0.1777
Next Token : (, Posbility: 0.7031
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : a, Posbility: 0.0219
Next Token : x, Posbility: 0.0320
Next Token : h, Posbility: 0.0320
Next Token : t, Posbility: 0.0596
Next Token : _, Posbility: 0.7266
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0003
Next Token : 0,, Posbility: 0.0005
Next Token : 1,, Posbility: 0.0012
Next Token :  , Posbility: 0.0025
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  rest, Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token :  v, Posbility: 0.0008
Next Token :  a, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0031
Next Token : x, Posbility: 0.0039
Next Token : e, Posbility: 0.0051
Next Token : t, Posbility: 0.0084
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 1,, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ), Posbility: 0.0032
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  a, Posbility: 0.0002
Next Token :  ..., Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0007
Next Token : x, Posbility: 0.0010
Next Token : e, Posbility: 0.0019
Next Token : t, Posbility: 0.0019
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0013
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : e, Posbility: 0.0004
Next Token : t, Posbility: 0.0006
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0009
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : e, Posbility: 0.0003
Next Token : t, Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0006
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : e, Posbility: 0.0002
Next Token : t, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0003
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : e, Posbility: 0.0001
Next Token : t, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : t, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ?, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : t, Posbility: 0.0002
Next Token : e, Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0001
Next Token : ), Posbility: 0.0140
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  ?, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0003
Next Token : ...), Posbility: 0.0003
Next Token : __), Posbility: 0.0004
Next Token : e, Posbility: 0.0009
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1), Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 0.0179
Next Token : ), Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0003
Next Token :  then, Posbility: 0.0004
Next Token :  when, Posbility: 0.0004
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  0, Posbility: 0.0022
Next Token :  1, Posbility: 0.0024
Next Token : 
, Posbility: 0.0109
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0001
Next Token : raise, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token : (, Posbility: 0.0010
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ==, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : tail, Posbility: 0.0000
Next Token : _1., Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 9, Posbility: 0.0001
Next Token : 12, Posbility: 0.0001
Next Token : 10, Posbility: 0.0032
Next Token : 11, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  else, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  0);, Posbility: 0.0005
Next Token :  0;, Posbility: 0.0025
Next Token :  0), Posbility: 0.0041
Next Token :  0, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0009
Next Token :  in, Posbility: 0.0009
Next Token :  then, Posbility: 0.0015
Next Token : 

, Posbility: 0.0179
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0010
Next Token :  , Posbility: 0.0011
Next Token :     , Posbility: 0.0017
Next Token : else, Posbility: 0.0026
Next Token :   , Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  
 score:False
Error type: noerr
---------------------------
Next Token : then, Posbility: 0.0008
Next Token : in, Posbility: 0.0017
Next Token : let, Posbility: 0.0031
Next Token : else, Posbility: 0.0052
Next Token : |, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rest, Posbility: 0.0005
Next Token :  [, Posbility: 0.0010
Next Token :  tuple, Posbility: 0.0010
Next Token :  [], Posbility: 0.0025
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0029
Next Token : (), Posbility: 0.0033
Next Token : t, Posbility: 0.0090
Next Token : _, Posbility: 0.0520
Next Token : (, Posbility: 0.9258
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0044
Next Token : e, Posbility: 0.0056
Next Token : x, Posbility: 0.0063
Next Token : t, Posbility: 0.0135
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0,, Posbility: 0.0001
Next Token : ), Posbility: 0.0001
Next Token : 1,, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  v, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  a, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0006
Next Token : x, Posbility: 0.0010
Next Token : e, Posbility: 0.0019
Next Token : t, Posbility: 0.0019
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0004
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : t, Posbility: 0.0004
Next Token : e, Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0003
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : t, Posbility: 0.0001
Next Token : e, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : e, Posbility: 0.0001
Next Token : t, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2,, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2,, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : e, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token : ), Posbility: 0.0110
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0001
Next Token : ...), Posbility: 0.0002
Next Token : __), Posbility: 0.0003
Next Token : e, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1), Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 0.0110
Next Token : ), Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  =>, Posbility: 0.0002
Next Token :  then, Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  0, Posbility: 0.0008
Next Token :  1, Posbility: 0.0012
Next Token : 
, Posbility: 0.0085
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : raise, Posbility: 0.0000
Next Token : e, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ==, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  else, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : _1., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 13, Posbility: 0.0001
Next Token : 11, Posbility: 0.0005
Next Token : 10, Posbility: 0.0010
Next Token : 12, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  0);, Posbility: 0.0005
Next Token :  0;, Posbility: 0.0025
Next Token :  0), Posbility: 0.0025
Next Token :  0, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0013
Next Token :  then, Posbility: 0.0034
Next Token :  in, Posbility: 0.0044
Next Token : 

, Posbility: 0.0327
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0

 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0020
Next Token :  , Posbility: 0.0023
Next Token :     , Posbility: 0.0042
Next Token : else, Posbility: 0.0065
Next Token :   , Posbility: 0.9688
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  
 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0034
Next Token : let, Posbility: 0.0073
Next Token : else, Posbility: 0.0093
Next Token : in, Posbility: 0.0175
Next Token : |, Posbility: 0.9531
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rest, Posbility: 0.0016
Next Token :  tuple, Posbility: 0.0021
Next Token :  [, Posbility: 0.0035
Next Token :  [], Posbility: 0.0199
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0101
Next Token : (), Posbility: 0.0114
Next Token : t, Posbility: 0.0273
Next Token : _, Posbility: 0.1226
Next Token : (, Posbility: 0.8008
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : e, Posbility: 0.0122
Next Token : h, Posbility: 0.0156
Next Token : x, Posbility: 0.0177
Next Token : t, Posbility: 0.0292
Next Token : _, Posbility: 0.8555
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0,, Posbility: 0.0002
Next Token : ), Posbility: 0.0003
Next Token : 1,, Posbility: 0.0006
Next Token :  , Posbility: 0.0012
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (_,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  ..., Posbility: 0.0001
Next Token :  v, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token :  a, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (_, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0015
Next Token : x, Posbility: 0.0019
Next Token : e, Posbility: 0.0028
Next Token : t, Posbility: 0.0036
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (_, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0015
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (_, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (_, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : t, Posbility: 0.0006
Next Token : e, Posbility: 0.0009
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (_, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0007
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (_, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (_, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : e, Posbility: 0.0001
Next Token : t, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (_, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0004
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (_, _, _, _,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (_, _, _, _, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : e, Posbility: 0.0001
Next Token : t, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (_, _, _, _, _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that takes in a tuple and an element and counts the occcurences of the element in the tuple. *)
let rec count_occ t e =
  match t with
  | (_, _, _) -> if e = t._1 then 1 else 0
  | (_, _, _, _) -> if e = t._2 then 1 else 0
  | (_, _, _, _, _) -> if e = t._3 then 1 else 0
  | (_, _, _, _, _, _) -> if e = t._4 then 1 else 0
  | (_, _, _, _, _, _, _) -> if e = t._5 then 1 else 0
  | (_, _, _, _, _, _, _, _) -> if e = t._6 then 1 else 0
  | (_, _, _, _, _, _, _, _, _) -> if e = t._7 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _) -> if e = t._8 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _) -> if e = t._9 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._10 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._11 then 1 else 0
  | (_, _, _, _, _, _, _, _, _, _, _, _, _, _) -> if e = t._12 then 1 else 0
  | (_, _, _, _, _,
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>