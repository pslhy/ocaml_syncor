code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0038
Next Token :  make, Posbility: 0.0081
Next Token :  sub, Posbility: 0.0081
Next Token :  , Posbility: 0.3418
Next Token :  rec, Posbility: 0.5625
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0139
Next Token :  sub, Posbility: 0.0139
Next Token :  loop, Posbility: 0.0178
Next Token :  make, Posbility: 0.0201
Next Token :  , Posbility: 0.7539
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cons, Posbility: 0.0147
Next Token : duplicate, Posbility: 0.0312
Next Token : dup, Posbility: 0.0400
Next Token : split, Posbility: 0.0515
Next Token : pack, Posbility: 0.6250
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ing, Posbility: 0.0101
Next Token : -, Posbility: 0.0189
Next Token :  , Posbility: 0.2031
Next Token :  =, Posbility: 0.2305
Next Token : _, Posbility: 0.4297
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sub, Posbility: 0.0289
Next Token : duplicate, Posbility: 0.0613
Next Token : list, Posbility: 0.0786
Next Token : dup, Posbility: 0.1147
Next Token : cons, Posbility: 0.4004
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_cons
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0188
Next Token :  =, Posbility: 0.0310
Next Token :  , Posbility: 0.0510
Next Token : _, Posbility: 0.2295
Next Token : e, Posbility: 0.6250
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_conse
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 0.0003
Next Token : _, Posbility: 0.0006
Next Token : quent, Posbility: 0.0006
Next Token : cut, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecut
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ion, Posbility: 0.0001
Next Token : ative, Posbility: 0.0001
Next Token : i, Posbility: 0.0002
Next Token : ively, Posbility: 0.0067
Next Token : ive, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0183
Next Token :  =, Posbility: 0.0820
Next Token :  , Posbility: 0.1348
Next Token : s, Posbility: 0.1348
Next Token : _, Posbility: 0.6055
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0072
Next Token : du, Posbility: 0.0072
Next Token : list, Posbility: 0.0119
Next Token : dup, Posbility: 0.2393
Next Token : duplicate, Posbility: 0.6523
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicate
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0024
Next Token :  , Posbility: 0.0065
Next Token :  =, Posbility: 0.0065
Next Token : _, Posbility: 0.0177
Next Token : s, Posbility: 0.9648
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0199
Next Token : _, Posbility: 0.0786
Next Token :  l, Posbility: 0.0786
Next Token :  =, Posbility: 0.1299
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : dup, Posbility: 0.0383
Next Token : :, Posbility: 0.0718
Next Token : lst, Posbility: 0.1338
Next Token : (, Posbility: 0.1514
Next Token : x, Posbility: 0.1719
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0195
Next Token :  acc, Posbility: 0.0195
Next Token :  , Posbility: 0.2100
Next Token : s, Posbility: 0.2100
Next Token :  =, Posbility: 0.4453
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0020
Next Token :  function, Posbility: 0.0060
Next Token :  match, Posbility: 0.0347
Next Token :  , Posbility: 0.0569
Next Token : 
, Posbility: 0.8906
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0073
Next Token :    , Posbility: 0.0093
Next Token : 	, Posbility: 0.0093
Next Token :     , Posbility: 0.1138
Next Token :   , Posbility: 0.8438
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0051
Next Token : List, Posbility: 0.0378
Next Token : if, Posbility: 0.1162
Next Token : let, Posbility: 0.2178
Next Token : match, Posbility: 0.5898
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0011
Next Token :  [, Posbility: 0.0013
Next Token :  !, Posbility: 0.0024
Next Token :  String, Posbility: 0.0108
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0047
Next Token : Seq, Posbility: 0.0078
Next Token : (, Posbility: 0.0113
Next Token : List, Posbility: 0.1562
Next Token : x, Posbility: 0.7930
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  =, Posbility: 0.0012
Next Token :  , Posbility: 0.0024
Next Token :  @, Posbility: 0.0040
Next Token :  with, Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0022
Next Token :  , Posbility: 0.0060
Next Token :  [, Posbility: 0.0112
Next Token :  [], Posbility: 0.0830
Next Token : 
, Posbility: 0.8906
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0007
Next Token :       , Posbility: 0.0012
Next Token :    , Posbility: 0.0023
Next Token :     , Posbility: 0.0752
Next Token :   , Posbility: 0.9180
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Nil, Posbility: 0.0004
Next Token : (, Posbility: 0.0006
Next Token : [, Posbility: 0.0396
Next Token : [], Posbility: 0.0574
Next Token : |, Posbility: 0.8984
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0035
Next Token :  nil, Posbility: 0.0121
Next Token :  [, Posbility: 0.0544
Next Token :  , Posbility: 0.0698
Next Token :  [], Posbility: 0.8516
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0038
Next Token :    , Posbility: 0.0049
Next Token :  =>, Posbility: 0.0072
Next Token :  |, Posbility: 0.0172
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : -, Posbility: 0.0003
Next Token : →, Posbility: 0.0003
Next Token : ::, Posbility: 0.0041
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [[, Posbility: 0.0036
Next Token : 
, Posbility: 0.0098
Next Token :  [, Posbility: 0.0162
Next Token :  , Posbility: 0.0728
Next Token :  [], Posbility: 0.8867
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0019
Next Token :   , Posbility: 0.0039
Next Token :  |, Posbility: 0.0065
Next Token :  , Posbility: 0.0137
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0036
Next Token :  a, Posbility: 0.0126
Next Token :  [], Posbility: 0.0126
Next Token :  [, Posbility: 0.2539
Next Token :  , Posbility: 0.6875
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0361
Next Token : h, Posbility: 0.0674
Next Token : _, Posbility: 0.0981
Next Token : hd, Posbility: 0.1113
Next Token : x, Posbility: 0.5664
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0057
Next Token : 1, Posbility: 0.0065
Next Token : :, Posbility: 0.0327
Next Token :  , Posbility: 0.3516
Next Token : ::, Posbility: 0.5820
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : t, Posbility: 0.0203
Next Token : tail, Posbility: 0.0229
Next Token : _, Posbility: 0.0486
Next Token : y, Posbility: 0.1030
Next Token : x, Posbility: 0.6719
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0023
Next Token : 1, Posbility: 0.0023
Next Token :  , Posbility: 0.0030
Next Token : ', Posbility: 0.0287
Next Token : s, Posbility: 0.9492
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0034
Next Token : 1, Posbility: 0.0034
Next Token :  =>, Posbility: 0.0034
Next Token :  when, Posbility: 0.1436
Next Token :  , Posbility: 0.8242
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  when, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : if, Posbility: 0.0064
Next Token : ::, Posbility: 0.0471
Next Token : ->, Posbility: 0.9453
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0036
Next Token :  match, Posbility: 0.0059
Next Token :  [, Posbility: 0.1187
Next Token :  , Posbility: 0.3223
Next Token : 
, Posbility: 0.5312
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0053
Next Token :   , Posbility: 0.0078
Next Token :      , Posbility: 0.0128
Next Token :     , Posbility: 0.4238
Next Token :       , Posbility: 0.5430
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0544
Next Token : if, Posbility: 0.0898
Next Token : List, Posbility: 0.0898
Next Token : match, Posbility: 0.1016
Next Token : let, Posbility: 0.5859
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sub, Posbility: 0.0208
Next Token :  l, Posbility: 0.0266
Next Token :  first, Posbility: 0.0266
Next Token :  rec, Posbility: 0.2227
Next Token :  , Posbility: 0.4707
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0299
Next Token : n, Posbility: 0.0383
Next Token : (, Posbility: 0.0435
Next Token : x, Posbility: 0.2500
Next Token : y, Posbility: 0.2832
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0031
Next Token : 1, Posbility: 0.0065
Next Token : ,, Posbility: 0.0084
Next Token : s, Posbility: 0.2158
Next Token :  =, Posbility: 0.7539
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0022
Next Token :  match, Posbility: 0.0060
Next Token :  [, Posbility: 0.0269
Next Token : 
, Posbility: 0.0442
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0110
Next Token : y, Posbility: 0.0126
Next Token : List, Posbility: 0.1523
Next Token : pack, Posbility: 0.3672
Next Token : x, Posbility: 0.3672
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0160
Next Token : s, Posbility: 0.0718
Next Token :  in, Posbility: 0.0815
Next Token :  , Posbility: 0.1729
Next Token : ::, Posbility: 0.5312
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0147
Next Token : pack, Posbility: 0.0515
Next Token : (, Posbility: 0.0583
Next Token : y, Posbility: 0.0962
Next Token : x, Posbility: 0.7109
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0006
Next Token : ::, Posbility: 0.0012
Next Token : 
, Posbility: 0.0017
Next Token :  in, Posbility: 0.0123
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0042
Next Token :  =, Posbility: 0.0054
Next Token :  |, Posbility: 0.0242
Next Token : 
, Posbility: 0.0452
Next Token :  in, Posbility: 0.9062
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0008
Next Token : 

, Posbility: 0.0009
Next Token :   , Posbility: 0.0013
Next Token :  , Posbility: 0.0178
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0006
Next Token :     , Posbility: 0.0012
Next Token :         , Posbility: 0.0022
Next Token :      , Posbility: 0.0109
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0859
Next Token : pack, Posbility: 0.0859
Next Token : match, Posbility: 0.0977
Next Token : if, Posbility: 0.1104
Next Token : let, Posbility: 0.3848
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  new, Posbility: 0.0146
Next Token :  v, Posbility: 0.0165
Next Token :  l, Posbility: 0.0188
Next Token :  rec, Posbility: 0.0952
Next Token :  , Posbility: 0.7031
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0173
Next Token : n, Posbility: 0.0286
Next Token : x, Posbility: 0.0879
Next Token : y, Posbility: 0.2109
Next Token : z, Posbility: 0.4473
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0008
Next Token :  , Posbility: 0.0009
Next Token : 1, Posbility: 0.0028
Next Token : s, Posbility: 0.0085
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0031
Next Token :  match, Posbility: 0.0066
Next Token :  [, Posbility: 0.0159
Next Token : 
, Posbility: 0.0713
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0245
Next Token : y, Posbility: 0.1245
Next Token : x, Posbility: 0.1406
Next Token : List, Posbility: 0.1602
Next Token : pack, Posbility: 0.4336
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : ing, Posbility: 0.0003
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0000
Next Token : sub, Posbility: 0.0001
Next Token : list, Posbility: 0.0003
Next Token : con, Posbility: 0.0003
Next Token : cons, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_cons
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : u, Posbility: 0.0000
Next Token : equ, Posbility: 0.0000
Next Token : ective, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_conse
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : quit, Posbility: 0.0000
Next Token :  cut, Posbility: 0.0000
Next Token : cur, Posbility: 0.0000
Next Token : cu, Posbility: 0.0000
Next Token : cut, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecut
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ical, Posbility: 0.0000
Next Token : IVE, Posbility: 0.0000
Next Token : ively, Posbility: 0.0000
Next Token : ice, Posbility: 0.0001
Next Token : ive, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : elements, Posbility: 0.0000
Next Token : pairs, Posbility: 0.0000
Next Token : du, Posbility: 0.0000
Next Token : dup, Posbility: 0.0000
Next Token : duplicate, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicate
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0021
Next Token :  [, Posbility: 0.0027
Next Token :  ~, Posbility: 0.0040
Next Token : (, Posbility: 0.0058
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([, Posbility: 0.0002
Next Token : z, Posbility: 0.0016
Next Token : (, Posbility: 0.0898
Next Token : x, Posbility: 0.2432
Next Token : y, Posbility: 0.6641
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0031
Next Token :  |, Posbility: 0.0045
Next Token : ;, Posbility: 0.0051
Next Token : 
, Posbility: 0.0107
Next Token :  in, Posbility: 0.9688
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  [, Posbility: 0.0007
Next Token : 

, Posbility: 0.0013
Next Token :  , Posbility: 0.0036
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :         , Posbility: 0.0006
Next Token :      , Posbility: 0.0085
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.1167
Next Token : z, Posbility: 0.1167
Next Token : x, Posbility: 0.1318
Next Token : [, Posbility: 0.1699
Next Token : let, Posbility: 0.2178
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0153
Next Token :  v, Posbility: 0.0197
Next Token :  l, Posbility: 0.0251
Next Token :  rec, Posbility: 0.0471
Next Token :  , Posbility: 0.7344
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0449
Next Token : x, Posbility: 0.0840
Next Token : y, Posbility: 0.1387
Next Token : z, Posbility: 0.1572
Next Token : w, Posbility: 0.2012
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0007
Next Token : 0, Posbility: 0.0008
Next Token :  , Posbility: 0.0028
Next Token : 1, Posbility: 0.0028
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0058
Next Token :  match, Posbility: 0.0096
Next Token : 
, Posbility: 0.0334
Next Token :  [, Posbility: 0.0430
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0796
Next Token : pack, Posbility: 0.0796
Next Token : z, Posbility: 0.1680
Next Token : List, Posbility: 0.1904
Next Token : x, Posbility: 0.2773
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0206
Next Token :  in, Posbility: 0.0300
Next Token : s, Posbility: 0.1191
Next Token :  , Posbility: 0.1523
Next Token : ::, Posbility: 0.5312
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0253
Next Token : x, Posbility: 0.1133
Next Token : y, Posbility: 0.1133
Next Token : (, Posbility: 0.1865
Next Token : z, Posbility: 0.5078
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0008
Next Token : 
, Posbility: 0.0022
Next Token :  , Posbility: 0.0028
Next Token :  |, Posbility: 0.0045
Next Token :  in, Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token : 

, Posbility: 0.0006
Next Token :  [, Posbility: 0.0008
Next Token :  , Posbility: 0.0097
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token :     , Posbility: 0.0003
Next Token :      , Posbility: 0.0059
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0332
Next Token : [, Posbility: 0.0483
Next Token : x, Posbility: 0.1318
Next Token : let, Posbility: 0.2168
Next Token : w, Posbility: 0.4590
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0259
Next Token :  , Posbility: 0.0376
Next Token : ::, Posbility: 0.0703
Next Token : 

, Posbility: 0.2168
Next Token : 
, Posbility: 0.5898
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w

 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0087
Next Token : 

, Posbility: 0.0197
Next Token :     , Posbility: 0.0237
Next Token :   , Posbility: 0.3281
Next Token : in, Posbility: 0.5391
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fix, Posbility: 0.0067
Next Token : finite, Posbility: 0.0067
Next Token :  , Posbility: 0.0383
Next Token : 

, Posbility: 0.1514
Next Token : 
, Posbility: 0.7695
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0115
Next Token : pack, Posbility: 0.0229
Next Token :   , Posbility: 0.0457
Next Token : (, Posbility: 0.0752
Next Token : let, Posbility: 0.6680
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0109
Next Token :  test, Posbility: 0.0139
Next Token :  main, Posbility: 0.0908
Next Token :  , Posbility: 0.2793
Next Token :  rec, Posbility: 0.5234
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0099
Next Token :  make, Posbility: 0.0128
Next Token :  list, Posbility: 0.0128
Next Token :  rec, Posbility: 0.0128
Next Token :  , Posbility: 0.7930
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0058
Next Token : append, Posbility: 0.0075
Next Token : f, Posbility: 0.0075
Next Token : unpack, Posbility: 0.0075
Next Token : pack, Posbility: 0.8633
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  con, Posbility: 0.0042
Next Token : ing, Posbility: 0.0070
Next Token :  =, Posbility: 0.0070
Next Token :  , Posbility: 0.0513
Next Token : _, Posbility: 0.9102
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0093
Next Token : con, Posbility: 0.0093
Next Token : duplicate, Posbility: 0.0106
Next Token : list, Posbility: 0.0154
Next Token : cons, Posbility: 0.8398
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_cons
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : equ, Posbility: 0.0000
Next Token : ective, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0007
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_conse
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : quent, Posbility: 0.0000
Next Token : quit, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : cu, Posbility: 0.0000
Next Token : cut, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecut
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iv, Posbility: 0.0001
Next Token : ice, Posbility: 0.0002
Next Token : i, Posbility: 0.0003
Next Token : ively, Posbility: 0.0025
Next Token : ive, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token :  =, Posbility: 0.0007
Next Token : s, Posbility: 0.0040
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sub, Posbility: 0.0007
Next Token : lists, Posbility: 0.0009
Next Token : pairs, Posbility: 0.0009
Next Token : dup, Posbility: 0.0015
Next Token : duplicate, Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicate
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : d, Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 0.0067
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0181
Next Token : 2, Posbility: 0.0383
Next Token :  , Posbility: 0.1338
Next Token : ', Posbility: 0.1338
Next Token : _, Posbility: 0.5977
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0508
Next Token : helper, Posbility: 0.0508
Next Token : list, Posbility: 0.0574
Next Token : aux, Posbility: 0.0574
Next Token : rec, Posbility: 0.0835
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0123
Next Token :  [], Posbility: 0.0178
Next Token :  =, Posbility: 0.0483
Next Token : urse, Posbility: 0.1914
Next Token :  , Posbility: 0.6680
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0061
Next Token : n, Posbility: 0.0070
Next Token : (), Posbility: 0.0089
Next Token : (, Posbility: 0.0189
Next Token : x, Posbility: 0.9102
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0085
Next Token :  i, Posbility: 0.0109
Next Token : s, Posbility: 0.0488
Next Token :  , Posbility: 0.1328
Next Token :  =, Posbility: 0.7656
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0006
Next Token :  [, Posbility: 0.0007
Next Token :  match, Posbility: 0.0214
Next Token :  , Posbility: 0.0654
Next Token : 
, Posbility: 0.9062
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0021
Next Token :    , Posbility: 0.0044
Next Token : let, Posbility: 0.0044
Next Token :     , Posbility: 0.0288
Next Token :   , Posbility: 0.9531
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0071
Next Token : pack, Posbility: 0.0118
Next Token : if, Posbility: 0.0361
Next Token : let, Posbility: 0.0986
Next Token : match, Posbility: 0.8242
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :  ?, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0002
Next Token : List, Posbility: 0.0015
Next Token : (, Posbility: 0.0015
Next Token : pack, Posbility: 0.0015
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :  [], Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0017
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : {, Posbility: 0.0000
Next Token : [], Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0003
Next Token :  nil, Posbility: 0.0009
Next Token :  [, Posbility: 0.0066
Next Token :  , Posbility: 0.0178
Next Token :  [], Posbility: 0.9727
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :  as, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token :  |, Posbility: 0.0046
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0003
Next Token :  [, Posbility: 0.0024
Next Token : 
, Posbility: 0.0065
Next Token :  , Posbility: 0.0177
Next Token :  [], Posbility: 0.9688
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :  |, Posbility: 0.0008
Next Token :  , Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0023
Next Token :  i, Posbility: 0.0023
Next Token :  [], Posbility: 0.0064
Next Token :  [, Posbility: 0.0287
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0039
Next Token : y, Posbility: 0.0064
Next Token : (, Posbility: 0.0082
Next Token : _, Posbility: 0.0222
Next Token : x, Posbility: 0.9453
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0019
Next Token : 0, Posbility: 0.0019
Next Token : :, Posbility: 0.0142
Next Token :  , Posbility: 0.0928
Next Token : ::, Posbility: 0.8789
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : [], Posbility: 0.0038
Next Token : [, Posbility: 0.0062
Next Token : _, Posbility: 0.0149
Next Token : y, Posbility: 0.0356
Next Token : x, Posbility: 0.9219
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : 0, Posbility: 0.0004
Next Token : ::, Posbility: 0.0019
Next Token :  , Posbility: 0.0059
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0018
Next Token : ::, Posbility: 0.0023
Next Token :  |, Posbility: 0.0030
Next Token :  when, Posbility: 0.0366
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0001
Next Token : →, Posbility: 0.0001
Next Token : if, Posbility: 0.0036
Next Token : ::, Posbility: 0.0046
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0008
Next Token :  [, Posbility: 0.0014
Next Token :  match, Posbility: 0.0044
Next Token :  , Posbility: 0.0327
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0005
Next Token :   , Posbility: 0.0008
Next Token :      , Posbility: 0.0015
Next Token :     , Posbility: 0.0085
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0060
Next Token : pack, Posbility: 0.0100
Next Token : if, Posbility: 0.0271
Next Token : match, Posbility: 0.0447
Next Token : let, Posbility: 0.8984
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0029
Next Token :  v, Posbility: 0.0062
Next Token :  a, Posbility: 0.0080
Next Token :  rec, Posbility: 0.0280
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : w, Posbility: 0.0038
Next Token : f, Posbility: 0.0049
Next Token : x, Posbility: 0.0104
Next Token : z, Posbility: 0.0172
Next Token : y, Posbility: 0.9414
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token : 0, Posbility: 0.0005
Next Token : 1, Posbility: 0.0006
Next Token : s, Posbility: 0.0012
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0005
Next Token :  [], Posbility: 0.0005
Next Token : 
, Posbility: 0.0012
Next Token :  [, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0023
Next Token : head, Posbility: 0.0023
Next Token : List, Posbility: 0.0063
Next Token : pack, Posbility: 0.0464
Next Token : x, Posbility: 0.9336
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0010
Next Token :  in, Posbility: 0.0010
Next Token : :, Posbility: 0.0013
Next Token :  , Posbility: 0.0019
Next Token : ::, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0010
Next Token : pack, Posbility: 0.0015
Next Token : y, Posbility: 0.0015
Next Token : (, Posbility: 0.0032
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0001
Next Token :  |, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0007
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0038
Next Token : pack, Posbility: 0.0104
Next Token : match, Posbility: 0.0171
Next Token : if, Posbility: 0.0281
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0013
Next Token :  v, Posbility: 0.0035
Next Token :  a, Posbility: 0.0040
Next Token :  rec, Posbility: 0.0066
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0023
Next Token : p, Posbility: 0.0023
Next Token : y, Posbility: 0.0173
Next Token : w, Posbility: 0.0173
Next Token : z, Posbility: 0.9492
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : 0, Posbility: 0.0003
Next Token : 1, Posbility: 0.0015
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0011
Next Token :  match, Posbility: 0.0017
Next Token :  [, Posbility: 0.0021
Next Token : 
, Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0024
Next Token : List, Posbility: 0.0040
Next Token : y, Posbility: 0.0065
Next Token : x, Posbility: 0.0107
Next Token : pack, Posbility: 0.9688
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : er, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ing, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sub, Posbility: 0.0000
Next Token : list, Posbility: 0.0001
Next Token : rec, Posbility: 0.0002
Next Token : con, Posbility: 0.0003
Next Token : cons, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_cons
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cut, Posbility: 0.0000
Next Token : equ, Posbility: 0.0000
Next Token : ective, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_conse
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cur, Posbility: 0.0000
Next Token :  cut, Posbility: 0.0000
Next Token : cu, Posbility: 0.0000
Next Token : quit, Posbility: 0.0000
Next Token : cut, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecut
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ical, Posbility: 0.0000
Next Token : IVE, Posbility: 0.0000
Next Token : ice, Posbility: 0.0000
Next Token : ively, Posbility: 0.0001
Next Token : ive, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : double, Posbility: 0.0000
Next Token : du, Posbility: 0.0000
Next Token : unique, Posbility: 0.0000
Next Token : dup, Posbility: 0.0000
Next Token : duplicate, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicate
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0013
Next Token :  , Posbility: 0.1187
Next Token : _, Posbility: 0.8789
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0000
Next Token : re, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : recursive, Posbility: 0.0000
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([, Posbility: 0.0000
Next Token : z, Posbility: 0.0002
Next Token : (, Posbility: 0.0067
Next Token : x, Posbility: 0.0067
Next Token : y, Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :      , Posbility: 0.0006
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0040
Next Token : match, Posbility: 0.0040
Next Token : if, Posbility: 0.0065
Next Token : z, Posbility: 0.0065
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0006
Next Token :  v, Posbility: 0.0015
Next Token :  a, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0012
Next Token : y, Posbility: 0.0013
Next Token : q, Posbility: 0.0017
Next Token : z, Posbility: 0.0052
Next Token : w, Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0005
Next Token :  match, Posbility: 0.0007
Next Token : 
, Posbility: 0.0015
Next Token :  [, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0024
Next Token : z, Posbility: 0.0024
Next Token : y, Posbility: 0.0066
Next Token : pack, Posbility: 0.0066
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0002
Next Token : s, Posbility: 0.0006
Next Token : :, Posbility: 0.0015
Next Token :  , Posbility: 0.0017
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0009
Next Token : x, Posbility: 0.0024
Next Token : y, Posbility: 0.0024
Next Token : (, Posbility: 0.0066
Next Token : z, Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :      , Posbility: 0.0008
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0047
Next Token : z, Posbility: 0.0127
Next Token : pack, Posbility: 0.0127
Next Token : let, Posbility: 0.2539
Next Token : w, Posbility: 0.6914
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0015
Next Token :  , Posbility: 0.0017
Next Token : 

, Posbility: 0.0396
Next Token :  in, Posbility: 0.0508
Next Token : 
, Posbility: 0.8984
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0071
Next Token :   , Posbility: 0.0159
Next Token : (, Posbility: 0.0262
Next Token : let, Posbility: 0.0461
Next Token : in, Posbility: 0.8164
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : duction, Posbility: 0.0002
Next Token : fix, Posbility: 0.0005
Next Token :  , Posbility: 0.0012
Next Token : 

, Posbility: 0.1187
Next Token : 
, Posbility: 0.8750
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : printf, Posbility: 0.0188
Next Token : *, Posbility: 0.0227
Next Token : ;, Posbility: 0.0398
Next Token : (, Posbility: 0.1084
Next Token : let, Posbility: 0.6641
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  con, Posbility: 0.0083
Next Token :  test, Posbility: 0.0137
Next Token :  main, Posbility: 0.0374
Next Token :  , Posbility: 0.4004
Next Token :  rec, Posbility: 0.4531
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0088
Next Token :  count, Posbility: 0.0099
Next Token :  list, Posbility: 0.0128
Next Token :  make, Posbility: 0.0128
Next Token :  , Posbility: 0.7891
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0074
Next Token : append, Posbility: 0.0084
Next Token : unpack, Posbility: 0.0095
Next Token : f, Posbility: 0.0121
Next Token : pack, Posbility: 0.8516
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0021
Next Token : ing, Posbility: 0.0035
Next Token :  =, Posbility: 0.0050
Next Token :  , Posbility: 0.0226
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0048
Next Token : rec, Posbility: 0.0048
Next Token : list, Posbility: 0.0048
Next Token : con, Posbility: 0.0048
Next Token : cons, Posbility: 0.9180
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_cons
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : equ, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ective, Posbility: 0.0000
Next Token : _, Posbility: 0.0004
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_conse
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  cut, Posbility: 0.0000
Next Token : cur, Posbility: 0.0000
Next Token : quit, Posbility: 0.0000
Next Token : cu, Posbility: 0.0000
Next Token : cut, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecut
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iv, Posbility: 0.0001
Next Token : i, Posbility: 0.0001
Next Token : ice, Posbility: 0.0001
Next Token : ively, Posbility: 0.0015
Next Token : ive, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token :  =, Posbility: 0.0005
Next Token : s, Posbility: 0.0017
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : unique, Posbility: 0.0003
Next Token : pairs, Posbility: 0.0003
Next Token : double, Posbility: 0.0004
Next Token : dup, Posbility: 0.0005
Next Token : duplicate, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicate
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0120
Next Token : 2, Posbility: 0.0225
Next Token : ', Posbility: 0.0327
Next Token :  , Posbility: 0.0693
Next Token : _, Posbility: 0.8438
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0315
Next Token : opt, Posbility: 0.0403
Next Token : loop, Posbility: 0.0403
Next Token : rec, Posbility: 0.1245
Next Token : iter, Posbility: 0.3379
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0244
Next Token :  i, Posbility: 0.0244
Next Token : ative, Posbility: 0.0315
Next Token :  =, Posbility: 0.0457
Next Token :  , Posbility: 0.8086
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0044
Next Token : n, Posbility: 0.0044
Next Token : (, Posbility: 0.0092
Next Token : f, Posbility: 0.0152
Next Token : x, Posbility: 0.9375
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0027
Next Token :  i, Posbility: 0.0096
Next Token : s, Posbility: 0.0334
Next Token :  , Posbility: 0.0708
Next Token :  =, Posbility: 0.8633
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0011
Next Token :  function, Posbility: 0.0013
Next Token :  match, Posbility: 0.0066
Next Token :  , Posbility: 0.0157
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0005
Next Token : let, Posbility: 0.0008
Next Token :    , Posbility: 0.0017
Next Token :     , Posbility: 0.0096
Next Token :   , Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0023
Next Token : if, Posbility: 0.0118
Next Token : List, Posbility: 0.0195
Next Token : let, Posbility: 0.2100
Next Token : match, Posbility: 0.7344
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  !, Posbility: 0.0001
Next Token :  with, Posbility: 0.0001
Next Token :  iter, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pack, Posbility: 0.0003
Next Token : Seq, Posbility: 0.0003
Next Token : (, Posbility: 0.0007
Next Token : List, Posbility: 0.0046
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : ., Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  [], Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0012
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : {, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [], Posbility: 0.0000
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0001
Next Token :  nil, Posbility: 0.0009
Next Token :  [, Posbility: 0.0025
Next Token :  , Posbility: 0.0067
Next Token :  [], Posbility: 0.9883
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  |, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token :  [];, Posbility: 0.0003
Next Token : 
, Posbility: 0.0025
Next Token :  , Posbility: 0.0067
Next Token :  [], Posbility: 0.9883
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  as, Posbility: 0.0001
Next Token :  |, Posbility: 0.0006
Next Token :  , Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0011
Next Token :  i, Posbility: 0.0017
Next Token :  [], Posbility: 0.0040
Next Token :  [, Posbility: 0.0123
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0027
Next Token : y, Posbility: 0.0031
Next Token : (, Posbility: 0.0065
Next Token : _, Posbility: 0.0155
Next Token : x, Posbility: 0.9570
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @, Posbility: 0.0007
Next Token : s, Posbility: 0.0020
Next Token : :, Posbility: 0.0079
Next Token :  , Posbility: 0.0747
Next Token : ::, Posbility: 0.9102
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (, Posbility: 0.0019
Next Token : [, Posbility: 0.0031
Next Token : _, Posbility: 0.0095
Next Token : y, Posbility: 0.0107
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 0, Posbility: 0.0002
Next Token : ::, Posbility: 0.0006
Next Token :  , Posbility: 0.0046
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0009
Next Token :  |, Posbility: 0.0011
Next Token : ,, Posbility: 0.0015
Next Token :  when, Posbility: 0.0201
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : →, Posbility: 0.0001
Next Token : if, Posbility: 0.0004
Next Token : ::, Posbility: 0.0022
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0005
Next Token :  {, Posbility: 0.0017
Next Token :  match, Posbility: 0.0024
Next Token :  , Posbility: 0.0178
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0003
Next Token :   , Posbility: 0.0004
Next Token :      , Posbility: 0.0028
Next Token :     , Posbility: 0.0032
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0063
Next Token : x, Posbility: 0.0081
Next Token : List, Posbility: 0.0081
Next Token : match, Posbility: 0.0220
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0023
Next Token :  v, Posbility: 0.0034
Next Token :  iter, Posbility: 0.0104
Next Token :  rec, Posbility: 0.0221
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0049
Next Token : w, Posbility: 0.0049
Next Token : x, Posbility: 0.0080
Next Token : z, Posbility: 0.0359
Next Token : y, Posbility: 0.9258
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0003
Next Token : 1, Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token : s, Posbility: 0.0007
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0003
Next Token :  iter, Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token :  [, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0011
Next Token : (, Posbility: 0.0019
Next Token : List, Posbility: 0.0066
Next Token : pack, Posbility: 0.0066
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0005
Next Token : s, Posbility: 0.0005
Next Token :  , Posbility: 0.0012
Next Token :  in, Posbility: 0.0019
Next Token : ::, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0003
Next Token : pack, Posbility: 0.0004
Next Token : y, Posbility: 0.0006
Next Token : (, Posbility: 0.0010
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0046
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0049
Next Token : if, Posbility: 0.0063
Next Token : pack, Posbility: 0.0063
Next Token : match, Posbility: 0.0173
Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0015
Next Token :  v, Posbility: 0.0024
Next Token :  iter, Posbility: 0.0084
Next Token :  rec, Posbility: 0.0084
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0014
Next Token : p, Posbility: 0.0014
Next Token : y, Posbility: 0.0051
Next Token : w, Posbility: 0.0177
Next Token : z, Posbility: 0.9648
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0024
Next Token :  [, Posbility: 0.0027
Next Token :  iter, Posbility: 0.0084
Next Token : 
, Posbility: 0.0095
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0039
Next Token : y, Posbility: 0.0119
Next Token : x, Posbility: 0.0471
Next Token : List, Posbility: 0.0605
Next Token : pack, Posbility: 0.8359
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : er, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ing, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : con, Posbility: 0.0001
Next Token : rec, Posbility: 0.0001
Next Token : list, Posbility: 0.0002
Next Token : iter, Posbility: 0.0004
Next Token : cons, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_cons
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : equ, Posbility: 0.0000
Next Token : ective, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_conse
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cur, Posbility: 0.0000
Next Token :  cut, Posbility: 0.0000
Next Token : cu, Posbility: 0.0000
Next Token : quit, Posbility: 0.0000
Next Token : cut, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecut
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ical, Posbility: 0.0000
Next Token : IVE, Posbility: 0.0000
Next Token : ice, Posbility: 0.0000
Next Token : ively, Posbility: 0.0001
Next Token : ive, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : du, Posbility: 0.0000
Next Token : unique, Posbility: 0.0000
Next Token : double, Posbility: 0.0000
Next Token : dup, Posbility: 0.0000
Next Token : duplicate, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicate
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0006
Next Token : (, Posbility: 0.0010
Next Token :  iter, Posbility: 0.0077
Next Token :  , Posbility: 0.0942
Next Token : _, Posbility: 0.8945
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iterator, Posbility: 0.0001
Next Token : loop, Posbility: 0.0001
Next Token : it, Posbility: 0.0003
Next Token : rec, Posbility: 0.1191
Next Token : iter, Posbility: 0.8789
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0005
Next Token : _, Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pack, Posbility: 0.0001
Next Token : z, Posbility: 0.0007
Next Token : (, Posbility: 0.0067
Next Token : x, Posbility: 0.0067
Next Token : y, Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 0.0012
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0013
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0010
Next Token : (, Posbility: 0.0012
Next Token : match, Posbility: 0.0015
Next Token : z, Posbility: 0.0085
Next Token : let, Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0001
Next Token :  iter, Posbility: 0.0002
Next Token :  v, Posbility: 0.0002
Next Token :  a, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0002
Next Token : p, Posbility: 0.0002
Next Token : q, Posbility: 0.0003
Next Token : z, Posbility: 0.0005
Next Token : w, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token :  list, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0005
Next Token : pack, Posbility: 0.0006
Next Token : (, Posbility: 0.0009
Next Token : y, Posbility: 0.0015
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ~, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : :, Posbility: 0.0003
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0006
Next Token : w, Posbility: 0.0006
Next Token : z, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :      , Posbility: 0.0006
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : match, Posbility: 0.0005
Next Token : z, Posbility: 0.0006
Next Token : let, Posbility: 0.0022
Next Token : w, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0007
Next Token :  , Posbility: 0.0008
Next Token :  in, Posbility: 0.0072
Next Token : 

, Posbility: 0.0415
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ```, Posbility: 0.0114
Next Token :   , Posbility: 0.0129
Next Token : let, Posbility: 0.0352
Next Token : (, Posbility: 0.0398
Next Token : in, Posbility: 0.8008
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : , Posbility: 0.0001
Next Token : fix, Posbility: 0.0002
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.1475
Next Token : 
, Posbility: 0.8516
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0108
Next Token : *, Posbility: 0.0157
Next Token : module, Posbility: 0.0229
Next Token : (, Posbility: 0.1592
Next Token : let, Posbility: 0.6680
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0086
Next Token :  iter, Posbility: 0.0126
Next Token :  main, Posbility: 0.0234
Next Token :  , Posbility: 0.2852
Next Token :  rec, Posbility: 0.6055
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0082
Next Token :  make, Posbility: 0.0093
Next Token :  list, Posbility: 0.0093
Next Token :  count, Posbility: 0.0093
Next Token :  , Posbility: 0.8359
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0054
Next Token : fold, Posbility: 0.0054
Next Token : f, Posbility: 0.0061
Next Token : unpack, Posbility: 0.0061
Next Token : pack, Posbility: 0.9102
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0010
Next Token : ing, Posbility: 0.0015
Next Token :  =, Posbility: 0.0028
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sub, Posbility: 0.0014
Next Token : list, Posbility: 0.0018
Next Token : all, Posbility: 0.0024
Next Token : con, Posbility: 0.0024
Next Token : cons, Posbility: 0.9570
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_cons
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : equ, Posbility: 0.0000
Next Token : ective, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_conse
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  cut, Posbility: 0.0000
Next Token : cur, Posbility: 0.0000
Next Token : quit, Posbility: 0.0000
Next Token : cu, Posbility: 0.0000
Next Token : cut, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecut
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : IVE, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token : ice, Posbility: 0.0001
Next Token : ively, Posbility: 0.0012
Next Token : ive, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token : s, Posbility: 0.0007
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0002
Next Token : unique, Posbility: 0.0002
Next Token : double, Posbility: 0.0003
Next Token : dup, Posbility: 0.0003
Next Token : duplicate, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicate
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : d, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0012
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0043
Next Token : 2, Posbility: 0.0070
Next Token :  =, Posbility: 0.0116
Next Token :  , Posbility: 0.0405
Next Token : _, Posbility: 0.9219
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0239
Next Token : fold, Posbility: 0.0396
Next Token : list, Posbility: 0.0508
Next Token : rec, Posbility: 0.0508
Next Token : iter, Posbility: 0.4805
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0154
Next Token : ', Posbility: 0.0253
Next Token :  , Posbility: 0.0608
Next Token : 2, Posbility: 0.2715
Next Token : _, Posbility: 0.5742
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rev, Posbility: 0.0239
Next Token : aux, Posbility: 0.0306
Next Token : tail, Posbility: 0.0393
Next Token : opt, Posbility: 0.1377
Next Token : rec, Posbility: 0.3301
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0015
Next Token : _, Posbility: 0.0024
Next Token : urse, Posbility: 0.0058
Next Token :  =, Posbility: 0.0075
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : n, Posbility: 0.0005
Next Token : (, Posbility: 0.0009
Next Token : f, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  i, Posbility: 0.0004
Next Token : s, Posbility: 0.0017
Next Token :  , Posbility: 0.0059
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  function, Posbility: 0.0000
Next Token :  match, Posbility: 0.0006
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0002
Next Token :       , Posbility: 0.0003
Next Token :    , Posbility: 0.0004
Next Token :     , Posbility: 0.0022
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0003
Next Token : try, Posbility: 0.0003
Next Token : if, Posbility: 0.0008
Next Token : let, Posbility: 0.0124
Next Token : match, Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : pack, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 0.0019
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0012
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : {, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0002
Next Token :  {, Posbility: 0.0002
Next Token :  [], Posbility: 0.0003
Next Token :  [, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0002
Next Token : y, Posbility: 0.0005
Next Token : (, Posbility: 0.0013
Next Token : _, Posbility: 0.0019
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @, Posbility: 0.0001
Next Token : ::{, Posbility: 0.0001
Next Token : :, Posbility: 0.0012
Next Token :  , Posbility: 0.0076
Next Token : ::, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : [, Posbility: 0.0005
Next Token : (, Posbility: 0.0006
Next Token : _, Posbility: 0.0015
Next Token : y, Posbility: 0.0025
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : ,, Posbility: 0.0002
Next Token :  |, Posbility: 0.0004
Next Token :  when, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  {, Posbility: 0.0001
Next Token :  match, Posbility: 0.0002
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :        , Posbility: 0.0001
Next Token :      , Posbility: 0.0004
Next Token :     , Posbility: 0.0006
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0003
Next Token : (, Posbility: 0.0006
Next Token : if, Posbility: 0.0015
Next Token : match, Posbility: 0.0046
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token :  v, Posbility: 0.0003
Next Token :  iter, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : f, Posbility: 0.0004
Next Token : x, Posbility: 0.0005
Next Token : z, Posbility: 0.0052
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : pack, Posbility: 0.0007
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : &, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : :, Posbility: 0.0002
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pack, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :      , Posbility: 0.0002
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token : if, Posbility: 0.0015
Next Token : match, Posbility: 0.0025
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token :  v, Posbility: 0.0003
Next Token :  iter, Posbility: 0.0006
Next Token :  rec, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0005
Next Token : w, Posbility: 0.0010
Next Token : z, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token :  list, Posbility: 0.0002
Next Token :  iter, Posbility: 0.0005
Next Token : 
, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : y, Posbility: 0.0012
Next Token : List, Posbility: 0.0015
Next Token : x, Posbility: 0.0032
Next Token : pack, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : er, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ing, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : con, Posbility: 0.0000
Next Token : cons, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_cons
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : u, Posbility: 0.0000
Next Token : ective, Posbility: 0.0000
Next Token : equ, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_conse
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cur, Posbility: 0.0000
Next Token : cu, Posbility: 0.0000
Next Token :  cut, Posbility: 0.0000
Next Token : quit, Posbility: 0.0000
Next Token : cut, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecut
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ical, Posbility: 0.0000
Next Token : IVE, Posbility: 0.0000
Next Token : ice, Posbility: 0.0000
Next Token : ively, Posbility: 0.0000
Next Token : ive, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : distinct, Posbility: 0.0000
Next Token : unique, Posbility: 0.0000
Next Token : double, Posbility: 0.0000
Next Token : dup, Posbility: 0.0000
Next Token : duplicate, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicate
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  iter, Posbility: 0.0006
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : inter, Posbility: 0.0000
Next Token : it, Posbility: 0.0001
Next Token : iterator, Posbility: 0.0001
Next Token : rec, Posbility: 0.0474
Next Token : iter, Posbility: 0.9531
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : recursive, Posbility: 0.0000
Next Token : res, Posbility: 0.0000
Next Token : rev, Posbility: 0.0000
Next Token : iter, Posbility: 0.0001
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : xy, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : z, Posbility: 0.0003
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : q, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : w, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : pack, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ~, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : w, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : w, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : , Posbility: 0.0005
Next Token :  in, Posbility: 0.0005
Next Token : ), Posbility: 0.0005
Next Token : 

, Posbility: 0.0330
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ```, Posbility: 0.0070
Next Token :   , Posbility: 0.0080
Next Token : (, Posbility: 0.0204
Next Token : let, Posbility: 0.0315
Next Token : in, Posbility: 0.8672
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fix, Posbility: 0.0001
Next Token : , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0850
Next Token : 
, Posbility: 0.9141
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0148
Next Token : open, Posbility: 0.0179
Next Token : module, Posbility: 0.0260
Next Token : (, Posbility: 0.1924
Next Token : let, Posbility: 0.6289
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0111
Next Token :  iter, Posbility: 0.0143
Next Token :  main, Posbility: 0.0162
Next Token :  , Posbility: 0.2871
Next Token :  rec, Posbility: 0.6094
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0052
Next Token :  list, Posbility: 0.0075
Next Token :  count, Posbility: 0.0085
Next Token :  make, Posbility: 0.0096
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0042
Next Token : fold, Posbility: 0.0054
Next Token : f, Posbility: 0.0062
Next Token : unpack, Posbility: 0.0062
Next Token : pack, Posbility: 0.9141
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0010
Next Token : ing, Posbility: 0.0012
Next Token :  =, Posbility: 0.0024
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0011
Next Token : list, Posbility: 0.0014
Next Token : con, Posbility: 0.0014
Next Token : all, Posbility: 0.0019
Next Token : cons, Posbility: 0.9648
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_cons
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : equ, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ective, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_conse
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  cut, Posbility: 0.0000
Next Token : cur, Posbility: 0.0000
Next Token : quit, Posbility: 0.0000
Next Token : cu, Posbility: 0.0000
Next Token : cut, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecut
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0000
Next Token : IVE, Posbility: 0.0000
Next Token : ice, Posbility: 0.0000
Next Token : ively, Posbility: 0.0007
Next Token : ive, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token : s, Posbility: 0.0006
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0001
Next Token : unique, Posbility: 0.0002
Next Token : dup, Posbility: 0.0002
Next Token : double, Posbility: 0.0003
Next Token : duplicate, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicate
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0012
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0031
Next Token : ', Posbility: 0.0045
Next Token : 2, Posbility: 0.0045
Next Token :  , Posbility: 0.0199
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0248
Next Token : fold, Posbility: 0.0361
Next Token : rec, Posbility: 0.0361
Next Token : list, Posbility: 0.0464
Next Token : iter, Posbility: 0.4980
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0059
Next Token :  =, Posbility: 0.0067
Next Token :  , Posbility: 0.0723
Next Token : 2, Posbility: 0.0928
Next Token : _, Posbility: 0.7773
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0315
Next Token : loop, Posbility: 0.0315
Next Token : iter, Posbility: 0.0967
Next Token : rec, Posbility: 0.1099
Next Token : opt, Posbility: 0.1807
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0037
Next Token : 1, Posbility: 0.0042
Next Token :  =, Posbility: 0.0089
Next Token : _, Posbility: 0.0513
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token : opt, Posbility: 0.0006
Next Token : (, Posbility: 0.0013
Next Token : f, Posbility: 0.0015
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token : s, Posbility: 0.0052
Next Token :  , Posbility: 0.0109
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0001
Next Token :  function, Posbility: 0.0002
Next Token :  , Posbility: 0.0010
Next Token :  match, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :    , Posbility: 0.0004
Next Token :     , Posbility: 0.0019
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0004
Next Token : if, Posbility: 0.0019
Next Token : try, Posbility: 0.0058
Next Token : let, Posbility: 0.0139
Next Token : match, Posbility: 0.9766
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pack, Posbility: 0.0001
Next Token : Option, Posbility: 0.0002
Next Token : List, Posbility: 0.0004
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [], Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0009
Next Token :  nil, Posbility: 0.0009
Next Token :  None, Posbility: 0.0025
Next Token :  , Posbility: 0.0067
Next Token :  [], Posbility: 0.9883
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  as, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  |, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0009
Next Token : 
, Posbility: 0.0024
Next Token :  , Posbility: 0.0066
Next Token :  None, Posbility: 0.0066
Next Token :  [], Posbility: 0.9805
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  as, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  |, Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0007
Next Token :  [], Posbility: 0.0019
Next Token :  [, Posbility: 0.0025
Next Token :  Some, Posbility: 0.0040
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Nil, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : (, Posbility: 0.0013
Next Token : _, Posbility: 0.0041
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0003
Next Token : s, Posbility: 0.0003
Next Token : :, Posbility: 0.0017
Next Token :  , Posbility: 0.0203
Next Token : ::, Posbility: 0.9766
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : [, Posbility: 0.0005
Next Token : [], Posbility: 0.0006
Next Token : y, Posbility: 0.0012
Next Token : _, Posbility: 0.0046
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token : ::, Posbility: 0.0003
Next Token :  , Posbility: 0.0036
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0004
Next Token : 
, Posbility: 0.0004
Next Token :  |, Posbility: 0.0015
Next Token :  when, Posbility: 0.0096
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token :  match, Posbility: 0.0013
Next Token :  , Posbility: 0.0036
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0006
Next Token :     , Posbility: 0.0007
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : if, Posbility: 0.0019
Next Token : try, Posbility: 0.0031
Next Token : match, Posbility: 0.0140
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ?, Posbility: 0.0001
Next Token :  iter, Posbility: 0.0002
Next Token :  v, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : w, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0005
Next Token : z, Posbility: 0.0052
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  match, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  Some, Posbility: 0.0012
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : List, Posbility: 0.0003
Next Token : Option, Posbility: 0.0005
Next Token : pack, Posbility: 0.0007
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ~, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :      , Posbility: 0.0005
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0008
Next Token : if, Posbility: 0.0027
Next Token : try, Posbility: 0.0040
Next Token : match, Posbility: 0.0157
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0002
Next Token : ?, Posbility: 0.0002
Next Token :  v, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0004
Next Token : w, Posbility: 0.0013
Next Token : z, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0001
Next Token :  match, Posbility: 0.0005
Next Token :  Some, Posbility: 0.0009
Next Token : 
, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Pack, Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.0013
Next Token : List, Posbility: 0.0015
Next Token : pack, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : er, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ing, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : con, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : cons, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_cons
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cut, Posbility: 0.0000
Next Token : ective, Posbility: 0.0000
Next Token : equ, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_conse
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cur, Posbility: 0.0000
Next Token : cu, Posbility: 0.0000
Next Token :  cut, Posbility: 0.0000
Next Token : quit, Posbility: 0.0000
Next Token : cut, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecut
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ical, Posbility: 0.0000
Next Token : IVE, Posbility: 0.0000
Next Token : ice, Posbility: 0.0000
Next Token : ively, Posbility: 0.0000
Next Token : ive, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : distinct, Posbility: 0.0000
Next Token : unique, Posbility: 0.0000
Next Token : double, Posbility: 0.0000
Next Token : dup, Posbility: 0.0000
Next Token : duplicate, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicate
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : it, Posbility: 0.0000
Next Token : iterate, Posbility: 0.0000
Next Token : opt, Posbility: 0.0009
Next Token : rec, Posbility: 0.0041
Next Token : iter, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : ?, Posbility: 0.0001
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : iter, Posbility: 0.0001
Next Token : rec, Posbility: 0.0067
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : xy, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :      , Posbility: 0.0010
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : if, Posbility: 0.0008
Next Token : z, Posbility: 0.0017
Next Token : match, Posbility: 0.0022
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : q, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : w, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w =
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ~, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : w, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :      , Posbility: 0.0003
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : let, Posbility: 0.0003
Next Token : match, Posbility: 0.0007
Next Token : w, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0005
Next Token : ), Posbility: 0.0005
Next Token :  in, Posbility: 0.0018
Next Token : 

, Posbility: 0.0371
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0039
Next Token :   , Posbility: 0.0041
Next Token : (, Posbility: 0.0044
Next Token : let, Posbility: 0.0082
Next Token : in, Posbility: 0.9492
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
 score:False
Error type: noerr
---------------------------
Next Token : </, Posbility: 0.0000
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.1328
Next Token : 
, Posbility: 0.8672
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in

 score:False
Error type: noerr
---------------------------
Next Token : and, Posbility: 0.0038
Next Token : *, Posbility: 0.0111
Next Token : module, Posbility: 0.0439
Next Token : (, Posbility: 0.1357
Next Token : let, Posbility: 0.7344
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let
 score:False
Error type: noerr
---------------------------
Next Token :  main, Posbility: 0.0019
Next Token :  test, Posbility: 0.0027
Next Token :  iter, Posbility: 0.0052
Next Token :  , Posbility: 0.1035
Next Token :  rec, Posbility: 0.8672
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  iter, Posbility: 0.0018
Next Token :  remove, Posbility: 0.0021
Next Token :  make, Posbility: 0.0027
Next Token :  count, Posbility: 0.0030
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : append, Posbility: 0.0013
Next Token : f, Posbility: 0.0019
Next Token : fold, Posbility: 0.0024
Next Token : unpack, Posbility: 0.0031
Next Token : pack, Posbility: 0.9727
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack
 score:False
Error type: noerr
---------------------------
Next Token : ing, Posbility: 0.0003
Next Token : 2, Posbility: 0.0004
Next Token :  =, Posbility: 0.0007
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0004
Next Token : non, Posbility: 0.0004
Next Token : con, Posbility: 0.0005
Next Token : all, Posbility: 0.0007
Next Token : cons, Posbility: 0.9883
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_cons
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : equ, Posbility: 0.0000
Next Token : ective, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_conse
 score:False
Error type: noerr
---------------------------
Next Token : cur, Posbility: 0.0000
Next Token :  cut, Posbility: 0.0000
Next Token : quit, Posbility: 0.0000
Next Token : cu, Posbility: 0.0000
Next Token : cut, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecut
 score:False
Error type: noerr
---------------------------
Next Token : i, Posbility: 0.0000
Next Token : IVE, Posbility: 0.0000
Next Token : ice, Posbility: 0.0000
Next Token : ively, Posbility: 0.0003
Next Token : ive, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_
 score:False
Error type: noerr
---------------------------
Next Token : dup, Posbility: 0.0001
Next Token : distinct, Posbility: 0.0001
Next Token : unique, Posbility: 0.0002
Next Token : double, Posbility: 0.0002
Next Token : duplicate, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicate
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0006
Next Token : 2, Posbility: 0.0012
Next Token : ', Posbility: 0.0013
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_
 score:False
Error type: noerr
---------------------------
Next Token : fold, Posbility: 0.0079
Next Token : list, Posbility: 0.0189
Next Token : rec, Posbility: 0.0276
Next Token : opt, Posbility: 0.1797
Next Token : iter, Posbility: 0.6250
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter
 score:False
Error type: noerr
---------------------------
Next Token : opt, Posbility: 0.0011
Next Token : 3, Posbility: 0.0013
Next Token :  , Posbility: 0.0084
Next Token : 2, Posbility: 0.0156
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_
 score:False
Error type: noerr
---------------------------
Next Token : all, Posbility: 0.0030
Next Token : seq, Posbility: 0.0034
Next Token : list, Posbility: 0.0056
Next Token : rec, Posbility: 0.0417
Next Token : opt, Posbility: 0.8398
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0034
Next Token : ', Posbility: 0.0049
Next Token :  , Posbility: 0.0172
Next Token : 2, Posbility: 0.0284
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0023
Next Token : iter, Posbility: 0.0037
Next Token : rev, Posbility: 0.0037
Next Token : opt, Posbility: 0.0147
Next Token : rec, Posbility: 0.9102
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec
 score:False
Error type: noerr
---------------------------
Next Token : urse, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token : 
, Posbility: 0.0013
Next Token :  =, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x
 score:False
Error type: noerr
---------------------------
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
 score:False
Error type: noerr
---------------------------
Next Token :  function, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : try, Posbility: 0.0003
Next Token : let, Posbility: 0.0010
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match
 score:False
Error type: noerr
---------------------------
Next Token :  with, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match 
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : pack, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  |
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  nil, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | []
 score:False
Error type: noerr
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] 
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] ->
 score:False
Error type: noerr
---------------------------
Next Token :  nil, Posbility: 0.0001
Next Token :  None, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :  as, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : case, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  |
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | 
 score:False
Error type: noerr
---------------------------
Next Token : head, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x
 score:False
Error type: noerr
---------------------------
Next Token : @, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::x
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  when, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : try, Posbility: 0.0003
Next Token : match, Posbility: 0.0008
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let
 score:False
Error type: noerr
---------------------------
Next Token :  iter, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let 
 score:False
Error type: noerr
---------------------------
Next Token : w, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : z, Posbility: 0.0006
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y =
 score:False
Error type: noerr
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : pack, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x
 score:False
Error type: noerr
---------------------------
Next Token : &, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ~, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : try, Posbility: 0.0001
Next Token : match, Posbility: 0.0003
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : p, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : w, Posbility: 0.0001
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z =
 score:False
Error type: noerr
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : Pack, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : pack, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : er, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ing, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_
 score:False
Error type: noerr
---------------------------
Next Token : rec, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : conc, Posbility: 0.0000
Next Token : con, Posbility: 0.0000
Next Token : cons, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_cons
 score:False
Error type: noerr
---------------------------
Next Token : cut, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ective, Posbility: 0.0000
Next Token : equ, Posbility: 0.0000
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_conse
 score:False
Error type: noerr
---------------------------
Next Token : Cut, Posbility: 0.0000
Next Token : ut, Posbility: 0.0000
Next Token :  cut, Posbility: 0.0000
Next Token : quit, Posbility: 0.0000
Next Token : cut, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecut
 score:False
Error type: noerr
---------------------------
Next Token : ative, Posbility: 0.0000
Next Token : ice, Posbility: 0.0000
Next Token : IVE, Posbility: 0.0000
Next Token : ively, Posbility: 0.0000
Next Token : ive, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_
 score:False
Error type: noerr
---------------------------
Next Token : Duplicate, Posbility: 0.0000
Next Token : unique, Posbility: 0.0000
Next Token : dup, Posbility: 0.0000
Next Token : double, Posbility: 0.0000
Next Token : duplicate, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicate
 score:False
Error type: noerr
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_
 score:False
Error type: noerr
---------------------------
Next Token : iterator, Posbility: 0.0000
Next Token : iterate, Posbility: 0.0000
Next Token : opt, Posbility: 0.0001
Next Token : rec, Posbility: 0.0015
Next Token : iter, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : rec, Posbility: 0.0025
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : res, Posbility: 0.0000
Next Token : rc, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : rev, Posbility: 0.0000
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec 
 score:False
Error type: noerr
---------------------------
Next Token : xy, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : u, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : q, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : w, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w
 score:False
Error type: noerr
---------------------------
Next Token :  :=, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w =
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = 
 score:False
Error type: noerr
---------------------------
Next Token : pack, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x
 score:False
Error type: noerr
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ~, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : w, Posbility: 0.0000
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in

 score:False
Error type: noerr
---------------------------
Next Token :        , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      
 score:False
Error type: noerr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : match, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : w, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0004
Next Token : ), Posbility: 0.0004
Next Token : , Posbility: 0.0006
Next Token : 

, Posbility: 0.0330
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0048
Next Token : ```, Posbility: 0.0055
Next Token : (, Posbility: 0.0079
Next Token : let, Posbility: 0.0168
Next Token : in, Posbility: 0.9180
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : , Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0850
Next Token : 
, Posbility: 0.9141
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in

 score:False
Error type: noerr
---------------------------
Next Token : *, Posbility: 0.0076
Next Token : open, Posbility: 0.0111
Next Token : module, Posbility: 0.0250
Next Token : (, Posbility: 0.1738
Next Token : let, Posbility: 0.6875
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let
 score:False
Error type: noerr
---------------------------
Next Token :  main, Posbility: 0.0028
Next Token :  test, Posbility: 0.0059
Next Token :  iter, Posbility: 0.0110
Next Token :  , Posbility: 0.1719
Next Token :  rec, Posbility: 0.7695
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  list, Posbility: 0.0030
Next Token :  remove, Posbility: 0.0030
Next Token :  make, Posbility: 0.0038
Next Token :  count, Posbility: 0.0043
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : append, Posbility: 0.0021
Next Token : f, Posbility: 0.0027
Next Token : fold, Posbility: 0.0039
Next Token : unpack, Posbility: 0.0045
Next Token : pack, Posbility: 0.9609
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack
 score:False
Error type: noerr
---------------------------
Next Token : ing, Posbility: 0.0004
Next Token : 2, Posbility: 0.0005
Next Token :  =, Posbility: 0.0010
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0005
Next Token : con, Posbility: 0.0007
Next Token : non, Posbility: 0.0007
Next Token : all, Posbility: 0.0012
Next Token : cons, Posbility: 0.9805
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_cons
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : equ, Posbility: 0.0000
Next Token : ective, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_conse
 score:False
Error type: noerr
---------------------------
Next Token : cur, Posbility: 0.0000
Next Token :  cut, Posbility: 0.0000
Next Token : quit, Posbility: 0.0000
Next Token : cu, Posbility: 0.0000
Next Token : cut, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecut
 score:False
Error type: noerr
---------------------------
Next Token : iv, Posbility: 0.0000
Next Token : IVE, Posbility: 0.0000
Next Token : ice, Posbility: 0.0000
Next Token : ively, Posbility: 0.0003
Next Token : ive, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_
 score:False
Error type: noerr
---------------------------
Next Token : non, Posbility: 0.0001
Next Token : distinct, Posbility: 0.0002
Next Token : unique, Posbility: 0.0002
Next Token : double, Posbility: 0.0002
Next Token : duplicate, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicate
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0010
Next Token : ', Posbility: 0.0017
Next Token : 2, Posbility: 0.0017
Next Token :  , Posbility: 0.0075
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_
 score:False
Error type: noerr
---------------------------
Next Token : fold, Posbility: 0.0143
Next Token : rec, Posbility: 0.0267
Next Token : list, Posbility: 0.0342
Next Token : opt, Posbility: 0.1738
Next Token : iter, Posbility: 0.5352
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter
 score:False
Error type: noerr
---------------------------
Next Token : opt, Posbility: 0.0014
Next Token : 3, Posbility: 0.0016
Next Token :  , Posbility: 0.0106
Next Token : 2, Posbility: 0.0176
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_
 score:False
Error type: noerr
---------------------------
Next Token : seq, Posbility: 0.0084
Next Token : lazy, Posbility: 0.0095
Next Token : list, Posbility: 0.0228
Next Token : rec, Posbility: 0.0427
Next Token : opt, Posbility: 0.6680
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0022
Next Token : 1, Posbility: 0.0025
Next Token : 2, Posbility: 0.0308
Next Token :  , Posbility: 0.0574
Next Token : _, Posbility: 0.8984
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0190
Next Token : list, Posbility: 0.0315
Next Token : iter, Posbility: 0.0588
Next Token : rec, Posbility: 0.2051
Next Token : opt, Posbility: 0.2051
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0014
Next Token : 
, Posbility: 0.0057
Next Token :  =, Posbility: 0.0057
Next Token : _, Posbility: 0.0254
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : f, Posbility: 0.0002
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0004
Next Token :  , Posbility: 0.0010
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_opt x =
 score:False
Error type: noerr
---------------------------
Next Token :  function, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_opt x =

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_opt x =
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : try, Posbility: 0.0002
Next Token : let, Posbility: 0.0013
Next Token : match, Posbility: 0.9961
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_opt x =
  match
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_opt x =
  match 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : pack, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_opt x =
  match x
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_opt x =
  match x with
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_opt x =
  match x with

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to pack consecutive duplicates of a given list elements into sublists. *)
let rec pack_consecutive_duplicates x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_rec x =
  match x with
  | [] -> []
  | x::xs ->
      let y = x::xs in
      let z = pack_consecutive_duplicates_iter_opt_rec y in
      let w = x::z in
      w
in
let rec pack_consecutive_duplicates_iter_opt_opt x =
  match x with
  
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>