code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  non, Posbility: 0.0479
Next Token :  , Posbility: 0.0894
Next Token :  find, Posbility: 0.1011
Next Token :  first, Posbility: 0.2139
Next Token :  rec, Posbility: 0.4531
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0303
Next Token :  non, Posbility: 0.0388
Next Token :  first, Posbility: 0.1533
Next Token :  , Posbility: 0.2539
Next Token :  find, Posbility: 0.2871
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Non, Posbility: 0.0061
Next Token :  =, Posbility: 0.0129
Next Token : First, Posbility: 0.0166
Next Token :  , Posbility: 0.0212
Next Token : _, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : nr, Posbility: 0.0175
Next Token : next, Posbility: 0.0327
Next Token : char, Posbility: 0.0693
Next Token : non, Posbility: 0.1465
Next Token : first, Posbility: 0.5117
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  non, Posbility: 0.0023
Next Token : (, Posbility: 0.0104
Next Token :  , Posbility: 0.0171
Next Token :  =, Posbility: 0.0282
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : no, Posbility: 0.0229
Next Token : unique, Posbility: 0.0229
Next Token : not, Posbility: 0.0708
Next Token : char, Posbility: 0.0908
Next Token : non, Posbility: 0.5938
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0024
Next Token : repeat, Posbility: 0.0064
Next Token : rep, Posbility: 0.0064
Next Token : repeated, Posbility: 0.0175
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : duplicate, Posbility: 0.0114
Next Token : re, Posbility: 0.0310
Next Token : rep, Posbility: 0.0845
Next Token : repeat, Posbility: 0.2295
Next Token : repeated, Posbility: 0.6250
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0126
Next Token : (, Posbility: 0.0933
Next Token :  , Posbility: 0.0933
Next Token :  =, Posbility: 0.0933
Next Token : _, Posbility: 0.6875
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : chr, Posbility: 0.0022
Next Token : in, Posbility: 0.0037
Next Token : letter, Posbility: 0.0037
Next Token : character, Posbility: 0.2578
Next Token : char, Posbility: 0.7031
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0204
Next Token : (, Posbility: 0.0432
Next Token : _, Posbility: 0.0806
Next Token :  =, Posbility: 0.1328
Next Token :  , Posbility: 0.5938
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : st, Posbility: 0.0152
Next Token : x, Posbility: 0.0413
Next Token : :, Posbility: 0.0601
Next Token : (, Posbility: 0.1270
Next Token : s, Posbility: 0.6445
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0035
Next Token :  pos, Posbility: 0.0058
Next Token :  i, Posbility: 0.0139
Next Token :  , Posbility: 0.0623
Next Token :  =, Posbility: 0.8594
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0051
Next Token :  function, Posbility: 0.0200
Next Token :  match, Posbility: 0.0425
Next Token :  , Posbility: 0.0618
Next Token : 
, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0077
Next Token : 	, Posbility: 0.0127
Next Token :    , Posbility: 0.0144
Next Token :     , Posbility: 0.1553
Next Token :   , Posbility: 0.7852
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0085
Next Token : (, Posbility: 0.0159
Next Token : if, Posbility: 0.1934
Next Token : match, Posbility: 0.3613
Next Token : let, Posbility: 0.3613
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  open, Posbility: 0.0302
Next Token :  len, Posbility: 0.0386
Next Token :  first, Posbility: 0.0496
Next Token :  , Posbility: 0.2520
Next Token :  rec, Posbility: 0.4160
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  go, Posbility: 0.0510
Next Token :  rec, Posbility: 0.1079
Next Token :  find, Posbility: 0.1387
Next Token :  loop, Posbility: 0.1572
Next Token :  , Posbility: 0.2930
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : inner, Posbility: 0.0464
Next Token : r, Posbility: 0.0525
Next Token : aux, Posbility: 0.1260
Next Token : f, Posbility: 0.1426
Next Token : helper, Posbility: 0.2676
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0227
Next Token :  acc, Posbility: 0.0292
Next Token :  i, Posbility: 0.1016
Next Token :  =, Posbility: 0.1309
Next Token :  , Posbility: 0.5859
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0320
Next Token : (), Posbility: 0.0364
Next Token : c, Posbility: 0.0466
Next Token : (, Posbility: 0.0679
Next Token : s, Posbility: 0.6445
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pos, Posbility: 0.0435
Next Token :  acc, Posbility: 0.0435
Next Token :  , Posbility: 0.1182
Next Token :  i, Posbility: 0.2500
Next Token :  =, Posbility: 0.4121
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0010
Next Token :  function, Posbility: 0.0045
Next Token :  match, Posbility: 0.0074
Next Token :  , Posbility: 0.0200
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0027
Next Token :    , Posbility: 0.0045
Next Token :       , Posbility: 0.0137
Next Token :   , Posbility: 0.0156
Next Token :     , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0069
Next Token : case, Posbility: 0.0069
Next Token : let, Posbility: 0.2021
Next Token : match, Posbility: 0.3770
Next Token : if, Posbility: 0.3770
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0117
Next Token :  not, Posbility: 0.0317
Next Token :  string, Posbility: 0.0408
Next Token :  , Posbility: 0.3867
Next Token :  String, Posbility: 0.4961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Library, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : _, Posbility: 0.0015
Next Token : s, Posbility: 0.0019
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0030
Next Token : is, Posbility: 0.0104
Next Token : Length, Posbility: 0.0133
Next Token : get, Posbility: 0.0171
Next Token : length, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0005
Next Token :  ~, Posbility: 0.0006
Next Token :  =, Posbility: 0.0030
Next Token : (, Posbility: 0.0371
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : >, Posbility: 0.0024
Next Token : <, Posbility: 0.0031
Next Token : (, Posbility: 0.0067
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  >=, Posbility: 0.0075
Next Token :  ==, Posbility: 0.0204
Next Token :  <=, Posbility: 0.1504
Next Token :  , Posbility: 0.4082
Next Token :  =, Posbility: 0.4082
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : 0, Posbility: 0.0009
Next Token :  1, Posbility: 0.0179
Next Token :  0, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0018
Next Token :  , Posbility: 0.0030
Next Token :  ||, Posbility: 0.0082
Next Token : 
, Posbility: 0.0288
Next Token :  then, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0287
Next Token :  Some, Posbility: 0.0287
Next Token :  None, Posbility: 0.1289
Next Token : 
, Posbility: 0.3496
Next Token :  , Posbility: 0.3496
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : #, Posbility: 0.0625
Next Token : (, Posbility: 0.0913
Next Token : (', Posbility: 0.1035
Next Token : s, Posbility: 0.1172
Next Token : return, Posbility: 0.3184
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0266
Next Token :  Some, Posbility: 0.0266
Next Token :  ', Posbility: 0.0723
Next Token :  , Posbility: 0.1963
Next Token :  None, Posbility: 0.5352
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0057
Next Token :  , Posbility: 0.0093
Next Token :  else, Posbility: 0.0610
Next Token : ;, Posbility: 0.0693
Next Token : 
, Posbility: 0.8438
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0014
Next Token :      , Posbility: 0.0018
Next Token :       , Posbility: 0.0037
Next Token :    , Posbility: 0.0752
Next Token :     , Posbility: 0.9180
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0011
Next Token : elif, Posbility: 0.0049
Next Token : if, Posbility: 0.0153
Next Token : let, Posbility: 0.0322
Next Token : else, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0011
Next Token :  match, Posbility: 0.0165
Next Token :  {, Posbility: 0.0211
Next Token : 
, Posbility: 0.2578
Next Token :  , Posbility: 0.6992
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0099
Next Token : 
, Posbility: 0.0112
Next Token : begin, Posbility: 0.0112
Next Token : let, Posbility: 0.0569
Next Token : if, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0081
Next Token :  !, Posbility: 0.0133
Next Token :  not, Posbility: 0.0361
Next Token :  , Posbility: 0.3418
Next Token :  String, Posbility: 0.5664
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : char, Posbility: 0.0071
Next Token : member, Posbility: 0.0118
Next Token : mem, Posbility: 0.0249
Next Token : get, Posbility: 0.0679
Next Token : length, Posbility: 0.8281
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token :  =, Posbility: 0.0013
Next Token : (, Posbility: 0.0110
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0002
Next Token : >, Posbility: 0.0002
Next Token : <, Posbility: 0.0004
Next Token : (, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  >=, Posbility: 0.0021
Next Token :  ==, Posbility: 0.0095
Next Token :  <=, Posbility: 0.0200
Next Token :  , Posbility: 0.1152
Next Token :  =, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 1, Posbility: 0.0009
Next Token :  , Posbility: 0.0009
Next Token :  0, Posbility: 0.0009
Next Token :  1, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0013
Next Token :  ||, Posbility: 0.0031
Next Token :  &&, Posbility: 0.0058
Next Token : 
, Posbility: 0.0066
Next Token :  then, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0041
Next Token :  {, Posbility: 0.0060
Next Token :  Some, Posbility: 0.0236
Next Token : 
, Posbility: 0.1748
Next Token :  , Posbility: 0.7812
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0102
Next Token : if, Posbility: 0.0167
Next Token : 
, Posbility: 0.0167
Next Token : helper, Posbility: 0.0167
Next Token : return, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0025
Next Token :  String, Posbility: 0.0042
Next Token :  None, Posbility: 0.0054
Next Token :  , Posbility: 0.1787
Next Token :  Some, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0028
Next Token :  char, Posbility: 0.0046
Next Token : (, Posbility: 0.0302
Next Token :  String, Posbility: 0.0564
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Character, Posbility: 0.0016
Next Token : List, Posbility: 0.0020
Next Token : Char, Posbility: 0.0525
Next Token : (, Posbility: 0.1108
Next Token : s, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0];, Posbility: 0.0065
Next Token :  , Posbility: 0.0095
Next Token : [0], Posbility: 0.1904
Next Token : ., Posbility: 0.3555
Next Token : 
, Posbility: 0.4023
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0010
Next Token :   , Posbility: 0.0013
Next Token :    , Posbility: 0.0022
Next Token :       , Posbility: 0.0075
Next Token :     , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : elif, Posbility: 0.0004
Next Token : if, Posbility: 0.0013
Next Token : //, Posbility: 0.0013
Next Token : let, Posbility: 0.0124
Next Token : else, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0018
Next Token :  match, Posbility: 0.0146
Next Token :  {, Posbility: 0.0581
Next Token : 
, Posbility: 0.2949
Next Token :  , Posbility: 0.6250
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : begin, Posbility: 0.0118
Next Token : 
, Posbility: 0.0151
Next Token : return, Posbility: 0.0151
Next Token : let, Posbility: 0.1118
Next Token : if, Posbility: 0.8281
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0170
Next Token :  char, Posbility: 0.0170
Next Token :  not, Posbility: 0.0461
Next Token :  String, Posbility: 0.4375
Next Token :  , Posbility: 0.4375
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0435
Next Token : List, Posbility: 0.0491
Next Token : (, Posbility: 0.0713
Next Token : Char, Posbility: 0.1719
Next Token : s, Posbility: 0.5273
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0092
Next Token :  , Posbility: 0.0991
Next Token : ., Posbility: 0.1270
Next Token : [0], Posbility: 0.1270
Next Token :  =, Posbility: 0.5703
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0159
Next Token :  ", Posbility: 0.0432
Next Token :  "", Posbility: 0.1328
Next Token :  , Posbility: 0.3184
Next Token :  String, Posbility: 0.3613
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : [, Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : substring, Posbility: 0.0188
Next Token : last, Posbility: 0.0310
Next Token : concat, Posbility: 0.0398
Next Token : get, Posbility: 0.2949
Next Token : sub, Posbility: 0.2949
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0028
Next Token : (, Posbility: 0.0125
Next Token :  1, Posbility: 0.0265
Next Token :  0, Posbility: 0.0562
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (0,, Posbility: 0.0002
Next Token : [0], Posbility: 0.0002
Next Token : [0, Posbility: 0.0003
Next Token : (, Posbility: 0.0041
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0009
Next Token :  , Posbility: 0.0014
Next Token : ,, Posbility: 0.0039
Next Token :  1, Posbility: 0.0369
Next Token :  0, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0026
Next Token :  then, Posbility: 0.0090
Next Token :  String, Posbility: 0.0090
Next Token :  , Posbility: 0.0459
Next Token :  1, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0081
Next Token :  else, Posbility: 0.0091
Next Token :  &&, Posbility: 0.0132
Next Token : 
, Posbility: 0.0171
Next Token :  then, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0053
Next Token :  None, Posbility: 0.0098
Next Token :  Some, Posbility: 0.0344
Next Token : 
, Posbility: 0.0566
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0018
Next Token : if, Posbility: 0.0018
Next Token : 
, Posbility: 0.0049
Next Token : helper, Posbility: 0.2637
Next Token : return, Posbility: 0.7188
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0021
Next Token :  find, Posbility: 0.0425
Next Token :  None, Posbility: 0.1152
Next Token :  Some, Posbility: 0.3125
Next Token :  , Posbility: 0.5156
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0037
Next Token : (, Posbility: 0.0060
Next Token : return, Posbility: 0.0060
Next Token : s, Posbility: 0.0737
Next Token : helper, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0006
Next Token : 
, Posbility: 0.0009
Next Token : (, Posbility: 0.0108
Next Token :  String, Posbility: 0.3145
Next Token :  , Posbility: 0.6680
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : String, Posbility: 0.0012
Next Token : Char, Posbility: 0.0012
Next Token : helper, Posbility: 0.0033
Next Token : s, Posbility: 0.1797
Next Token : (, Posbility: 0.8047
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : drop, Posbility: 0.0005
Next Token : List, Posbility: 0.0009
Next Token : s, Posbility: 0.0013
Next Token : sub, Posbility: 0.0015
Next Token : String, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : substring, Posbility: 0.0050
Next Token : substr, Posbility: 0.0064
Next Token : remove, Posbility: 0.0106
Next Token : drop, Posbility: 0.0106
Next Token : sub, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : st, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : (, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1, Posbility: 0.0003
Next Token :  0, Posbility: 0.0022
Next Token :  1), Posbility: 0.0059
Next Token :  , Posbility: 0.1182
Next Token :  1, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  1, Posbility: 0.0021
Next Token :  1), Posbility: 0.0084
Next Token :  string, Posbility: 0.0095
Next Token :  , Posbility: 0.1152
Next Token :  String, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0000
Next Token : index, Posbility: 0.0001
Next Token : Length, Posbility: 0.0001
Next Token : len, Posbility: 0.0001
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0053
Next Token :  -1), Posbility: 0.0060
Next Token : ), Posbility: 0.0505
Next Token : (, Posbility: 0.1377
Next Token :  , Posbility: 0.7930
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : +1), Posbility: 0.0002
Next Token : -2, Posbility: 0.0004
Next Token : (, Posbility: 0.1064
Next Token : -, Posbility: 0.1064
Next Token : s, Posbility: 0.7852
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1), Posbility: 0.0112
Next Token : -1), Posbility: 0.0112
Next Token : );, Posbility: 0.0144
Next Token :  , Posbility: 0.4766
Next Token : ), Posbility: 0.4766
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0005
Next Token : 

, Posbility: 0.0028
Next Token :  else, Posbility: 0.0031
Next Token :  , Posbility: 0.0046
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0010
Next Token :         , Posbility: 0.0019
Next Token :    , Posbility: 0.0019
Next Token :   , Posbility: 0.0085
Next Token :     , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : |, Posbility: 0.0001
Next Token : //, Posbility: 0.0005
Next Token : let, Posbility: 0.0010
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0035
Next Token :  {, Posbility: 0.0226
Next Token :  match, Posbility: 0.0255
Next Token : 
, Posbility: 0.1885
Next Token :  , Posbility: 0.7461
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : begin, Posbility: 0.0159
Next Token : helper, Posbility: 0.0334
Next Token : return, Posbility: 0.0913
Next Token : let, Posbility: 0.1504
Next Token : if, Posbility: 0.6758
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0059
Next Token :  char, Posbility: 0.0076
Next Token :  not, Posbility: 0.0206
Next Token :  String, Posbility: 0.2520
Next Token :  , Posbility: 0.6836
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0171
Next Token : let, Posbility: 0.0282
Next Token : Char, Posbility: 0.0361
Next Token : (, Posbility: 0.0410
Next Token : s, Posbility: 0.8242
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0016
Next Token : ., Posbility: 0.0049
Next Token : [0], Posbility: 0.0081
Next Token :  , Posbility: 0.0361
Next Token :  =, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0012
Next Token :  Some, Posbility: 0.0014
Next Token : 
, Posbility: 0.0091
Next Token :  , Posbility: 0.0464
Next Token :  String, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : last, Posbility: 0.0009
Next Token : remove, Posbility: 0.0009
Next Token : substring, Posbility: 0.0015
Next Token : get, Posbility: 0.0024
Next Token : sub, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0001
Next Token :  1, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token :  0, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : (, Posbility: 0.0009
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  -1, Posbility: 0.0004
Next Token :  String, Posbility: 0.0012
Next Token :  , Posbility: 0.0242
Next Token :  1, Posbility: 0.4863
Next Token :  0, Posbility: 0.4863
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0008
Next Token :  0, Posbility: 0.0021
Next Token :  String, Posbility: 0.0889
Next Token :  1, Posbility: 0.2422
Next Token :  , Posbility: 0.6562
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0027
Next Token : Char, Posbility: 0.0027
Next Token : 3, Posbility: 0.0031
Next Token : (, Posbility: 0.0139
Next Token : 2, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ||, Posbility: 0.0009
Next Token : 
, Posbility: 0.0050
Next Token :  and, Posbility: 0.0050
Next Token :  &&, Posbility: 0.0369
Next Token :  then, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0045
Next Token :  {, Posbility: 0.0066
Next Token :  Some, Posbility: 0.0231
Next Token : 
, Posbility: 0.1934
Next Token :  , Posbility: 0.7617
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0052
Next Token : let, Posbility: 0.0140
Next Token : if, Posbility: 0.1040
Next Token : helper, Posbility: 0.1040
Next Token : return, Posbility: 0.7656
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0236
Next Token : 
, Posbility: 0.0342
Next Token :  find, Posbility: 0.0388
Next Token :  Some, Posbility: 0.0933
Next Token :  , Posbility: 0.7812
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0021
Next Token : (, Posbility: 0.0058
Next Token : s, Posbility: 0.0058
Next Token : if, Posbility: 0.1162
Next Token : helper, Posbility: 0.8594
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0015
Next Token : (, Posbility: 0.0027
Next Token :  ((, Posbility: 0.0058
Next Token :  String, Posbility: 0.0075
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0002
Next Token : (", Posbility: 0.0005
Next Token : helper, Posbility: 0.0009
Next Token : s, Posbility: 0.0292
Next Token : (, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0024
Next Token : if, Posbility: 0.0027
Next Token : s, Posbility: 0.0107
Next Token : helper, Posbility: 0.0137
Next Token : String, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : drop, Posbility: 0.0001
Next Token : remove, Posbility: 0.0002
Next Token : substr, Posbility: 0.0003
Next Token : substring, Posbility: 0.0006
Next Token : sub, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : (, Posbility: 0.0015
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0012
Next Token :  2), Posbility: 0.0012
Next Token :  1), Posbility: 0.0033
Next Token :  , Posbility: 0.4961
Next Token :  1, Posbility: 0.4961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  1, Posbility: 0.0043
Next Token :  , Posbility: 0.0315
Next Token :  2), Posbility: 0.0859
Next Token :  1), Posbility: 0.2334
Next Token :  String, Posbility: 0.6328
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Len, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : index, Posbility: 0.0001
Next Token : len, Posbility: 0.0001
Next Token : char, Posbility: 0.0001
Next Token : sub, Posbility: 0.0006
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  1), Posbility: 0.0002
Next Token : /, Posbility: 0.0003
Next Token : ), Posbility: 0.0010
Next Token : (, Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : /, Posbility: 0.0002
Next Token : -, Posbility: 0.0009
Next Token : (, Posbility: 0.0140
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0029
Next Token :  +, Posbility: 0.0029
Next Token : -1), Posbility: 0.0130
Next Token :  , Posbility: 0.2617
Next Token : ), Posbility: 0.7109
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0006
Next Token : 

, Posbility: 0.0015
Next Token :  , Posbility: 0.0045
Next Token :  else, Posbility: 0.0075
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0008
Next Token :         , Posbility: 0.0010
Next Token :   , Posbility: 0.0013
Next Token :    , Posbility: 0.0022
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : elif, Posbility: 0.0001
Next Token : |, Posbility: 0.0002
Next Token : //, Posbility: 0.0004
Next Token : let, Posbility: 0.0006
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  then, Posbility: 0.0036
Next Token :  match, Posbility: 0.0053
Next Token :  {, Posbility: 0.0128
Next Token : 
, Posbility: 0.0732
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : begin, Posbility: 0.0077
Next Token : let, Posbility: 0.0938
Next Token : return, Posbility: 0.0938
Next Token : helper, Posbility: 0.0938
Next Token : if, Posbility: 0.6914
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0017
Next Token :  string, Posbility: 0.0022
Next Token :  not, Posbility: 0.0060
Next Token :  String, Posbility: 0.0933
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0031
Next Token : helper, Posbility: 0.0064
Next Token : Char, Posbility: 0.0083
Next Token : (, Posbility: 0.0137
Next Token : s, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ==, Posbility: 0.0005
Next Token : ., Posbility: 0.0015
Next Token : [0], Posbility: 0.0022
Next Token :  , Posbility: 0.0059
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0003
Next Token :  ", Posbility: 0.0006
Next Token : 
, Posbility: 0.0024
Next Token :  , Posbility: 0.0140
Next Token :  String, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : get, Posbility: 0.0001
Next Token : take, Posbility: 0.0001
Next Token : substring, Posbility: 0.0003
Next Token : substr, Posbility: 0.0003
Next Token : sub, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0002
Next Token :  -1, Posbility: 0.0002
Next Token :  , Posbility: 0.0132
Next Token :  1, Posbility: 0.2656
Next Token :  0, Posbility: 0.7188
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0002
Next Token :  4, Posbility: 0.0051
Next Token :  1, Posbility: 0.0138
Next Token :  String, Posbility: 0.0138
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 5, Posbility: 0.0002
Next Token : (, Posbility: 0.0014
Next Token : s, Posbility: 0.0016
Next Token : 2, Posbility: 0.0292
Next Token : 3, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ||, Posbility: 0.0005
Next Token :  and, Posbility: 0.0005
Next Token : 
, Posbility: 0.0010
Next Token :  &&, Posbility: 0.0028
Next Token :  then, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0005
Next Token :  {, Posbility: 0.0011
Next Token :  Some, Posbility: 0.0050
Next Token : 
, Posbility: 0.0291
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0019
Next Token : let, Posbility: 0.0039
Next Token : if, Posbility: 0.0050
Next Token : helper, Posbility: 0.0226
Next Token : return, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0021
Next Token :  None, Posbility: 0.0065
Next Token :  find, Posbility: 0.0074
Next Token :  Some, Posbility: 0.0122
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0009
Next Token : s, Posbility: 0.0015
Next Token : return, Posbility: 0.0015
Next Token : if, Posbility: 0.0067
Next Token : helper, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token :  String, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (", Posbility: 0.0001
Next Token : helper, Posbility: 0.0001
Next Token : s, Posbility: 0.0022
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token : helper, Posbility: 0.0009
Next Token : s, Posbility: 0.0017
Next Token : String, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : remove, Posbility: 0.0000
Next Token : slice, Posbility: 0.0000
Next Token : substr, Posbility: 0.0001
Next Token : substring, Posbility: 0.0001
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  4, Posbility: 0.0003
Next Token :  , Posbility: 0.0179
Next Token :  1, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  1), Posbility: 0.0003
Next Token :  3), Posbility: 0.0004
Next Token :  2), Posbility: 0.0013
Next Token :  , Posbility: 0.0025
Next Token :  String, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sub, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : ), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0001
Next Token : -1), Posbility: 0.0002
Next Token :  +, Posbility: 0.0003
Next Token :  , Posbility: 0.0036
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0005
Next Token :  else, Posbility: 0.0008
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0006
Next Token :    , Posbility: 0.0013
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : elif, Posbility: 0.0001
Next Token : let, Posbility: 0.0004
Next Token : //, Posbility: 0.0005
Next Token : ..., Posbility: 0.0007
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  then, Posbility: 0.0020
Next Token :  match, Posbility: 0.0029
Next Token :  {, Posbility: 0.0080
Next Token : 
, Posbility: 0.0522
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : begin, Posbility: 0.0054
Next Token : helper, Posbility: 0.0398
Next Token : let, Posbility: 0.0398
Next Token : return, Posbility: 0.1079
Next Token : if, Posbility: 0.7969
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0008
Next Token :  string, Posbility: 0.0009
Next Token :  not, Posbility: 0.0021
Next Token :  String, Posbility: 0.0291
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0013
Next Token : helper, Posbility: 0.0013
Next Token : Char, Posbility: 0.0028
Next Token : (, Posbility: 0.0052
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ==, Posbility: 0.0003
Next Token : ., Posbility: 0.0004
Next Token : [0], Posbility: 0.0007
Next Token :  , Posbility: 0.0025
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "", Posbility: 0.0002
Next Token :  ", Posbility: 0.0003
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 0.0036
Next Token :  String, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : slice, Posbility: 0.0000
Next Token : take, Posbility: 0.0001
Next Token : substr, Posbility: 0.0002
Next Token : substring, Posbility: 0.0003
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0001
Next Token :  -1, Posbility: 0.0001
Next Token :  , Posbility: 0.0022
Next Token :  1, Posbility: 0.1187
Next Token :  0, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  String, Posbility: 0.0003
Next Token :  1, Posbility: 0.0007
Next Token :  , Posbility: 0.0022
Next Token :  4, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0001
Next Token :  &&, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  ..., Posbility: 0.0004
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0003
Next Token :  {, Posbility: 0.0004
Next Token :  Some, Posbility: 0.0015
Next Token : 
, Posbility: 0.0085
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0005
Next Token : if, Posbility: 0.0007
Next Token : let, Posbility: 0.0010
Next Token : helper, Posbility: 0.0075
Next Token : return, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0007
Next Token :  None, Posbility: 0.0036
Next Token :  find, Posbility: 0.0036
Next Token :  Some, Posbility: 0.0059
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : s, Posbility: 0.0006
Next Token : return, Posbility: 0.0009
Next Token : if, Posbility: 0.0013
Next Token : helper, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token :  String, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : s, Posbility: 0.0007
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : helper, Posbility: 0.0002
Next Token : s, Posbility: 0.0008
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : slice, Posbility: 0.0000
Next Token : drop, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : substring, Posbility: 0.0001
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  1), Posbility: 0.0000
Next Token :  0, Posbility: 0.0002
Next Token :  4, Posbility: 0.0002
Next Token :  , Posbility: 0.0041
Next Token :  1, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  2), Posbility: 0.0001
Next Token :  4), Posbility: 0.0001
Next Token :  3), Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token : );, Posbility: 0.0001
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :  else, Posbility: 0.0006
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0007
Next Token :    , Posbility: 0.0015
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : elif, Posbility: 0.0001
Next Token : //, Posbility: 0.0004
Next Token : let, Posbility: 0.0005
Next Token : ..., Posbility: 0.0005
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0021
Next Token :  then, Posbility: 0.0027
Next Token :  {, Posbility: 0.0072
Next Token : 
, Posbility: 0.0366
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : begin, Posbility: 0.0033
Next Token : let, Posbility: 0.0405
Next Token : return, Posbility: 0.0669
Next Token : helper, Posbility: 0.0669
Next Token : if, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0005
Next Token :  string, Posbility: 0.0007
Next Token :  not, Posbility: 0.0015
Next Token :  String, Posbility: 0.0201
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0005
Next Token : let, Posbility: 0.0006
Next Token : Char, Posbility: 0.0015
Next Token : (, Posbility: 0.0028
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0002
Next Token :  ==, Posbility: 0.0002
Next Token : [0], Posbility: 0.0003
Next Token :  , Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "", Posbility: 0.0002
Next Token :  ", Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 0.0025
Next Token :  String, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : slice, Posbility: 0.0000
Next Token : take, Posbility: 0.0000
Next Token : substr, Posbility: 0.0002
Next Token : substring, Posbility: 0.0002
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  4, Posbility: 0.0001
Next Token :  , Posbility: 0.0015
Next Token :  1, Posbility: 0.0293
Next Token :  0, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0001
Next Token :  10, Posbility: 0.0002
Next Token :  1, Posbility: 0.0005
Next Token :  4, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 7, Posbility: 0.0003
Next Token : 2, Posbility: 0.0005
Next Token : 6, Posbility: 0.0005
Next Token : 3, Posbility: 0.0006
Next Token : 5, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  ||, Posbility: 0.0001
Next Token :  &&, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0003
Next Token :  {, Posbility: 0.0003
Next Token :  Some, Posbility: 0.0013
Next Token : 
, Posbility: 0.0067
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0005
Next Token : (), Posbility: 0.0005
Next Token : let, Posbility: 0.0010
Next Token : helper, Posbility: 0.0085
Next Token : return, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  find, Posbility: 0.0022
Next Token :  None, Posbility: 0.0040
Next Token :  Some, Posbility: 0.0046
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : s, Posbility: 0.0006
Next Token : if, Posbility: 0.0006
Next Token : return, Posbility: 0.0009
Next Token : helper, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token :  String, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : s, Posbility: 0.0005
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : helper, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0006
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : slice, Posbility: 0.0000
Next Token : drop, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : substring, Posbility: 0.0001
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  1), Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  4, Posbility: 0.0002
Next Token :  , Posbility: 0.0025
Next Token :  1, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  3), Posbility: 0.0000
Next Token :  4), Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : +1), Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : );, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  else, Posbility: 0.0006
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0009
Next Token :    , Posbility: 0.0019
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : elif, Posbility: 0.0001
Next Token : ..., Posbility: 0.0001
Next Token : //, Posbility: 0.0004
Next Token : let, Posbility: 0.0006
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  then, Posbility: 0.0020
Next Token :  match, Posbility: 0.0026
Next Token :  {, Posbility: 0.0081
Next Token : 
, Posbility: 0.0464
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : begin, Posbility: 0.0033
Next Token : let, Posbility: 0.0405
Next Token : return, Posbility: 0.0669
Next Token : helper, Posbility: 0.0669
Next Token : if, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0005
Next Token :  string, Posbility: 0.0007
Next Token :  not, Posbility: 0.0017
Next Token :  String, Posbility: 0.0201
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Character, Posbility: 0.0005
Next Token : let, Posbility: 0.0008
Next Token : Char, Posbility: 0.0022
Next Token : (, Posbility: 0.0032
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ==, Posbility: 0.0002
Next Token : ., Posbility: 0.0003
Next Token : [0], Posbility: 0.0004
Next Token :  , Posbility: 0.0019
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "", Posbility: 0.0004
Next Token :  ", Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 0.0028
Next Token :  String, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : slice, Posbility: 0.0000
Next Token : take, Posbility: 0.0000
Next Token : substr, Posbility: 0.0001
Next Token : substring, Posbility: 0.0002
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  -1, Posbility: 0.0001
Next Token :  4, Posbility: 0.0001
Next Token :  , Posbility: 0.0023
Next Token :  1, Posbility: 0.0757
Next Token :  0, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  10, Posbility: 0.0003
Next Token :  4, Posbility: 0.0007
Next Token :  1, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0003
Next Token : 2, Posbility: 0.0006
Next Token : 5, Posbility: 0.0006
Next Token : 7, Posbility: 0.0007
Next Token : 6, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  &&, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0003
Next Token :  {, Posbility: 0.0003
Next Token :  Some, Posbility: 0.0010
Next Token : 
, Posbility: 0.0067
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0004
Next Token : (), Posbility: 0.0005
Next Token : let, Posbility: 0.0008
Next Token : helper, Posbility: 0.0076
Next Token : return, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  find, Posbility: 0.0019
Next Token :  None, Posbility: 0.0032
Next Token :  Some, Posbility: 0.0036
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : if, Posbility: 0.0004
Next Token : s, Posbility: 0.0004
Next Token : return, Posbility: 0.0007
Next Token : helper, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token :  String, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : s, Posbility: 0.0005
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : helper, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0004
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : slice, Posbility: 0.0000
Next Token : drop, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :  4, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token : String, Posbility: 0.0000
Next Token :  3), Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token : );, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  else, Posbility: 0.0006
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0008
Next Token :    , Posbility: 0.0015
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : elif, Posbility: 0.0001
Next Token : //, Posbility: 0.0003
Next Token : let, Posbility: 0.0006
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  then, Posbility: 0.0011
Next Token :  match, Posbility: 0.0018
Next Token :  {, Posbility: 0.0064
Next Token : 
, Posbility: 0.0325
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : begin, Posbility: 0.0022
Next Token : let, Posbility: 0.0265
Next Token : return, Posbility: 0.0437
Next Token : helper, Posbility: 0.0437
Next Token : if, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0003
Next Token :  string, Posbility: 0.0004
Next Token :  not, Posbility: 0.0010
Next Token :  String, Posbility: 0.0140
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0004
Next Token : let, Posbility: 0.0005
Next Token : Char, Posbility: 0.0013
Next Token : (, Posbility: 0.0025
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0001
Next Token :  ==, Posbility: 0.0002
Next Token : [0], Posbility: 0.0002
Next Token :  , Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0003
Next Token :  "", Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 0.0017
Next Token :  String, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : slice, Posbility: 0.0000
Next Token : take, Posbility: 0.0000
Next Token : substr, Posbility: 0.0001
Next Token : substring, Posbility: 0.0001
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  4, Posbility: 0.0000
Next Token :  , Posbility: 0.0011
Next Token :  1, Posbility: 0.0293
Next Token :  0, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  4, Posbility: 0.0001
Next Token :  10, Posbility: 0.0002
Next Token :  1, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 9, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : 6, Posbility: 0.0002
Next Token : 8, Posbility: 0.0003
Next Token : 7, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token :  None, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0004
Next Token : 
, Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : (), Posbility: 0.0002
Next Token : let, Posbility: 0.0003
Next Token : helper, Posbility: 0.0036
Next Token : return, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  find, Posbility: 0.0010
Next Token :  None, Posbility: 0.0019
Next Token :  Some, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : return, Posbility: 0.0004
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  String, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : s, Posbility: 0.0003
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0004
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : drop, Posbility: 0.0000
Next Token : slice, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :  4, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  1), Posbility: 0.0000
Next Token :  3), Posbility: 0.0000
Next Token : String, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 6, Posbility: 0.0000
Next Token : 7, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : );, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  else, Posbility: 0.0005
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0009
Next Token :    , Posbility: 0.0013
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : elif, Posbility: 0.0001
Next Token : //, Posbility: 0.0003
Next Token : let, Posbility: 0.0005
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  then, Posbility: 0.0009
Next Token :  match, Posbility: 0.0013
Next Token :  {, Posbility: 0.0050
Next Token : 
, Posbility: 0.0256
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : begin, Posbility: 0.0021
Next Token : let, Posbility: 0.0258
Next Token : helper, Posbility: 0.0425
Next Token : return, Posbility: 0.0698
Next Token : if, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0002
Next Token :  string, Posbility: 0.0003
Next Token :  not, Posbility: 0.0008
Next Token :  String, Posbility: 0.0097
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Character, Posbility: 0.0003
Next Token : let, Posbility: 0.0003
Next Token : Char, Posbility: 0.0008
Next Token : (, Posbility: 0.0017
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0001
Next Token :  ==, Posbility: 0.0001
Next Token : [0], Posbility: 0.0002
Next Token :  , Posbility: 0.0010
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0003
Next Token :  "", Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0012
Next Token :  String, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : slice, Posbility: 0.0000
Next Token : take, Posbility: 0.0000
Next Token : substr, Posbility: 0.0001
Next Token : substring, Posbility: 0.0001
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  4, Posbility: 0.0000
Next Token :  , Posbility: 0.0010
Next Token :  1, Posbility: 0.0229
Next Token :  0, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0001
Next Token :  0, Posbility: 0.0002
Next Token :  10, Posbility: 0.0003
Next Token :  1, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 0.0002
Next Token : 7, Posbility: 0.0002
Next Token : 9, Posbility: 0.0004
Next Token : 8, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  &&, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ||, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token :  None, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0003
Next Token : 
, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : (), Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token : helper, Posbility: 0.0025
Next Token : return, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  find, Posbility: 0.0009
Next Token :  None, Posbility: 0.0019
Next Token :  Some, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : if, Posbility: 0.0002
Next Token : return, Posbility: 0.0005
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  String, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0002
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : drop, Posbility: 0.0000
Next Token : slice, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :  4, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  string, Posbility: 0.0000
Next Token :  1), Posbility: 0.0000
Next Token : String, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 7, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )), Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : );, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  else, Posbility: 0.0004
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0010
Next Token :    , Posbility: 0.0017
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : elif, Posbility: 0.0001
Next Token : //, Posbility: 0.0003
Next Token : let, Posbility: 0.0006
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0013
Next Token :  fail, Posbility: 0.0014
Next Token :  {, Posbility: 0.0050
Next Token : 
, Posbility: 0.0255
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0013
Next Token : helper, Posbility: 0.0270
Next Token : let, Posbility: 0.0270
Next Token : return, Posbility: 0.0444
Next Token : if, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0002
Next Token :  string, Posbility: 0.0003
Next Token :  not, Posbility: 0.0008
Next Token :  String, Posbility: 0.0097
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0003
Next Token : let, Posbility: 0.0004
Next Token : Char, Posbility: 0.0010
Next Token : (, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0001
Next Token : [0], Posbility: 0.0001
Next Token :  ==, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  "", Posbility: 0.0004
Next Token :  , Posbility: 0.0015
Next Token :  String, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : slice, Posbility: 0.0000
Next Token : take, Posbility: 0.0000
Next Token : substr, Posbility: 0.0001
Next Token : substring, Posbility: 0.0001
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  4, Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token :  1, Posbility: 0.0140
Next Token :  0, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  12, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  10, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 16, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 7, Posbility: 0.0000
Next Token : 8, Posbility: 0.0001
Next Token : 9, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Then, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  else, Posbility: 0.0003
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0002
Next Token :  Some, Posbility: 0.0003
Next Token :  find, Posbility: 0.0004
Next Token : 
, Posbility: 0.0046
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token : (), Posbility: 0.0002
Next Token : let, Posbility: 0.0002
Next Token : helper, Posbility: 0.0059
Next Token : return, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  Some, Posbility: 0.0022
Next Token :  find, Posbility: 0.0022
Next Token :  None, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token : return, Posbility: 0.0007
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  String, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : s, Posbility: 0.0002
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : helper, Posbility: 0.0001
Next Token : s, Posbility: 0.0003
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : drop, Posbility: 0.0000
Next Token : slice, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  4, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  10, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  10), Posbility: 0.0000
Next Token :  1), Posbility: 0.0000
Next Token : String, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 9, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : +1), Posbility: 0.0000
Next Token : );, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  else, Posbility: 0.0004
Next Token : 

, Posbility: 0.0036
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0022
Next Token :    , Posbility: 0.0025
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : //, Posbility: 0.0007
Next Token : let, Posbility: 0.0013
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: noerr
---------------------------
Next Token :  None, Posbility: 0.0012
Next Token :  match, Posbility: 0.0034
Next Token :  {, Posbility: 0.0072
Next Token : 
, Posbility: 0.0364
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0020
Next Token : let, Posbility: 0.0405
Next Token : return, Posbility: 0.0669
Next Token : helper, Posbility: 0.0669
Next Token : if, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: noerr
---------------------------
Next Token :  !, Posbility: 0.0012
Next Token :  string, Posbility: 0.0016
Next Token :  not, Posbility: 0.0038
Next Token :  String, Posbility: 0.0466
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0015
Next Token : let, Posbility: 0.0017
Next Token : (, Posbility: 0.0040
Next Token : Char, Posbility: 0.0052
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: noerr
---------------------------
Next Token :  ==, Posbility: 0.0003
Next Token : ., Posbility: 0.0008
Next Token : [0], Posbility: 0.0008
Next Token :  , Posbility: 0.0025
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: noerr
---------------------------
Next Token :  "", Posbility: 0.0006
Next Token : 
, Posbility: 0.0008
Next Token :  ", Posbility: 0.0008
Next Token :  , Posbility: 0.0032
Next Token :  String, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.
 score:False
Error type: noerr
---------------------------
Next Token : slice, Posbility: 0.0001
Next Token : tail, Posbility: 0.0001
Next Token : substring, Posbility: 0.0004
Next Token : substr, Posbility: 0.0006
Next Token : sub, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s
 score:False
Error type: noerr
---------------------------
Next Token :  100, Posbility: 0.0003
Next Token :  , Posbility: 0.0059
Next Token :  10, Posbility: 0.0059
Next Token :  1, Posbility: 0.1177
Next Token :  0, Posbility: 0.8672
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0
 score:False
Error type: noerr
---------------------------
Next Token :  A, Posbility: 0.0008
Next Token :  0, Posbility: 0.0015
Next Token :  , Posbility: 0.0024
Next Token :  a, Posbility: 0.0075
Next Token :  10, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  &&, Posbility: 0.0002
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then
 score:False
Error type: noerr
---------------------------
Next Token :  None, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : helper, Posbility: 0.0019
Next Token : return, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  find, Posbility: 0.0008
Next Token :  Some, Posbility: 0.0017
Next Token :  None, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token : return, Posbility: 0.0004
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  String, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token :  String, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.
 score:False
Error type: noerr
---------------------------
Next Token : drop, Posbility: 0.0000
Next Token : slice, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s
 score:False
Error type: noerr
---------------------------
Next Token :  4, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  10, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : String, Posbility: 0.0000
Next Token :  10), Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.
 score:False
Error type: noerr
---------------------------
Next Token : size, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length 
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : );, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  else, Posbility: 0.0004
Next Token : 

, Posbility: 0.0032
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :    , Posbility: 0.0019
Next Token :   , Posbility: 0.0019
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: noerr
---------------------------
Next Token : elif, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : //, Posbility: 0.0006
Next Token : let, Posbility: 0.0010
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: noerr
---------------------------
Next Token :  fail, Posbility: 0.0013
Next Token :  match, Posbility: 0.0014
Next Token :  {, Posbility: 0.0057
Next Token : 
, Posbility: 0.0288
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: noerr
---------------------------
Next Token : begin, Posbility: 0.0028
Next Token : helper, Posbility: 0.0339
Next Token : let, Posbility: 0.0339
Next Token : return, Posbility: 0.0435
Next Token : if, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: noerr
---------------------------
Next Token :  !, Posbility: 0.0004
Next Token :  string, Posbility: 0.0006
Next Token :  not, Posbility: 0.0011
Next Token :  String, Posbility: 0.0159
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0005
Next Token : let, Posbility: 0.0007
Next Token : Char, Posbility: 0.0019
Next Token : (, Posbility: 0.0028
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: noerr
---------------------------
Next Token :  ==, Posbility: 0.0002
Next Token : ., Posbility: 0.0003
Next Token : [0], Posbility: 0.0003
Next Token :  , Posbility: 0.0019
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token :  "", Posbility: 0.0005
Next Token :  ", Posbility: 0.0006
Next Token :  , Posbility: 0.0019
Next Token :  String, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : take, Posbility: 0.0000
Next Token : substr, Posbility: 0.0002
Next Token : substring, Posbility: 0.0003
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub 
 score:False
Error type: noerr
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s
 score:False
Error type: noerr
---------------------------
Next Token :  11, Posbility: 0.0003
Next Token :  10, Posbility: 0.0009
Next Token :  , Posbility: 0.0015
Next Token :  1, Posbility: 0.0292
Next Token :  0, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0
 score:False
Error type: noerr
---------------------------
Next Token :  12, Posbility: 0.0005
Next Token :  , Posbility: 0.0008
Next Token :  20, Posbility: 0.0009
Next Token :  10, Posbility: 0.0019
Next Token :  11, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then
 score:False
Error type: noerr
---------------------------
Next Token :  find, Posbility: 0.0001
Next Token :  None, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0003
Next Token : 
, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : helper, Posbility: 0.0025
Next Token : return, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  find, Posbility: 0.0004
Next Token :  None, Posbility: 0.0010
Next Token :  Some, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : return, Posbility: 0.0003
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  String, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.
 score:False
Error type: noerr
---------------------------
Next Token : add, Posbility: 0.0000
Next Token : slice, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s
 score:False
Error type: noerr
---------------------------
Next Token :  4, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : String, Posbility: 0.0000
Next Token :  10), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.
 score:False
Error type: noerr
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  else, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :    , Posbility: 0.0006
Next Token :   , Posbility: 0.0009
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : elif, Posbility: 0.0001
Next Token : //, Posbility: 0.0003
Next Token : let, Posbility: 0.0003
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: noerr
---------------------------
Next Token :  None, Posbility: 0.0006
Next Token :  fail, Posbility: 0.0007
Next Token :  {, Posbility: 0.0027
Next Token : 
, Posbility: 0.0123
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0011
Next Token : let, Posbility: 0.0082
Next Token : helper, Posbility: 0.0135
Next Token : return, Posbility: 0.0223
Next Token : if, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  string, Posbility: 0.0002
Next Token :  not, Posbility: 0.0003
Next Token :  String, Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: noerr
---------------------------
Next Token : Character, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : Char, Posbility: 0.0003
Next Token : (, Posbility: 0.0009
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: noerr
---------------------------
Next Token : [0], Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  ==, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  "", Posbility: 0.0002
Next Token :  ", Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.
 score:False
Error type: noerr
---------------------------
Next Token : slice, Posbility: 0.0000
Next Token : take, Posbility: 0.0000
Next Token : substr, Posbility: 0.0001
Next Token : substring, Posbility: 0.0001
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub 
 score:False
Error type: noerr
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s
 score:False
Error type: noerr
---------------------------
Next Token :  11, Posbility: 0.0001
Next Token :  10, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  1, Posbility: 0.0052
Next Token :  0, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 0.0001
Next Token :  20, Posbility: 0.0002
Next Token :  11, Posbility: 0.0005
Next Token :  12, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12
 score:False
Error type: noerr
---------------------------
Next Token : then, Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then
 score:False
Error type: noerr
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then 
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : helper, Posbility: 0.0012
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  find, Posbility: 0.0002
Next Token :  None, Posbility: 0.0006
Next Token :  Some, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : return, Posbility: 0.0001
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.
 score:False
Error type: noerr
---------------------------
Next Token :  sub, Posbility: 0.0000
Next Token : slice, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s
 score:False
Error type: noerr
---------------------------
Next Token :  10, Posbility: 0.0000
Next Token :  4, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  12, Posbility: 0.0000
Next Token : String, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.
 score:False
Error type: noerr
---------------------------
Next Token : substring, Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s
 score:False
Error type: noerr
---------------------------
Next Token : )), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  else, Posbility: 0.0002
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :    , Posbility: 0.0008
Next Token :   , Posbility: 0.0010
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : //, Posbility: 0.0002
Next Token : let, Posbility: 0.0003
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: noerr
---------------------------
Next Token :  None, Posbility: 0.0005
Next Token :  fail, Posbility: 0.0010
Next Token :  {, Posbility: 0.0027
Next Token : 
, Posbility: 0.0109
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0011
Next Token : let, Posbility: 0.0083
Next Token : helper, Posbility: 0.0107
Next Token : return, Posbility: 0.0137
Next Token : if, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  string, Posbility: 0.0001
Next Token :  not, Posbility: 0.0001
Next Token :  String, Posbility: 0.0028
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : Char, Posbility: 0.0002
Next Token : (, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  ==, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  "", Posbility: 0.0002
Next Token :  ", Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.
 score:False
Error type: noerr
---------------------------
Next Token : add, Posbility: 0.0000
Next Token : slice, Posbility: 0.0000
Next Token : substr, Posbility: 0.0001
Next Token : substring, Posbility: 0.0001
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s
 score:False
Error type: noerr
---------------------------
Next Token :  10, Posbility: 0.0001
Next Token :  13, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  1, Posbility: 0.0046
Next Token :  0, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  11, Posbility: 0.0001
Next Token :  12, Posbility: 0.0001
Next Token :  14, Posbility: 0.0001
Next Token :  13, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then
 score:False
Error type: noerr
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token :  find, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then 
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : helper, Posbility: 0.0008
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  find, Posbility: 0.0001
Next Token :  None, Posbility: 0.0002
Next Token :  Some, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : return, Posbility: 0.0001
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.
 score:False
Error type: noerr
---------------------------
Next Token :  sub, Posbility: 0.0000
Next Token : slice, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub 
 score:False
Error type: noerr
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s
 score:False
Error type: noerr
---------------------------
Next Token :  10, Posbility: 0.0000
Next Token :  4, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1
 score:False
Error type: noerr
---------------------------
Next Token :  STRING, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : String, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String
 score:False
Error type: noerr
---------------------------
Next Token : ()., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.
 score:False
Error type: noerr
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  else, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)

 score:False
Error type: noerr
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0003
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: noerr
---------------------------
Next Token : elif, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: noerr
---------------------------
Next Token :  fail, Posbility: 0.0003
Next Token :  None, Posbility: 0.0004
Next Token :  {, Posbility: 0.0010
Next Token : 
, Posbility: 0.0046
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0006
Next Token : let, Posbility: 0.0028
Next Token : helper, Posbility: 0.0040
Next Token : return, Posbility: 0.0075
Next Token : if, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  string, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  String, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: noerr
---------------------------
Next Token :  !=, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  ==, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 0.0001
Next Token :  "", Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.
 score:False
Error type: noerr
---------------------------
Next Token : take, Posbility: 0.0000
Next Token : slice, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub 
 score:False
Error type: noerr
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s
 score:False
Error type: noerr
---------------------------
Next Token :  13, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 0.0009
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0
 score:False
Error type: noerr
---------------------------
Next Token :  10, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  15, Posbility: 0.0000
Next Token :  13, Posbility: 0.0001
Next Token :  14, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14
 score:False
Error type: noerr
---------------------------
Next Token :  else, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then
 score:False
Error type: noerr
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token :  find, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then 
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : helper, Posbility: 0.0005
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  find, Posbility: 0.0000
Next Token :  None, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper
 score:False
Error type: noerr
---------------------------
Next Token :  String, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.
 score:False
Error type: noerr
---------------------------
Next Token : add, Posbility: 0.0000
Next Token :  sub, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub
 score:False
Error type: noerr
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  4, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  string, Posbility: 0.0000
Next Token : String, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.
 score:False
Error type: noerr
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token : 长度, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  else, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)

 score:False
Error type: noerr
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :    , Posbility: 0.0004
Next Token :   , Posbility: 0.0005
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: noerr
---------------------------
Next Token :  fail, Posbility: 0.0004
Next Token :  None, Posbility: 0.0005
Next Token :  {, Posbility: 0.0009
Next Token : 
, Posbility: 0.0046
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0009
Next Token : helper, Posbility: 0.0031
Next Token : let, Posbility: 0.0035
Next Token : return, Posbility: 0.0085
Next Token : if, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  string, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  String, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: noerr
---------------------------
Next Token :  !=, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  ==, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  "", Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.
 score:False
Error type: noerr
---------------------------
Next Token : add, Posbility: 0.0000
Next Token : slice, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub 
 score:False
Error type: noerr
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s
 score:False
Error type: noerr
---------------------------
Next Token :  13, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 0.0006
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0
 score:False
Error type: noerr
---------------------------
Next Token : 15, Posbility: 0.0000
Next Token :  17, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  14, Posbility: 0.0001
Next Token :  15, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  else, Posbility: 0.0004
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then
 score:False
Error type: noerr
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then 
 score:False
Error type: noerr
---------------------------
Next Token : raise, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : helper, Posbility: 0.0013
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  find, Posbility: 0.0001
Next Token :  None, Posbility: 0.0003
Next Token :  Some, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : return, Posbility: 0.0001
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.
 score:False
Error type: noerr
---------------------------
Next Token : slice, Posbility: 0.0000
Next Token :  sub, Posbility: 0.0000
Next Token : substring, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub 
 score:False
Error type: noerr
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  4, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1
 score:False
Error type: noerr
---------------------------
Next Token :  string, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : String, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String.
 score:False
Error type: noerr
---------------------------
Next Token : 长度, Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String.length
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String.length 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String.length s
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : );, Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String.length s)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  else, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String.length s)

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :    , Posbility: 0.0013
Next Token :   , Posbility: 0.0017
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String.length s)
    
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : //, Posbility: 0.0002
Next Token : let, Posbility: 0.0003
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String.length s)
    else
 score:False
Error type: noerr
---------------------------
Next Token :  None, Posbility: 0.0010
Next Token :  fail, Posbility: 0.0017
Next Token :  {, Posbility: 0.0017
Next Token : 
, Posbility: 0.0096
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String.length s)
    else 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0023
Next Token : let, Posbility: 0.0133
Next Token : helper, Posbility: 0.0171
Next Token : return, Posbility: 0.0281
Next Token : if, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String.length s)
    else if
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  string, Posbility: 0.0001
Next Token :  not, Posbility: 0.0001
Next Token :  String, Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String.length s)
    else if 
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : Char, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String.length s)
    else if s
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  ==, Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String.length s)
    else if s =
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 0.0001
Next Token :  "", Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s = 0 then return None
    else if String.length s = 1 then return Some s
    else if s = String.sub s 0 1 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 2 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 3 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 4 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 5 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 6 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 7 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 8 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 9 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 10 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 11 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 12 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 13 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 14 then return helper (String.sub s 1 String.length s)
    else if s = String.sub s 0 15 then return helper (String.sub s 1 String.length s)
    else if s = String
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>