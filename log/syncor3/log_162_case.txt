code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0031
Next Token :  round, Posbility: 0.0107
Next Token :  find, Posbility: 0.0177
Next Token :  , Posbility: 0.2451
Next Token :  rec, Posbility: 0.6641
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  round, Posbility: 0.0128
Next Token :  rec, Posbility: 0.0211
Next Token :  loop, Posbility: 0.0271
Next Token :  find, Posbility: 0.1377
Next Token :  , Posbility: 0.6172
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : floor, Posbility: 0.0391
Next Token : divide, Posbility: 0.1206
Next Token : q, Posbility: 0.1367
Next Token : quot, Posbility: 0.1748
Next Token : div, Posbility: 0.1982
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0386
Next Token :  =, Posbility: 0.0815
Next Token : mod, Posbility: 0.1187
Next Token : _, Posbility: 0.2520
Next Token :  , Posbility: 0.2852
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0304
Next Token : :, Posbility: 0.0500
Next Token : (, Posbility: 0.1201
Next Token : n, Posbility: 0.2891
Next Token : x, Posbility: 0.4199
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0035
Next Token : _, Posbility: 0.0040
Next Token : 1, Posbility: 0.0045
Next Token :  =, Posbility: 0.0058
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0015
Next Token : n, Posbility: 0.0017
Next Token : x, Posbility: 0.0022
Next Token : d, Posbility: 0.0066
Next Token : y, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0011
Next Token :   , Posbility: 0.0021
Next Token : 
, Posbility: 0.0030
Next Token :  , Posbility: 0.0288
Next Token :  =, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0019
Next Token :  {, Posbility: 0.0045
Next Token :  match, Posbility: 0.0297
Next Token :  , Posbility: 0.0913
Next Token : 
, Posbility: 0.8672
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0035
Next Token :    , Posbility: 0.0094
Next Token : 	, Posbility: 0.0094
Next Token :     , Posbility: 0.1147
Next Token :   , Posbility: 0.8477
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0054
Next Token : (, Posbility: 0.0146
Next Token : let, Posbility: 0.0840
Next Token : match, Posbility: 0.3320
Next Token : if, Posbility: 0.5469
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0010
Next Token :   , Posbility: 0.0019
Next Token :  int, Posbility: 0.0035
Next Token :  not, Posbility: 0.0051
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0006
Next Token : Int, Posbility: 0.0044
Next Token : (, Posbility: 0.0884
Next Token : x, Posbility: 0.2402
Next Token : y, Posbility: 0.6523
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  >=, Posbility: 0.0034
Next Token :  <=, Posbility: 0.0117
Next Token :  ==, Posbility: 0.0674
Next Token :  , Posbility: 0.0864
Next Token :  =, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : 0, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  1, Posbility: 0.0009
Next Token :  0, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0034
Next Token :  , Posbility: 0.0063
Next Token :  ||, Posbility: 0.0072
Next Token : 
, Posbility: 0.0364
Next Token :  then, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fail, Posbility: 0.0112
Next Token :  error, Posbility: 0.0126
Next Token :  0, Posbility: 0.0566
Next Token : 
, Posbility: 0.3262
Next Token :  , Posbility: 0.5352
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : panic, Posbility: 0.0293
Next Token : (, Posbility: 0.0425
Next Token : assert, Posbility: 0.0620
Next Token : x, Posbility: 0.2773
Next Token : raise, Posbility: 0.4043
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0182
Next Token : _, Posbility: 0.0206
Next Token :  ", Posbility: 0.0815
Next Token :  Not, Posbility: 0.1523
Next Token :  , Posbility: 0.6836
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise 
 score:False
Error type: noerr
---------------------------
Next Token : Zero, Posbility: 0.0277
Next Token : Invalid, Posbility: 0.0315
Next Token : Divide, Posbility: 0.0518
Next Token : <, Posbility: 0.0588
Next Token : (, Posbility: 0.6328
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Zero, Posbility: 0.0508
Next Token : System, Posbility: 0.0576
Next Token : Exception, Posbility: 0.0649
Next Token : A, Posbility: 0.0835
Next Token : Div, Posbility: 0.0947
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (Div
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : er, Posbility: 0.0236
Next Token : 0, Posbility: 0.0723
Next Token : Zero, Posbility: 0.1738
Next Token : _, Posbility: 0.2871
Next Token : By, Posbility: 0.3242
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivBy
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : One, Posbility: 0.0003
Next Token : zero, Posbility: 0.0005
Next Token : _, Posbility: 0.0012
Next Token : 0, Posbility: 0.0052
Next Token : Zero, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZero
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0187
Next Token : Error, Posbility: 0.0576
Next Token :  , Posbility: 0.1387
Next Token : ), Posbility: 0.3320
Next Token : Exception, Posbility: 0.3770
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0148
Next Token : ., Posbility: 0.1406
Next Token :  ", Posbility: 0.1592
Next Token : ), Posbility: 0.2324
Next Token :  , Posbility: 0.3828
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ());, Posbility: 0.0193
Next Token : :, Posbility: 0.0219
Next Token : (, Posbility: 0.0281
Next Token : x, Posbility: 0.2676
Next Token : ()), Posbility: 0.5664
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0047
Next Token :  --, Posbility: 0.0054
Next Token :  , Posbility: 0.0188
Next Token :  else, Posbility: 0.1572
Next Token : 
, Posbility: 0.7969
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0005
Next Token :       , Posbility: 0.0007
Next Token :     , Posbility: 0.0036
Next Token :  , Posbility: 0.0046
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0024
Next Token : elif, Posbility: 0.0024
Next Token : if, Posbility: 0.0073
Next Token : then, Posbility: 0.0226
Next Token : else, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0026
Next Token :   , Posbility: 0.0030
Next Token :  {, Posbility: 0.0248
Next Token : 
, Posbility: 0.2344
Next Token :  , Posbility: 0.7227
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0127
Next Token : let, Posbility: 0.0238
Next Token : (, Posbility: 0.0732
Next Token : x, Posbility: 0.1553
Next Token : if, Posbility: 0.6953
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0012
Next Token :  ((, Posbility: 0.0013
Next Token :  not, Posbility: 0.0019
Next Token :  int, Posbility: 0.0045
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : abs, Posbility: 0.0049
Next Token : Int, Posbility: 0.0081
Next Token : (, Posbility: 0.0410
Next Token : y, Posbility: 0.1113
Next Token : x, Posbility: 0.8242
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  %, Posbility: 0.0104
Next Token :  <=, Posbility: 0.0281
Next Token :  =, Posbility: 0.1621
Next Token :  >=, Posbility: 0.2080
Next Token :  , Posbility: 0.5664
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ≥, Posbility: 0.0012
Next Token : div, Posbility: 0.0032
Next Token : /, Posbility: 0.0098
Next Token : >, Posbility: 0.1973
Next Token : <, Posbility: 0.7812
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0009
Next Token :   , Posbility: 0.0013
Next Token : >, Posbility: 0.2715
Next Token :  0, Posbility: 0.2715
Next Token :  , Posbility: 0.4492
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0007
Next Token : abs, Posbility: 0.0007
Next Token : (, Posbility: 0.0017
Next Token : -, Posbility: 0.0041
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ||, Posbility: 0.0012
Next Token :  , Posbility: 0.0013
Next Token :   , Posbility: 0.0040
Next Token : 
, Posbility: 0.0040
Next Token :  then, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0106
Next Token :  -1, Posbility: 0.0120
Next Token :  0, Posbility: 0.0610
Next Token : 
, Posbility: 0.1465
Next Token :  , Posbility: 0.7422
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0537
Next Token : raise, Posbility: 0.0688
Next Token : div, Posbility: 0.1001
Next Token : (, Posbility: 0.1455
Next Token : x, Posbility: 0.5078
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x
 score:False
Error type: noerr
---------------------------
Next Token : /, Posbility: 0.0112
Next Token :  +, Posbility: 0.0210
Next Token : 
, Posbility: 0.1982
Next Token :  else, Posbility: 0.3711
Next Token :  , Posbility: 0.3711
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0139
Next Token : ::, Posbility: 0.0378
Next Token : div, Posbility: 0.1030
Next Token : -, Posbility: 0.1924
Next Token : /, Posbility: 0.5938
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0004
Next Token : :, Posbility: 0.0016
Next Token : ., Posbility: 0.0021
Next Token : =, Posbility: 0.0327
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : floor, Posbility: 0.0009
Next Token : div, Posbility: 0.0024
Next Token : (, Posbility: 0.0178
Next Token : y, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0069
Next Token :  |, Posbility: 0.0166
Next Token :  , Posbility: 0.1787
Next Token : 
, Posbility: 0.2949
Next Token :  else, Posbility: 0.4844
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0027
Next Token :  0, Posbility: 0.0064
Next Token :  ((, Posbility: 0.0082
Next Token : 
, Posbility: 0.0198
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0139
Next Token : div, Posbility: 0.1025
Next Token : x, Posbility: 0.1689
Next Token : y, Posbility: 0.2178
Next Token : (, Posbility: 0.4609
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y else (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : let, Posbility: 0.0045
Next Token :  , Posbility: 0.0332
Next Token : div, Posbility: 0.0703
Next Token : y, Posbility: 0.2773
Next Token : x, Posbility: 0.5898
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y else (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0029
Next Token :  %, Posbility: 0.0048
Next Token : -, Posbility: 0.0101
Next Token :  +, Posbility: 0.0583
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y else (x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0009
Next Token : div, Posbility: 0.0014
Next Token : −, Posbility: 0.0020
Next Token : /, Posbility: 0.0947
Next Token : -, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y else (x -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0010
Next Token :  1, Posbility: 0.0017
Next Token :  ((, Posbility: 0.0017
Next Token :  1), Posbility: 0.0067
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y else (x - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0021
Next Token : floor, Posbility: 0.0021
Next Token : x, Posbility: 0.0157
Next Token : (, Posbility: 0.1162
Next Token : y, Posbility: 0.8594
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y else (x - y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : +1), Posbility: 0.0016
Next Token :  *, Posbility: 0.0090
Next Token :  , Posbility: 0.0116
Next Token :  +, Posbility: 0.1602
Next Token : ), Posbility: 0.8125
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y else (x - y)
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 0.0013
Next Token : /, Posbility: 0.0022
Next Token :  *, Posbility: 0.0041
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y else (x - y) 
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0005
Next Token : ::, Posbility: 0.0010
Next Token : //, Posbility: 0.0028
Next Token : div, Posbility: 0.0123
Next Token : /, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y else (x - y) /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token :  ((, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y else (x - y) / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : abs, Posbility: 0.0001
Next Token : div, Posbility: 0.0009
Next Token : (, Posbility: 0.0179
Next Token : y, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y else (x - y) / y
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0041
Next Token :  , Posbility: 0.0206
Next Token : ;, Posbility: 0.0299
Next Token : 
, Posbility: 0.2500
Next Token : 

, Posbility: 0.6836
---------------------------
code:
 (* Write a  function to find quotient of two numbers (rounded down to the nearest integer). *)
let rec div x y =
  if y = 0 then raise (DivByZeroException ())
  else if x < y then x / y else (x - y) / y


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :25.983299255371094

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>