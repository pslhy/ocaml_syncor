code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  less, Posbility: 0.0111
Next Token :  check, Posbility: 0.1055
Next Token :  is, Posbility: 0.1357
Next Token :  , Posbility: 0.2236
Next Token :  rec, Posbility: 0.3672
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0408
Next Token :  count, Posbility: 0.0674
Next Token :  check, Posbility: 0.1108
Next Token :  is, Posbility: 0.1426
Next Token :  , Posbility: 0.3867
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0518
Next Token : frequency, Posbility: 0.0586
Next Token : digit, Posbility: 0.0854
Next Token : f, Posbility: 0.1240
Next Token : freq, Posbility: 0.2051
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : check, Posbility: 0.0247
Next Token : s, Posbility: 0.0591
Next Token :  =, Posbility: 0.0977
Next Token :  , Posbility: 0.1104
Next Token : _, Posbility: 0.5625
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digits, Posbility: 0.0457
Next Token : checker, Posbility: 0.0664
Next Token : digit, Posbility: 0.0664
Next Token : of, Posbility: 0.1592
Next Token : check, Posbility: 0.2969
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0291
Next Token :  i, Posbility: 0.0479
Next Token : _, Posbility: 0.0894
Next Token :  =, Posbility: 0.0894
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : freq, Posbility: 0.0398
Next Token : (, Posbility: 0.0659
Next Token : f, Posbility: 0.0659
Next Token : x, Posbility: 0.1230
Next Token : n, Posbility: 0.4863
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0110
Next Token :  acc, Posbility: 0.0383
Next Token :  i, Posbility: 0.0493
Next Token :  , Posbility: 0.1514
Next Token :  =, Posbility: 0.6797
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0040
Next Token :  function, Posbility: 0.0179
Next Token :  match, Posbility: 0.0295
Next Token :  , Posbility: 0.0708
Next Token : 
, Posbility: 0.8633
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0056
Next Token :    , Posbility: 0.0118
Next Token : 	, Posbility: 0.0118
Next Token :     , Posbility: 0.1270
Next Token :   , Posbility: 0.8242
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0108
Next Token : (, Posbility: 0.0157
Next Token : let, Posbility: 0.2168
Next Token : match, Posbility: 0.2451
Next Token : if, Posbility: 0.4590
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  O, Posbility: 0.0043
Next Token :  int, Posbility: 0.0049
Next Token :  not, Posbility: 0.0055
Next Token :  String, Posbility: 0.0170
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0056
Next Token : Char, Posbility: 0.0105
Next Token : Int, Posbility: 0.0776
Next Token : (, Posbility: 0.1133
Next Token : n, Posbility: 0.7383
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  >=, Posbility: 0.0183
Next Token :  ==, Posbility: 0.0386
Next Token :  <=, Posbility: 0.0820
Next Token :  , Posbility: 0.3672
Next Token :  =, Posbility: 0.4707
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0009
Next Token : 0, Posbility: 0.0024
Next Token :  , Posbility: 0.0066
Next Token :  1, Posbility: 0.0066
Next Token :  0, Posbility: 0.9805
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0023
Next Token :  , Posbility: 0.0063
Next Token :  ||, Posbility: 0.0171
Next Token : 
, Posbility: 0.0361
Next Token :  then, Posbility: 0.9336
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0422
Next Token :  false, Posbility: 0.0422
Next Token :  , Posbility: 0.1895
Next Token :  true, Posbility: 0.3125
Next Token : 
, Posbility: 0.3125
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0052
Next Token :       , Posbility: 0.0086
Next Token :   , Posbility: 0.0161
Next Token :    , Posbility: 0.0923
Next Token :     , Posbility: 0.8750
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0554
Next Token : (, Posbility: 0.0713
Next Token : [], Posbility: 0.0806
Next Token : 0, Posbility: 0.1035
Next Token : return, Posbility: 0.1934
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0227
Next Token :  True, Posbility: 0.0618
Next Token :  , Posbility: 0.1680
Next Token :  false, Posbility: 0.1680
Next Token :  true, Posbility: 0.4551
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
 score:False
Error type: noerr
---------------------------
Next Token :  else, Posbility: 0.0037
Next Token :   , Posbility: 0.0042
Next Token :  , Posbility: 0.0148
Next Token : ;, Posbility: 0.0457
Next Token : 
, Posbility: 0.9141
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0002
Next Token :    , Posbility: 0.0003
Next Token :  , Posbility: 0.0025
Next Token :     , Posbility: 0.0041
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  
 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0008
Next Token : let, Posbility: 0.0012
Next Token : els, Posbility: 0.0017
Next Token : elif, Posbility: 0.0052
Next Token : else, Posbility: 0.9883
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0021
Next Token :   , Posbility: 0.0031
Next Token :  {, Posbility: 0.0057
Next Token :  , Posbility: 0.4004
Next Token : 
, Posbility: 0.5820
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0002
Next Token :       , Posbility: 0.0013
Next Token :    , Posbility: 0.0083
Next Token :   , Posbility: 0.0291
Next Token :     , Posbility: 0.9609
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0292
Next Token : match, Posbility: 0.0292
Next Token : if, Posbility: 0.1680
Next Token : return, Posbility: 0.2158
Next Token : let, Posbility: 0.5156
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0186
Next Token :  next, Posbility: 0.0210
Next Token :  i, Posbility: 0.0238
Next Token :  rec, Posbility: 0.0942
Next Token :  , Posbility: 0.5430
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rem, Posbility: 0.0591
Next Token : f, Posbility: 0.0757
Next Token : digit, Posbility: 0.1104
Next Token : d, Posbility: 0.1611
Next Token : n, Posbility: 0.1826
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0608
Next Token : ', Posbility: 0.1455
Next Token : _, Posbility: 0.1650
Next Token : 1, Posbility: 0.1865
Next Token :  =, Posbility: 0.3086
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Integer, Posbility: 0.0023
Next Token :  mod, Posbility: 0.0023
Next Token :  int, Posbility: 0.0082
Next Token :  String, Posbility: 0.0222
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Div, Posbility: 0.0094
Next Token : rem, Posbility: 0.0156
Next Token : Int, Posbility: 0.0291
Next Token : (, Posbility: 0.0422
Next Token : n, Posbility: 0.8477
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  mod, Posbility: 0.0220
Next Token :  *, Posbility: 0.0249
Next Token :  in, Posbility: 0.0320
Next Token :  %, Posbility: 0.2363
Next Token :  , Posbility: 0.6406
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0031
Next Token : //, Posbility: 0.0261
Next Token : div, Posbility: 0.0430
Next Token : -, Posbility: 0.3184
Next Token : /, Posbility: 0.5938
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  100, Posbility: 0.0103
Next Token :  10;, Posbility: 0.0132
Next Token :  , Posbility: 0.0170
Next Token :  10,, Posbility: 0.0219
Next Token :  10, Posbility: 0.9297
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0027
Next Token :   , Posbility: 0.0034
Next Token :  , Posbility: 0.0039
Next Token : 
, Posbility: 0.0154
Next Token :  in, Posbility: 0.9570
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0003
Next Token : 

, Posbility: 0.0019
Next Token :   , Posbility: 0.0022
Next Token :  , Posbility: 0.0085
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0008
Next Token :         , Posbility: 0.0009
Next Token :       , Posbility: 0.0045
Next Token :    , Posbility: 0.0096
Next Token :     , Posbility: 0.9844
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : freq, Posbility: 0.0359
Next Token : (, Posbility: 0.0459
Next Token : return, Posbility: 0.2061
Next Token : if, Posbility: 0.2334
Next Token : let, Posbility: 0.4355
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  check, Posbility: 0.0184
Next Token :  is, Posbility: 0.0237
Next Token :  res, Posbility: 0.0237
Next Token :  rec, Posbility: 0.1060
Next Token :  , Posbility: 0.6094
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : freq, Posbility: 0.0703
Next Token : d, Posbility: 0.0796
Next Token : f, Posbility: 0.1309
Next Token : digit, Posbility: 0.1484
Next Token : n, Posbility: 0.1689
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0206
Next Token : ', Posbility: 0.0342
Next Token : 1, Posbility: 0.0562
Next Token : _, Posbility: 0.1191
Next Token :  =, Posbility: 0.6836
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0063
Next Token :  mod, Posbility: 0.0063
Next Token :  10, Posbility: 0.0104
Next Token :  String, Posbility: 0.0172
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rem, Posbility: 0.0074
Next Token : if, Posbility: 0.0121
Next Token : Int, Posbility: 0.0156
Next Token : (, Posbility: 0.0698
Next Token : n, Posbility: 0.8516
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0378
Next Token :  *, Posbility: 0.1924
Next Token :  mod, Posbility: 0.2178
Next Token :  , Posbility: 0.2471
Next Token :  %, Posbility: 0.2793
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0005
Next Token : 10, Posbility: 0.0015
Next Token :  , Posbility: 0.0066
Next Token :  10;, Posbility: 0.0109
Next Token :  10, Posbility: 0.9805
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0019
Next Token :  =, Posbility: 0.0019
Next Token :  +, Posbility: 0.0031
Next Token :  as, Posbility: 0.0036
Next Token :  in, Posbility: 0.9844
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 0.0009
Next Token : 

, Posbility: 0.0028
Next Token :  , Posbility: 0.0052
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0006
Next Token :   , Posbility: 0.0007
Next Token :       , Posbility: 0.0024
Next Token :    , Posbility: 0.0203
Next Token :     , Posbility: 0.9766
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0344
Next Token : freq, Posbility: 0.1543
Next Token : return, Posbility: 0.1973
Next Token : if, Posbility: 0.2539
Next Token : let, Posbility: 0.3262
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0154
Next Token :  is, Posbility: 0.0255
Next Token :  res, Posbility: 0.0327
Next Token :  rec, Posbility: 0.1465
Next Token :  , Posbility: 0.6562
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0277
Next Token : x, Posbility: 0.0457
Next Token : f, Posbility: 0.0752
Next Token : freq, Posbility: 0.1094
Next Token : n, Posbility: 0.5547
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0055
Next Token : 1, Posbility: 0.0080
Next Token : ', Posbility: 0.0091
Next Token : _, Posbility: 0.0280
Next Token :  =, Posbility: 0.9258
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0038
Next Token : 
, Posbility: 0.0062
Next Token :  String, Posbility: 0.0062
Next Token :  10, Posbility: 0.0168
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0049
Next Token : if, Posbility: 0.0322
Next Token : (, Posbility: 0.0530
Next Token : freq, Posbility: 0.1445
Next Token : n, Posbility: 0.7305
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0327
Next Token :  %, Posbility: 0.0613
Next Token :  +, Posbility: 0.2422
Next Token :  , Posbility: 0.2754
Next Token :  *, Posbility: 0.2754
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0057
Next Token :  11, Posbility: 0.0057
Next Token :  100, Posbility: 0.0156
Next Token :  , Posbility: 0.1147
Next Token :  10, Posbility: 0.8477
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0006
Next Token :  |, Posbility: 0.0010
Next Token :  , Posbility: 0.0162
Next Token :  in, Posbility: 0.1973
Next Token :  +, Posbility: 0.7812
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0046
Next Token :  4, Posbility: 0.0046
Next Token :  10, Posbility: 0.0344
Next Token :  1, Posbility: 0.2539
Next Token :  , Posbility: 0.6914
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0069
Next Token : freq, Posbility: 0.0352
Next Token : (, Posbility: 0.0659
Next Token : 9, Posbility: 0.0659
Next Token : n, Posbility: 0.8008
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  %, Posbility: 0.0105
Next Token : ', Posbility: 0.0135
Next Token :  , Posbility: 0.0471
Next Token :  +, Posbility: 0.0535
Next Token :  in, Posbility: 0.8359
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 0.0012
Next Token : 

, Posbility: 0.0031
Next Token :  , Posbility: 0.0067
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0003
Next Token :       , Posbility: 0.0009
Next Token :   , Posbility: 0.0009
Next Token :    , Posbility: 0.0124
Next Token :     , Posbility: 0.9844
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0214
Next Token : if, Posbility: 0.0957
Next Token : return, Posbility: 0.1582
Next Token : let, Posbility: 0.2598
Next Token : freq, Posbility: 0.4297
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_
 score:False
Error type: noerr
---------------------------
Next Token : find, Posbility: 0.0000
Next Token : test, Posbility: 0.0000
Next Token : checker, Posbility: 0.0001
Next Token : count, Posbility: 0.0001
Next Token : check, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  ((, Posbility: 0.0024
Next Token :  ~, Posbility: 0.0031
Next Token : (, Posbility: 0.0139
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check 
 score:False
Error type: noerr
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : freq, Posbility: 0.0004
Next Token : (, Posbility: 0.0952
Next Token : n, Posbility: 0.9023
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0339
Next Token :  &&, Posbility: 0.0383
Next Token :  , Posbility: 0.0383
Next Token : 

, Posbility: 0.3633
Next Token : 
, Posbility: 0.4121
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n

 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0187
Next Token : let, Posbility: 0.0308
Next Token : 

, Posbility: 0.0693
Next Token :   , Posbility: 0.1475
Next Token : in, Posbility: 0.5469
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : ;, Posbility: 0.0001
Next Token :  , Posbility: 0.0067
Next Token : 

, Posbility: 0.1182
Next Token : 
, Posbility: 0.8711
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fun, Posbility: 0.0071
Next Token : freq, Posbility: 0.0206
Next Token : (, Posbility: 0.0383
Next Token :   , Posbility: 0.0493
Next Token : let, Posbility: 0.7734
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0104
Next Token :  check, Posbility: 0.0283
Next Token :  main, Posbility: 0.0986
Next Token :  , Posbility: 0.1436
Next Token :  rec, Posbility: 0.6445
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0425
Next Token :  is, Posbility: 0.0483
Next Token :  check, Posbility: 0.0620
Next Token :  count, Posbility: 0.0620
Next Token :  , Posbility: 0.4570
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digits, Posbility: 0.0211
Next Token : print, Posbility: 0.0239
Next Token : digit, Posbility: 0.0349
Next Token : f, Posbility: 0.0508
Next Token : freq, Posbility: 0.5469
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0011
Next Token :  =, Posbility: 0.0035
Next Token : s, Posbility: 0.0044
Next Token :  , Posbility: 0.0199
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0070
Next Token : checker, Posbility: 0.0103
Next Token : rec, Posbility: 0.0117
Next Token : count, Posbility: 0.0280
Next Token : check, Posbility: 0.8164
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0140
Next Token :  0, Posbility: 0.0179
Next Token : 2, Posbility: 0.0625
Next Token :  , Posbility: 0.0806
Next Token : _, Posbility: 0.7656
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0361
Next Token : digit, Posbility: 0.0408
Next Token : digits, Posbility: 0.0464
Next Token : helper, Posbility: 0.0525
Next Token : rec, Posbility: 0.1113
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0105
Next Token :  0, Posbility: 0.0222
Next Token :  =, Posbility: 0.0253
Next Token : urse, Posbility: 0.0605
Next Token :  , Posbility: 0.8359
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : freq, Posbility: 0.0031
Next Token : f, Posbility: 0.0035
Next Token : (, Posbility: 0.0051
Next Token : x, Posbility: 0.0065
Next Token : n, Posbility: 0.9648
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0037
Next Token :  acc, Posbility: 0.0101
Next Token :  i, Posbility: 0.0101
Next Token :  , Posbility: 0.0452
Next Token :  =, Posbility: 0.9062
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token : 

, Posbility: 0.0008
Next Token :  match, Posbility: 0.0009
Next Token :  , Posbility: 0.0228
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0015
Next Token :    , Posbility: 0.0017
Next Token : let, Posbility: 0.0031
Next Token :     , Posbility: 0.0157
Next Token :   , Posbility: 0.9727
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0045
Next Token : (, Posbility: 0.0075
Next Token : match, Posbility: 0.0075
Next Token : let, Posbility: 0.0913
Next Token : if, Posbility: 0.8633
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0004
Next Token :  String, Posbility: 0.0005
Next Token :  not, Posbility: 0.0017
Next Token :  !, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : frequency, Posbility: 0.0002
Next Token : Freq, Posbility: 0.0007
Next Token : (, Posbility: 0.0049
Next Token : freq, Posbility: 0.2656
Next Token : n, Posbility: 0.7266
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  >=, Posbility: 0.0009
Next Token :  ==, Posbility: 0.0039
Next Token :  <=, Posbility: 0.0064
Next Token :  , Posbility: 0.0289
Next Token :  =, Posbility: 0.9570
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token :  10, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  1, Posbility: 0.0025
Next Token :  0, Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0006
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 0.0017
Next Token :  ||, Posbility: 0.0046
Next Token :  then, Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  false, Posbility: 0.0003
Next Token :  true, Posbility: 0.0007
Next Token :  , Posbility: 0.0159
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0025
Next Token :    , Posbility: 0.0028
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0012
Next Token : (, Posbility: 0.0015
Next Token : let, Posbility: 0.0031
Next Token : freq, Posbility: 0.0031
Next Token : return, Posbility: 0.9844
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0009
Next Token : 
, Posbility: 0.0024
Next Token :  , Posbility: 0.0176
Next Token :  false, Posbility: 0.0176
Next Token :  true, Posbility: 0.9570
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token :  else, Posbility: 0.0001
Next Token : ;, Posbility: 0.0007
Next Token :  , Posbility: 0.0008
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  else, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : else, Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token : els, Posbility: 0.0002
Next Token : let, Posbility: 0.0006
Next Token : elif, Posbility: 0.0006
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : {, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  {, Posbility: 0.0044
Next Token :  , Posbility: 0.0532
Next Token : 
, Posbility: 0.9414
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0004
Next Token :    , Posbility: 0.0025
Next Token :   , Posbility: 0.0028
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0038
Next Token : match, Posbility: 0.0038
Next Token : if, Posbility: 0.0280
Next Token : freq, Posbility: 0.0280
Next Token : let, Posbility: 0.9258
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  check, Posbility: 0.0009
Next Token :  v, Posbility: 0.0013
Next Token :  i, Posbility: 0.0016
Next Token :  rec, Posbility: 0.0176
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0024
Next Token : f, Posbility: 0.0024
Next Token : digit, Posbility: 0.0024
Next Token : freq, Posbility: 0.0065
Next Token : n, Posbility: 0.9688
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0010
Next Token : ', Posbility: 0.0015
Next Token : _, Posbility: 0.0028
Next Token : 1, Posbility: 0.0031
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0001
Next Token :  0, Posbility: 0.0002
Next Token :  String, Posbility: 0.0002
Next Token :  10, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0002
Next Token : if, Posbility: 0.0004
Next Token : freq, Posbility: 0.0005
Next Token : (, Posbility: 0.0046
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : /, Posbility: 0.0004
Next Token :  +, Posbility: 0.0008
Next Token :  *, Posbility: 0.0010
Next Token :  %, Posbility: 0.0085
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : div, Posbility: 0.0001
Next Token : //, Posbility: 0.0009
Next Token : -, Posbility: 0.0025
Next Token : /, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 10, Posbility: 0.0003
Next Token :  100, Posbility: 0.0003
Next Token :  10,, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  10, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0004
Next Token :    , Posbility: 0.0022
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0021
Next Token : return, Posbility: 0.0056
Next Token : freq, Posbility: 0.0413
Next Token : if, Posbility: 0.1123
Next Token : let, Posbility: 0.8320
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0013
Next Token :  check, Posbility: 0.0017
Next Token :  res, Posbility: 0.0021
Next Token :  rec, Posbility: 0.0066
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0015
Next Token : x, Posbility: 0.0024
Next Token : f, Posbility: 0.0024
Next Token : freq, Posbility: 0.0108
Next Token : n, Posbility: 0.9688
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : ', Posbility: 0.0003
Next Token : 1, Posbility: 0.0006
Next Token : _, Posbility: 0.0010
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  0, Posbility: 0.0002
Next Token :  mod, Posbility: 0.0002
Next Token :  10, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 9, Posbility: 0.0001
Next Token : if, Posbility: 0.0006
Next Token : freq, Posbility: 0.0019
Next Token : (, Posbility: 0.0036
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0003
Next Token :  , Posbility: 0.0012
Next Token :  *, Posbility: 0.0015
Next Token :  mod, Posbility: 0.0075
Next Token :  %, Posbility: 0.9883
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0002
Next Token : 10, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token :  +, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : 

, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :    , Posbility: 0.0015
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0052
Next Token : return, Posbility: 0.0140
Next Token : if, Posbility: 0.1035
Next Token : freq, Posbility: 0.1035
Next Token : let, Posbility: 0.7617
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  new, Posbility: 0.0011
Next Token :  check, Posbility: 0.0015
Next Token :  res, Posbility: 0.0027
Next Token :  rec, Posbility: 0.0108
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0015
Next Token : x, Posbility: 0.0024
Next Token : f, Posbility: 0.0024
Next Token : freq, Posbility: 0.0107
Next Token : n, Posbility: 0.9688
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0005
Next Token : ', Posbility: 0.0007
Next Token : 1, Posbility: 0.0009
Next Token : _, Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token :  0, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  10, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Freq, Posbility: 0.0001
Next Token : if, Posbility: 0.0008
Next Token : freq, Posbility: 0.0031
Next Token : (, Posbility: 0.0059
Next Token : n, Posbility: 0.9883
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0003
Next Token :  %, Posbility: 0.0005
Next Token :  , Posbility: 0.0019
Next Token :  +, Posbility: 0.0097
Next Token :  *, Posbility: 0.9883
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 10, Posbility: 0.0001
Next Token :  10;, Posbility: 0.0001
Next Token :  100, Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  in, Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token :  10, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  1, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Freq, Posbility: 0.0000
Next Token : (, Posbility: 0.0007
Next Token : freq, Posbility: 0.0015
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  +, Posbility: 0.0009
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0003
Next Token :   , Posbility: 0.0005
Next Token :    , Posbility: 0.0052
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0114
Next Token : return, Posbility: 0.0311
Next Token : let, Posbility: 0.0845
Next Token : if, Posbility: 0.2295
Next Token : freq, Posbility: 0.6250
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : u, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token : count, Posbility: 0.0001
Next Token : checker, Posbility: 0.0001
Next Token : check, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0005
Next Token :  ~, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0037
Next Token :  , Posbility: 0.0752
Next Token : _, Posbility: 0.9180
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : check, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : recursion, Posbility: 0.0001
Next Token : recursive, Posbility: 0.0001
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0005
Next Token : _, Posbility: 0.0005
Next Token :  ~, Posbility: 0.0007
Next Token : (, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Freq, Posbility: 0.0000
Next Token : freq, Posbility: 0.0017
Next Token : (, Posbility: 0.0179
Next Token : n, Posbility: 0.9805
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0111
Next Token :  and, Posbility: 0.0161
Next Token : 

, Posbility: 0.0234
Next Token :  &&, Posbility: 0.0234
Next Token : 
, Posbility: 0.8789
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0040
Next Token : end, Posbility: 0.0046
Next Token :  in, Posbility: 0.0063
Next Token :   , Posbility: 0.0281
Next Token : in, Posbility: 0.9297
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0018
Next Token : ;, Posbility: 0.0023
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7266
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0175
Next Token : printf, Posbility: 0.0198
Next Token : freq, Posbility: 0.0417
Next Token : (, Posbility: 0.0688
Next Token : let, Posbility: 0.6953
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  main, Posbility: 0.0260
Next Token :  is, Posbility: 0.0334
Next Token :  check, Posbility: 0.0552
Next Token :  , Posbility: 0.2471
Next Token :  rec, Posbility: 0.5234
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0210
Next Token :  is, Posbility: 0.0344
Next Token :  count, Posbility: 0.0444
Next Token :  check, Posbility: 0.0503
Next Token :  , Posbility: 0.6133
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0101
Next Token : digit, Posbility: 0.0114
Next Token : frequency, Posbility: 0.0114
Next Token : f, Posbility: 0.0146
Next Token : freq, Posbility: 0.7969
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : s, Posbility: 0.0012
Next Token :  =, Posbility: 0.0022
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sum, Posbility: 0.0026
Next Token : checker, Posbility: 0.0038
Next Token : rec, Posbility: 0.0043
Next Token : count, Posbility: 0.0104
Next Token : check, Posbility: 0.9336
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0029
Next Token : ', Posbility: 0.0079
Next Token :  , Posbility: 0.0277
Next Token : 2, Posbility: 0.0277
Next Token : _, Posbility: 0.9180
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0189
Next Token : opt, Posbility: 0.0311
Next Token : loop, Posbility: 0.0962
Next Token : rec, Posbility: 0.1230
Next Token : iter, Posbility: 0.3359
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0128
Next Token : ative, Posbility: 0.0128
Next Token :  =, Posbility: 0.0145
Next Token :  i, Posbility: 0.0211
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0007
Next Token : f, Posbility: 0.0019
Next Token : (, Posbility: 0.0031
Next Token : x, Posbility: 0.0036
Next Token : n, Posbility: 0.9844
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0030
Next Token :  acc, Posbility: 0.0063
Next Token :  i, Posbility: 0.0104
Next Token :  , Posbility: 0.0283
Next Token :  =, Posbility: 0.9375
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  0, Posbility: 0.0003
Next Token :  , Posbility: 0.0059
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token :    , Posbility: 0.0013
Next Token : let, Posbility: 0.0027
Next Token :     , Posbility: 0.0140
Next Token :   , Posbility: 0.9805
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0070
Next Token : (, Posbility: 0.0090
Next Token : List, Posbility: 0.0148
Next Token : if, Posbility: 0.3809
Next Token : let, Posbility: 0.5547
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  stack, Posbility: 0.0173
Next Token :  iter, Posbility: 0.0284
Next Token :  acc, Posbility: 0.0284
Next Token :  rec, Posbility: 0.2109
Next Token :  , Posbility: 0.5742
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0142
Next Token : digits, Posbility: 0.0234
Next Token : f, Posbility: 0.0388
Next Token : freq, Posbility: 0.0439
Next Token : n, Posbility: 0.6875
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0060
Next Token : 0, Posbility: 0.0144
Next Token : 1, Posbility: 0.0186
Next Token : _, Posbility: 0.0444
Next Token :  =, Posbility: 0.8945
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0005
Next Token :  [, Posbility: 0.0009
Next Token :  0, Posbility: 0.0025
Next Token :  10, Posbility: 0.0025
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0019
Next Token : if, Posbility: 0.0027
Next Token : (, Posbility: 0.0035
Next Token : List, Posbility: 0.0058
Next Token : n, Posbility: 0.9766
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0016
Next Token :  *, Posbility: 0.0021
Next Token :  in, Posbility: 0.0027
Next Token :  %, Posbility: 0.0227
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0003
Next Token : div, Posbility: 0.0005
Next Token : //, Posbility: 0.0013
Next Token : -, Posbility: 0.0028
Next Token : /, Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 10, Posbility: 0.0005
Next Token :  10;, Posbility: 0.0009
Next Token :  100, Posbility: 0.0015
Next Token :  , Posbility: 0.0025
Next Token :  10, Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token :  +, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :     , Posbility: 0.0059
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0063
Next Token : (, Posbility: 0.0118
Next Token : match, Posbility: 0.0221
Next Token : if, Posbility: 0.2695
Next Token : let, Posbility: 0.6484
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  check, Posbility: 0.0037
Next Token :  iter, Posbility: 0.0037
Next Token :  res, Posbility: 0.0042
Next Token :  rec, Posbility: 0.0354
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0024
Next Token : x, Posbility: 0.0039
Next Token : f, Posbility: 0.0064
Next Token : freq, Posbility: 0.0064
Next Token : n, Posbility: 0.9570
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0006
Next Token : 2, Posbility: 0.0008
Next Token : 1, Posbility: 0.0012
Next Token : _, Posbility: 0.0022
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  mod, Posbility: 0.0003
Next Token :  0, Posbility: 0.0006
Next Token :  10, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0003
Next Token : freq, Posbility: 0.0005
Next Token : if, Posbility: 0.0008
Next Token : (, Posbility: 0.0041
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 0.0015
Next Token :  *, Posbility: 0.0031
Next Token :  mod, Posbility: 0.0159
Next Token :  %, Posbility: 0.9805
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  10;, Posbility: 0.0002
Next Token : 10, Posbility: 0.0003
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  +, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0005
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0019
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0125
Next Token : match, Posbility: 0.0142
Next Token : freq, Posbility: 0.0160
Next Token : if, Posbility: 0.1338
Next Token : let, Posbility: 0.7734
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0046
Next Token :  acc, Posbility: 0.0046
Next Token :  iter, Posbility: 0.0067
Next Token :  rec, Posbility: 0.0640
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0038
Next Token : x, Posbility: 0.0062
Next Token : f, Posbility: 0.0103
Next Token : freq, Posbility: 0.0170
Next Token : n, Posbility: 0.9258
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0012
Next Token : ', Posbility: 0.0012
Next Token : 1, Posbility: 0.0013
Next Token : _, Posbility: 0.0022
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  0, Posbility: 0.0005
Next Token :  10, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0007
Next Token : if, Posbility: 0.0012
Next Token : freq, Posbility: 0.0013
Next Token : (, Posbility: 0.0059
Next Token : n, Posbility: 0.9883
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0003
Next Token :  %, Posbility: 0.0006
Next Token :  , Posbility: 0.0022
Next Token :  +, Posbility: 0.0067
Next Token :  *, Posbility: 0.9883
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 10, Posbility: 0.0001
Next Token :  100, Posbility: 0.0001
Next Token :  10;, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token :  in, Posbility: 0.0006
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0001
Next Token :  10, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  1, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : freq, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token :  +, Posbility: 0.0013
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0004
Next Token :  , Posbility: 0.0004
Next Token :     , Posbility: 0.0032
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0251
Next Token : n, Posbility: 0.0366
Next Token : freq, Posbility: 0.1641
Next Token : if, Posbility: 0.3047
Next Token : let, Posbility: 0.3457
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0183
Next Token :  res, Posbility: 0.0303
Next Token :  iter, Posbility: 0.0303
Next Token :  rec, Posbility: 0.2871
Next Token :  , Posbility: 0.4727
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0212
Next Token : x, Posbility: 0.0309
Next Token : f, Posbility: 0.0840
Next Token : freq, Posbility: 0.0952
Next Token : n, Posbility: 0.5469
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0112
Next Token : 1, Posbility: 0.0128
Next Token : 2, Posbility: 0.0144
Next Token : _, Posbility: 0.0347
Next Token :  =, Posbility: 0.8945
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0064
Next Token :  10, Posbility: 0.0064
Next Token : 
, Posbility: 0.0064
Next Token :  1, Posbility: 0.0064
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0105
Next Token : (, Posbility: 0.0286
Next Token : if, Posbility: 0.0366
Next Token : freq, Posbility: 0.1641
Next Token : n, Posbility: 0.7383
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0332
Next Token :  %, Posbility: 0.0376
Next Token :  in, Posbility: 0.0547
Next Token :  +, Posbility: 0.1021
Next Token :  , Posbility: 0.7539
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0021
Next Token : >, Posbility: 0.0024
Next Token : <, Posbility: 0.0044
Next Token : -, Posbility: 0.0289
Next Token : /, Posbility: 0.9570
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0003
Next Token : 10, Posbility: 0.0009
Next Token :  100, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  10, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  +, Posbility: 0.0015
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0013
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :     , Posbility: 0.0007
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0052
Next Token : n, Posbility: 0.0140
Next Token : if, Posbility: 0.1035
Next Token : freq, Posbility: 0.1035
Next Token : let, Posbility: 0.7656
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  result, Posbility: 0.0001
Next Token :  check, Posbility: 0.0001
Next Token :  res, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : freq, Posbility: 0.0006
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  10, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token :  *, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  mod, Posbility: 0.0009
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  100, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token : 10, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0012
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0055
Next Token : n, Posbility: 0.0055
Next Token : if, Posbility: 0.0408
Next Token : freq, Posbility: 0.1108
Next Token : let, Posbility: 0.8203
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  check, Posbility: 0.0001
Next Token :  iter, Posbility: 0.0001
Next Token :  res, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0004
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  10, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token :  +, Posbility: 0.0013
Next Token :  %, Posbility: 0.0046
Next Token :  *, Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10;, Posbility: 0.0000
Next Token :  100, Posbility: 0.0000
Next Token : 10, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : freq, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0006
Next Token :  , Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0019
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0082
Next Token : n, Posbility: 0.0222
Next Token : if, Posbility: 0.0603
Next Token : freq, Posbility: 0.4453
Next Token : let, Posbility: 0.4453
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0002
Next Token :  iter, Posbility: 0.0004
Next Token :  res, Posbility: 0.0007
Next Token :  rec, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : r, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : freq, Posbility: 0.0012
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  10, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : freq, Posbility: 0.0006
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :  *, Posbility: 0.0007
Next Token :  %, Posbility: 0.0009
Next Token :  +, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  20, Posbility: 0.0000
Next Token :  100, Posbility: 0.0001
Next Token : 10, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0023
Next Token : ..., Posbility: 0.0062
Next Token : if, Posbility: 0.0168
Next Token : freq, Posbility: 0.0459
Next Token : let, Posbility: 0.9219
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  mod, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0002
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 10, Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0008
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0046
Next Token : return, Posbility: 0.0046
Next Token : if, Posbility: 0.0342
Next Token : freq, Posbility: 0.2520
Next Token : let, Posbility: 0.6875
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0003
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token :  %, Posbility: 0.0006
Next Token :  +, Posbility: 0.0012
Next Token :  *, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10;, Posbility: 0.0000
Next Token :  100, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  =, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :     , Posbility: 0.0017
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0217
Next Token : n, Posbility: 0.0217
Next Token : if, Posbility: 0.0591
Next Token : freq, Posbility: 0.4375
Next Token : let, Posbility: 0.4375
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0002
Next Token :  is, Posbility: 0.0003
Next Token :  res, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : freq, Posbility: 0.0010
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  be, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  10, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : freq, Posbility: 0.0006
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0003
Next Token :  %, Posbility: 0.0013
Next Token :  *, Posbility: 0.0019
Next Token :  +, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : >, Posbility: 0.0001
Next Token : <, Posbility: 0.0001
Next Token : -, Posbility: 0.0001
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  100, Posbility: 0.0001
Next Token : 10, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0036
Next Token : return, Posbility: 0.0060
Next Token : if, Posbility: 0.0266
Next Token : freq, Posbility: 0.0723
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  mod, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0003
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 10, Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0010
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0034
Next Token : return, Posbility: 0.0093
Next Token : if, Posbility: 0.0253
Next Token : freq, Posbility: 0.1133
Next Token : let, Posbility: 0.8359
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0003
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  be, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : freq, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  %, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  +, Posbility: 0.0009
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  20, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token : 10, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  =, Posbility: 0.0006
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token :     , Posbility: 0.0015
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0217
Next Token : n, Posbility: 0.0217
Next Token : if, Posbility: 0.0591
Next Token : freq, Posbility: 0.4355
Next Token : let, Posbility: 0.4355
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0002
Next Token :  is, Posbility: 0.0003
Next Token :  res, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0003
Next Token : freq, Posbility: 0.0013
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  be, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  10, Posbility: 0.0001
Next Token :  0, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Freq, Posbility: 0.0001
Next Token : if, Posbility: 0.0006
Next Token : (, Posbility: 0.0009
Next Token : freq, Posbility: 0.0012
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0004
Next Token :  %, Posbility: 0.0015
Next Token :  *, Posbility: 0.0022
Next Token :  +, Posbility: 0.0036
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : >, Posbility: 0.0001
Next Token : <, Posbility: 0.0001
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  100, Posbility: 0.0001
Next Token : 10, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0023
Next Token : return, Posbility: 0.0062
Next Token : if, Posbility: 0.0168
Next Token : freq, Posbility: 0.0459
Next Token : let, Posbility: 0.9219
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  mod, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0003
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token : 10, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :     , Posbility: 0.0010
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0034
Next Token : return, Posbility: 0.0093
Next Token : if, Posbility: 0.0254
Next Token : freq, Posbility: 0.1138
Next Token : let, Posbility: 0.8398
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0003
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  %, Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token :  +, Posbility: 0.0010
Next Token :  *, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token : 10, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  =, Posbility: 0.0007
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token :     , Posbility: 0.0015
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0264
Next Token : n, Posbility: 0.0264
Next Token : if, Posbility: 0.0718
Next Token : freq, Posbility: 0.3203
Next Token : let, Posbility: 0.5273
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0002
Next Token :  is, Posbility: 0.0003
Next Token :  res, Posbility: 0.0007
Next Token :  rec, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0003
Next Token : freq, Posbility: 0.0012
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  be, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  10, Posbility: 0.0001
Next Token :  0, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0004
Next Token : (, Posbility: 0.0006
Next Token : freq, Posbility: 0.0008
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0003
Next Token :  %, Posbility: 0.0012
Next Token :  *, Posbility: 0.0015
Next Token :  +, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : >, Posbility: 0.0001
Next Token : <, Posbility: 0.0002
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  100, Posbility: 0.0001
Next Token : 10, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0029
Next Token : return, Posbility: 0.0078
Next Token : if, Posbility: 0.0212
Next Token : freq, Posbility: 0.0576
Next Token : let, Posbility: 0.9023
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : freq, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  mod, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0003
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token : 10, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :     , Posbility: 0.0010
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0056
Next Token : return, Posbility: 0.0093
Next Token : if, Posbility: 0.0253
Next Token : freq, Posbility: 0.1133
Next Token : let, Posbility: 0.8359
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0003
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  %, Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :  +, Posbility: 0.0010
Next Token :  *, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 9, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  =, Posbility: 0.0006
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token :     , Posbility: 0.0015
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0142
Next Token : return, Posbility: 0.0183
Next Token : if, Posbility: 0.0498
Next Token : freq, Posbility: 0.2852
Next Token : let, Posbility: 0.6055
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  is, Posbility: 0.0002
Next Token :  res, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : f, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : freq, Posbility: 0.0010
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  be, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  10, Posbility: 0.0001
Next Token :  0, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0003
Next Token : (, Posbility: 0.0006
Next Token : freq, Posbility: 0.0007
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0003
Next Token :  %, Posbility: 0.0012
Next Token :  *, Posbility: 0.0015
Next Token :  +, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : >, Posbility: 0.0001
Next Token : <, Posbility: 0.0001
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  100, Posbility: 0.0000
Next Token : 10, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0029
Next Token : return, Posbility: 0.0063
Next Token : if, Posbility: 0.0132
Next Token : freq, Posbility: 0.0461
Next Token : let, Posbility: 0.9258
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  mod, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0003
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token : 10, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :     , Posbility: 0.0008
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0037
Next Token : return, Posbility: 0.0060
Next Token : if, Posbility: 0.0164
Next Token : freq, Posbility: 0.0732
Next Token : let, Posbility: 0.8945
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0003
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : freq, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  %, Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token :  +, Posbility: 0.0006
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0000
Next Token :  20, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 9, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0005
Next Token : 
, Posbility: 0.0006
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :     , Posbility: 0.0015
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0096
Next Token : return, Posbility: 0.0159
Next Token : if, Posbility: 0.0334
Next Token : freq, Posbility: 0.2471
Next Token : let, Posbility: 0.6719
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  is, Posbility: 0.0002
Next Token :  res, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : freq, Posbility: 0.0008
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  10, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0006
Next Token : freq, Posbility: 0.0006
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0002
Next Token :  %, Posbility: 0.0010
Next Token :  *, Posbility: 0.0019
Next Token :  +, Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : >, Posbility: 0.0001
Next Token : <, Posbility: 0.0001
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  100, Posbility: 0.0000
Next Token : 10, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0021
Next Token : return, Posbility: 0.0044
Next Token : if, Posbility: 0.0082
Next Token : freq, Posbility: 0.0366
Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  mod, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0003
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token : 10, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0008
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0047
Next Token : return, Posbility: 0.0060
Next Token : if, Posbility: 0.0164
Next Token : freq, Posbility: 0.0732
Next Token : let, Posbility: 0.8906
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : freq, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  %, Posbility: 0.0001
Next Token :  +, Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0000
Next Token :  20, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 9, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :     , Posbility: 0.0013
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0084
Next Token : return, Posbility: 0.0178
Next Token : if, Posbility: 0.0293
Next Token : freq, Posbility: 0.1689
Next Token : let, Posbility: 0.7578
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  is, Posbility: 0.0001
Next Token :  res, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : freq, Posbility: 0.0008
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n =
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  10, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = 
 score:False
Error type: noerr
---------------------------
Next Token : Freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0005
Next Token : freq, Posbility: 0.0005
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0002
Next Token :  %, Posbility: 0.0009
Next Token :  *, Posbility: 0.0015
Next Token :  +, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n 
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 0.0001
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n /
 score:False
Error type: noerr
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  100, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0021
Next Token : return, Posbility: 0.0027
Next Token : if, Posbility: 0.0073
Next Token : freq, Posbility: 0.0255
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n =
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = 
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  mod, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0002
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n %
 score:False
Error type: noerr
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0008
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0038
Next Token : return, Posbility: 0.0043
Next Token : if, Posbility: 0.0103
Next Token : freq, Posbility: 0.0464
Next Token : let, Posbility: 0.9297
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n =
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = 
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : freq, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  %, Posbility: 0.0001
Next Token :  +, Posbility: 0.0004
Next Token :  , Posbility: 0.0004
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n *
 score:False
Error type: noerr
---------------------------
Next Token :  20, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 +
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + 
 score:False
Error type: noerr
---------------------------
Next Token : 9, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n
 score:False
Error type: noerr
---------------------------
Next Token :  and, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 
, Posbility: 0.0012
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :     , Posbility: 0.0009
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0099
Next Token : return, Posbility: 0.0145
Next Token : if, Posbility: 0.0306
Next Token : freq, Posbility: 0.1377
Next Token : let, Posbility: 0.7891
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  is, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : freq, Posbility: 0.0006
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n =
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  10, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = 
 score:False
Error type: noerr
---------------------------
Next Token : Freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0006
Next Token : freq, Posbility: 0.0006
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :  %, Posbility: 0.0007
Next Token :  +, Posbility: 0.0010
Next Token :  *, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n 
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 0.0001
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n /
 score:False
Error type: noerr
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  100, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0019
Next Token : return, Posbility: 0.0024
Next Token : if, Posbility: 0.0058
Next Token : freq, Posbility: 0.0157
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : freq, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n =
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = 
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  mod, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0002
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n %
 score:False
Error type: noerr
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0034
Next Token : return, Posbility: 0.0043
Next Token : if, Posbility: 0.0081
Next Token : freq, Posbility: 0.0464
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n =
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = 
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  %, Posbility: 0.0001
Next Token :  +, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n *
 score:False
Error type: noerr
---------------------------
Next Token :  20, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 +
 score:False
Error type: noerr
---------------------------
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + 
 score:False
Error type: noerr
---------------------------
Next Token : 9, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n
 score:False
Error type: noerr
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0008
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token :     , Posbility: 0.0010
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0092
Next Token : return, Posbility: 0.0092
Next Token : if, Posbility: 0.0251
Next Token : freq, Posbility: 0.1123
Next Token : let, Posbility: 0.8320
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  res, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0005
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n =
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  10, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = 
 score:False
Error type: noerr
---------------------------
Next Token : Freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : freq, Posbility: 0.0004
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :  %, Posbility: 0.0006
Next Token :  +, Posbility: 0.0009
Next Token :  *, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n 
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n /
 score:False
Error type: noerr
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  100, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0017
Next Token : return, Posbility: 0.0024
Next Token : if, Posbility: 0.0058
Next Token : freq, Posbility: 0.0139
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : freq, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n =
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = 
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : freq, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  mod, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0002
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n %
 score:False
Error type: noerr
---------------------------
Next Token :  10;, Posbility: 0.0000
Next Token :  11, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0034
Next Token : return, Posbility: 0.0034
Next Token : if, Posbility: 0.0093
Next Token : freq, Posbility: 0.0325
Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n =
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = 
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : freq, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  %, Posbility: 0.0001
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n *
 score:False
Error type: noerr
---------------------------
Next Token :  10;, Posbility: 0.0000
Next Token :  20, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 +
 score:False
Error type: noerr
---------------------------
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + 
 score:False
Error type: noerr
---------------------------
Next Token : 9, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n
 score:False
Error type: noerr
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0007
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :     , Posbility: 0.0010
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0075
Next Token : return, Posbility: 0.0085
Next Token : if, Posbility: 0.0179
Next Token : freq, Posbility: 0.0913
Next Token : let, Posbility: 0.8672
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0004
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n =
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  10, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = 
 score:False
Error type: noerr
---------------------------
Next Token : Freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : freq, Posbility: 0.0004
Next Token : (, Posbility: 0.0004
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :  %, Posbility: 0.0006
Next Token :  +, Posbility: 0.0008
Next Token :  *, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n 
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n /
 score:False
Error type: noerr
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  100, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0017
Next Token : return, Posbility: 0.0021
Next Token : if, Posbility: 0.0051
Next Token : freq, Posbility: 0.0139
Next Token : let, Posbility: 0.9766
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : freq, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n =
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = 
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : freq, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n
 score:False
Error type: noerr
---------------------------
Next Token :  mod, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0002
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n %
 score:False
Error type: noerr
---------------------------
Next Token :  11, Posbility: 0.0000
Next Token :  10;, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  
 score:False
Error type: noerr
---------------------------
Next Token : return, Posbility: 0.0024
Next Token : (, Posbility: 0.0027
Next Token : if, Posbility: 0.0057
Next Token : freq, Posbility: 0.0227
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  res, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : freq, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. *)
let rec freq_check n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check n
in
let rec freq_check_rec n =
  if n = 0 then
    return true
  else
    let n = n / 10 in
    let n = n % 10 in
    let n = n * 10 + n in
    freq_check_rec n
in
let rec freq_check_iter n =
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n = n * 10 + n in
  let n = n / 10 in
  let n = n % 10 in
  let n
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>