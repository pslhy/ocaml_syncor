code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0282
Next Token :  int, Posbility: 0.0527
Next Token :  count, Posbility: 0.1436
Next Token :  , Posbility: 0.1836
Next Token :  rec, Posbility: 0.3887
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  integer, Posbility: 0.0253
Next Token :  is, Posbility: 0.0325
Next Token :  int, Posbility: 0.0605
Next Token :  , Posbility: 0.2715
Next Token :  count, Posbility: 0.3477
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0052
Next Token : Int, Posbility: 0.0059
Next Token :  , Posbility: 0.0918
Next Token :  =, Posbility: 0.3203
Next Token : _, Posbility: 0.5273
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0187
Next Token : list, Posbility: 0.0742
Next Token : integer, Posbility: 0.0840
Next Token : elements, Posbility: 0.1777
Next Token : int, Posbility: 0.3750
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0015
Next Token :  , Posbility: 0.0811
Next Token :  =, Posbility: 0.0811
Next Token : _, Posbility: 0.2207
Next Token : s, Posbility: 0.5977
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0179
Next Token :  i, Posbility: 0.0204
Next Token : _, Posbility: 0.0554
Next Token :  =, Posbility: 0.4082
Next Token :  , Posbility: 0.4082
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0850
Next Token : (, Posbility: 0.1094
Next Token : lst, Posbility: 0.1094
Next Token : :, Posbility: 0.1592
Next Token : x, Posbility: 0.2314
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0092
Next Token :  i, Posbility: 0.0118
Next Token :  , Posbility: 0.0598
Next Token :  =, Posbility: 0.4414
Next Token : s, Posbility: 0.4414
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0018
Next Token :  i, Posbility: 0.0049
Next Token :  acc, Posbility: 0.0082
Next Token :  , Posbility: 0.0284
Next Token :  =, Posbility: 0.9414
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0053
Next Token :  function, Posbility: 0.0144
Next Token :  match, Posbility: 0.0830
Next Token :  , Posbility: 0.0942
Next Token : 
, Posbility: 0.7891
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0053
Next Token : 	, Posbility: 0.0128
Next Token :    , Posbility: 0.0145
Next Token :     , Posbility: 0.1562
Next Token :   , Posbility: 0.7930
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : case, Posbility: 0.0057
Next Token : List, Posbility: 0.0199
Next Token : if, Posbility: 0.1011
Next Token : let, Posbility: 0.1011
Next Token : match, Posbility: 0.7500
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token : 
, Posbility: 0.0005
Next Token :  !, Posbility: 0.0005
Next Token :  String, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Seq, Posbility: 0.0009
Next Token : Int, Posbility: 0.0011
Next Token : (, Posbility: 0.0042
Next Token : List, Posbility: 0.0664
Next Token : x, Posbility: 0.9180
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  with, Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  @, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 0.0009
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0034
Next Token :  , Posbility: 0.0044
Next Token :  [, Posbility: 0.0050
Next Token :  [], Posbility: 0.0255
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0006
Next Token :       , Posbility: 0.0018
Next Token :    , Posbility: 0.0029
Next Token :     , Posbility: 0.0845
Next Token :   , Posbility: 0.9102
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : case, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : [, Posbility: 0.0120
Next Token : [], Posbility: 0.0369
Next Token : |, Posbility: 0.9492
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0009
Next Token :  [, Posbility: 0.0066
Next Token :  nil, Posbility: 0.0066
Next Token :  , Posbility: 0.0108
Next Token :  [], Posbility: 0.9727
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0039
Next Token :   , Posbility: 0.0050
Next Token :    , Posbility: 0.0082
Next Token :  =>, Posbility: 0.0135
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0002
Next Token :  =>, Posbility: 0.0003
Next Token : â†’, Posbility: 0.0004
Next Token : ::, Posbility: 0.0006
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0009
Next Token : 
, Posbility: 0.0065
Next Token :  , Posbility: 0.0065
Next Token :  1, Posbility: 0.0177
Next Token :  0, Posbility: 0.9648
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0011
Next Token :   , Posbility: 0.0027
Next Token :  , Posbility: 0.0064
Next Token :  |, Posbility: 0.0255
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0053
Next Token :  i, Posbility: 0.0053
Next Token :  [], Posbility: 0.0077
Next Token :  [, Posbility: 0.1748
Next Token :  , Posbility: 0.7852
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0159
Next Token : h, Posbility: 0.0261
Next Token : hd, Posbility: 0.0334
Next Token : _, Posbility: 0.1934
Next Token : x, Posbility: 0.6719
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0014
Next Token : :, Posbility: 0.0222
Next Token : s, Posbility: 0.0471
Next Token : ::, Posbility: 0.3477
Next Token :  , Posbility: 0.5742
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : ->, Posbility: 0.0005
Next Token : if, Posbility: 0.0008
Next Token : :, Posbility: 0.0046
Next Token : ::, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  more, Posbility: 0.0013
Next Token :  int, Posbility: 0.0032
Next Token :  [], Posbility: 0.0041
Next Token :  rest, Posbility: 0.0938
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : t, Posbility: 0.0066
Next Token : tail, Posbility: 0.0159
Next Token : y, Posbility: 0.0204
Next Token : _, Posbility: 0.0713
Next Token : x, Posbility: 0.8672
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token : ', Posbility: 0.0052
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0137
Next Token : _, Posbility: 0.0176
Next Token : ', Posbility: 0.0330
Next Token :  when, Posbility: 0.0542
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : -, Posbility: 0.0001
Next Token : if, Posbility: 0.0025
Next Token : ::, Posbility: 0.0028
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (1, Posbility: 0.0128
Next Token :  , Posbility: 0.0942
Next Token : 
, Posbility: 0.0942
Next Token :  count, Posbility: 0.0942
Next Token :  1, Posbility: 0.6953
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0010
Next Token :  , Posbility: 0.0025
Next Token : +, Posbility: 0.0025
Next Token : 
, Posbility: 0.0036
Next Token :  +, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :   , Posbility: 0.0007
Next Token :  rec, Posbility: 0.0024
Next Token :  , Posbility: 0.0109
Next Token :  count, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count
 score:False
Error type: noerr
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  int, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_
 score:False
Error type: noerr
---------------------------
Next Token : float, Posbility: 0.0000
Next Token : rest, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_int
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0046
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints 
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0052
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0033
Next Token :  in, Posbility: 0.0033
Next Token : ), Posbility: 0.0089
Next Token : 

, Posbility: 0.4883
Next Token : 
, Posbility: 0.4883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0442
Next Token : end, Posbility: 0.0532
Next Token : in, Posbility: 0.0684
Next Token :   , Posbility: 0.1060
Next Token : let, Posbility: 0.3262
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0349
Next Token :  main, Posbility: 0.0576
Next Token :  , Posbility: 0.1562
Next Token :  count, Posbility: 0.1562
Next Token :  rec, Posbility: 0.4824
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0089
Next Token :  is, Posbility: 0.0147
Next Token :  rec, Posbility: 0.0147
Next Token :  , Posbility: 0.1235
Next Token :  count, Posbility: 0.7109
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0005
Next Token : 2, Posbility: 0.0011
Next Token :  , Posbility: 0.0198
Next Token :  =, Posbility: 0.0198
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : char, Posbility: 0.0294
Next Token : all, Posbility: 0.0332
Next Token : list, Posbility: 0.0376
Next Token : float, Posbility: 0.0483
Next Token : int, Posbility: 0.5195
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0011
Next Token :  =, Posbility: 0.0038
Next Token :  , Posbility: 0.0062
Next Token : _, Posbility: 0.0591
Next Token : s, Posbility: 0.9258
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0386
Next Token :  , Posbility: 0.0820
Next Token : 2, Posbility: 0.0820
Next Token : ', Posbility: 0.1963
Next Token : _, Posbility: 0.5352
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0330
Next Token : iter, Posbility: 0.0698
Next Token : list, Posbility: 0.0791
Next Token : rec, Posbility: 0.0894
Next Token : opt, Posbility: 0.1299
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0041
Next Token : ics, Posbility: 0.0053
Next Token : _, Posbility: 0.0269
Next Token :  =, Posbility: 0.0391
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0019
Next Token : lst, Posbility: 0.0021
Next Token : opt, Posbility: 0.0045
Next Token : (, Posbility: 0.0051
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 0.0085
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0005
Next Token :  ~, Posbility: 0.0005
Next Token : _, Posbility: 0.0024
Next Token :  , Posbility: 0.0228
Next Token :  =, Posbility: 0.9688
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0008
Next Token :  count, Posbility: 0.0057
Next Token :  , Posbility: 0.0121
Next Token :  match, Posbility: 0.0176
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0004
Next Token :    , Posbility: 0.0013
Next Token : let, Posbility: 0.0013
Next Token :     , Posbility: 0.0059
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0048
Next Token : if, Posbility: 0.0131
Next Token : try, Posbility: 0.0167
Next Token : let, Posbility: 0.0403
Next Token : match, Posbility: 0.9141
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0002
Next Token :  ?, Posbility: 0.0003
Next Token :  P, Posbility: 0.0004
Next Token :  Optional, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Seq, Posbility: 0.0005
Next Token : (, Posbility: 0.0013
Next Token : Option, Posbility: 0.0058
Next Token : List, Posbility: 0.0096
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  with, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : ., Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  null, Posbility: 0.0001
Next Token :  None, Posbility: 0.0002
Next Token :  [], Posbility: 0.0005
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : case, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ||, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0060
Next Token :  Some, Posbility: 0.0060
Next Token :  , Posbility: 0.0442
Next Token :  None, Posbility: 0.0442
Next Token :  [], Posbility: 0.8906
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  then, Posbility: 0.0007
Next Token :  =>, Posbility: 0.0015
Next Token :  |, Posbility: 0.0075
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : return, Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0113
Next Token :  Some, Posbility: 0.0308
Next Token :  , Posbility: 0.0835
Next Token :  None, Posbility: 0.2275
Next Token :  0, Posbility: 0.6172
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  as, Posbility: 0.0009
Next Token :  |, Posbility: 0.0046
Next Token :  , Posbility: 0.0052
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0137
Next Token :  [], Posbility: 0.0226
Next Token :  None, Posbility: 0.0371
Next Token :  Some, Posbility: 0.1670
Next Token :  , Posbility: 0.7461
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Option, Posbility: 0.0023
Next Token : Nil, Posbility: 0.0029
Next Token : (, Posbility: 0.0130
Next Token : _, Posbility: 0.0515
Next Token : x, Posbility: 0.9141
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0016
Next Token : s, Posbility: 0.0073
Next Token :  |, Posbility: 0.0083
Next Token : ::, Posbility: 0.0155
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : if, Posbility: 0.0002
Next Token : :, Posbility: 0.0032
Next Token : ->, Posbility: 0.0036
Next Token : ::, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  nil, Posbility: 0.0005
Next Token :  [, Posbility: 0.0006
Next Token :  None, Posbility: 0.0025
Next Token :  [], Posbility: 0.0040
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Nil, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : _, Posbility: 0.0179
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0004
Next Token :  |, Posbility: 0.0005
Next Token : 
, Posbility: 0.0009
Next Token :  when, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : if, Posbility: 0.0004
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0143
Next Token :  , Posbility: 0.0391
Next Token :  count, Posbility: 0.0391
Next Token :  Some, Posbility: 0.1060
Next Token :  1, Posbility: 0.7812
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token :  |, Posbility: 0.0008
Next Token : 
, Posbility: 0.0017
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0008
Next Token :  match, Posbility: 0.0021
Next Token :  , Posbility: 0.0140
Next Token :  count, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count
 score:False
Error type: noerr
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token :  (*, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : opt, Posbility: 0.0002
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_int
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0179
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt 
 score:False
Error type: noerr
---------------------------
Next Token : opt, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0017
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0021
Next Token :  +, Posbility: 0.0040
Next Token :  , Posbility: 0.0045
Next Token : 

, Posbility: 0.4590
Next Token : 
, Posbility: 0.5195
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs

 score:False
Error type: noerr
---------------------------
Next Token : module, Posbility: 0.0096
Next Token :   , Posbility: 0.0124
Next Token : 

, Posbility: 0.0175
Next Token : (, Posbility: 0.1650
Next Token : let, Posbility: 0.4785
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0063
Next Token :  main, Posbility: 0.0091
Next Token :  , Posbility: 0.0674
Next Token :  count, Posbility: 0.0674
Next Token :  rec, Posbility: 0.8203
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0052
Next Token :  rec, Posbility: 0.0075
Next Token :  is, Posbility: 0.0085
Next Token :  , Posbility: 0.0554
Next Token :  count, Posbility: 0.8672
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ing, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0022
Next Token :  =, Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0068
Next Token : char, Posbility: 0.0068
Next Token : list, Posbility: 0.0077
Next Token : float, Posbility: 0.0077
Next Token : int, Posbility: 0.8906
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 0.0052
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0049
Next Token : ', Posbility: 0.0119
Next Token :  , Posbility: 0.0153
Next Token : 2, Posbility: 0.0153
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ex, Posbility: 0.0254
Next Token : iter, Posbility: 0.0610
Next Token : list, Posbility: 0.0889
Next Token : rec, Posbility: 0.0889
Next Token : opt, Posbility: 0.2412
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0139
Next Token :  , Posbility: 0.0703
Next Token : ', Posbility: 0.1162
Next Token : 2, Posbility: 0.3574
Next Token : _, Posbility: 0.4062
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0361
Next Token : list, Posbility: 0.0464
Next Token : rec, Posbility: 0.0596
Next Token : ex, Posbility: 0.0767
Next Token : opt, Posbility: 0.1260
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0035
Next Token : 2, Posbility: 0.0066
Next Token : _, Posbility: 0.0231
Next Token :  =, Posbility: 0.0488
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token : lst, Posbility: 0.0004
Next Token : (, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token :  acc, Posbility: 0.0003
Next Token :  , Posbility: 0.0076
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  count, Posbility: 0.0009
Next Token :  match, Posbility: 0.0025
Next Token :  , Posbility: 0.0036
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token : let, Posbility: 0.0005
Next Token :    , Posbility: 0.0006
Next Token :     , Posbility: 0.0025
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0015
Next Token : if, Posbility: 0.0027
Next Token : try, Posbility: 0.0027
Next Token : let, Posbility: 0.0201
Next Token : match, Posbility: 0.9688
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : Option, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : List, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  WITH, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0003
Next Token :  [, Posbility: 0.0024
Next Token :  , Posbility: 0.0066
Next Token :  None, Posbility: 0.0066
Next Token :  [], Posbility: 0.9805
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  as, Posbility: 0.0003
Next Token :  |, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0023
Next Token :  Some, Posbility: 0.0062
Next Token :  , Posbility: 0.0167
Next Token :  None, Posbility: 0.0457
Next Token :  0, Posbility: 0.9141
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  as, Posbility: 0.0002
Next Token :  |, Posbility: 0.0012
Next Token :  , Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0024
Next Token :  [, Posbility: 0.0040
Next Token :  None, Posbility: 0.0040
Next Token :  Some, Posbility: 0.0177
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0003
Next Token : Nil, Posbility: 0.0004
Next Token : (, Posbility: 0.0052
Next Token : _, Posbility: 0.0096
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0004
Next Token : s, Posbility: 0.0010
Next Token :  |, Posbility: 0.0015
Next Token : ::, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : ->, Posbility: 0.0004
Next Token : :, Posbility: 0.0012
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  0, Posbility: 0.0002
Next Token :  [, Posbility: 0.0004
Next Token :  None, Posbility: 0.0007
Next Token :  [], Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : _, Posbility: 0.0052
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ', Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token :  |, Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  when, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0065
Next Token :  Some, Posbility: 0.0065
Next Token : 
, Posbility: 0.0065
Next Token :  count, Posbility: 0.0065
Next Token :  1, Posbility: 0.9688
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0002
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  match, Posbility: 0.0005
Next Token :  , Posbility: 0.0041
Next Token :  count, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_int
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token :  , Posbility: 0.0125
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_
 score:False
Error type: noerr
---------------------------
Next Token : obj, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0006
Next Token : , Posbility: 0.0012
Next Token :  , Posbility: 0.0025
Next Token : 

, Posbility: 0.3750
Next Token : 
, Posbility: 0.6172
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0083
Next Token : ```, Posbility: 0.0100
Next Token : [, Posbility: 0.0114
Next Token : (, Posbility: 0.0508
Next Token : let, Posbility: 0.7969
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0028
Next Token :  main, Posbility: 0.0028
Next Token :  , Posbility: 0.0437
Next Token :  count, Posbility: 0.0562
Next Token :  rec, Posbility: 0.8789
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0037
Next Token :  rec, Posbility: 0.0053
Next Token :  is, Posbility: 0.0068
Next Token :  , Posbility: 0.0447
Next Token :  count, Posbility: 0.8945
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0010
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0038
Next Token : list, Posbility: 0.0049
Next Token : float, Posbility: 0.0049
Next Token : all, Posbility: 0.0063
Next Token : int, Posbility: 0.9258
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0009
Next Token : ', Posbility: 0.0022
Next Token :  , Posbility: 0.0031
Next Token : 2, Posbility: 0.0046
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0131
Next Token : iter, Posbility: 0.0312
Next Token : list, Posbility: 0.0583
Next Token : rec, Posbility: 0.0664
Next Token : opt, Posbility: 0.4883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0014
Next Token : 3, Posbility: 0.0021
Next Token :  , Posbility: 0.0172
Next Token : 2, Posbility: 0.0284
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0122
Next Token : none, Posbility: 0.0177
Next Token : list, Posbility: 0.0483
Next Token : rec, Posbility: 0.0796
Next Token : opt, Posbility: 0.5898
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0071
Next Token : ', Posbility: 0.0071
Next Token :  , Posbility: 0.0320
Next Token : 2, Posbility: 0.1113
Next Token : _, Posbility: 0.8242
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0067
Next Token : ex, Posbility: 0.0086
Next Token : list, Posbility: 0.0161
Next Token : rec, Posbility: 0.0562
Next Token : opt, Posbility: 0.6836
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0007
Next Token : 2, Posbility: 0.0008
Next Token : _, Posbility: 0.0074
Next Token :  =, Posbility: 0.0108
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (), Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token :  match, Posbility: 0.0007
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :    , Posbility: 0.0005
Next Token :     , Posbility: 0.0015
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : count, Posbility: 0.0003
Next Token : if, Posbility: 0.0004
Next Token : let, Posbility: 0.0025
Next Token : match, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Option, Posbility: 0.0000
Next Token : Int, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  1, Posbility: 0.0003
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :  0, Posbility: 0.0002
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : _, Posbility: 0.0013
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0009
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  when, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  count, Posbility: 0.0009
Next Token : 
, Posbility: 0.0012
Next Token :  , Posbility: 0.0012
Next Token :  1, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token : L, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_
 score:False
Error type: noerr
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_int
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : obj, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : obj, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : , Posbility: 0.0011
Next Token :  , Posbility: 0.0011
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7305
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0054
Next Token : 

, Posbility: 0.0070
Next Token : ```, Posbility: 0.0079
Next Token : (, Posbility: 0.0427
Next Token : let, Posbility: 0.8594
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0017
Next Token :  main, Posbility: 0.0022
Next Token :  , Posbility: 0.0349
Next Token :  count, Posbility: 0.0449
Next Token :  rec, Posbility: 0.9023
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0029
Next Token :  is, Posbility: 0.0042
Next Token :  rec, Posbility: 0.0042
Next Token :  , Posbility: 0.0452
Next Token :  count, Posbility: 0.9062
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0013
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0023
Next Token : float, Posbility: 0.0027
Next Token : list, Posbility: 0.0034
Next Token : all, Posbility: 0.0064
Next Token : int, Posbility: 0.9492
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 0.0028
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0007
Next Token : ', Posbility: 0.0015
Next Token : 2, Posbility: 0.0022
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0077
Next Token : iter, Posbility: 0.0127
Next Token : list, Posbility: 0.0270
Next Token : rec, Posbility: 0.0503
Next Token : opt, Posbility: 0.6953
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0003
Next Token : 3, Posbility: 0.0005
Next Token : 2, Posbility: 0.0036
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : optional, Posbility: 0.0023
Next Token : none, Posbility: 0.0038
Next Token : list, Posbility: 0.0063
Next Token : rec, Posbility: 0.0063
Next Token : opt, Posbility: 0.9375
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0005
Next Token : 2, Posbility: 0.0009
Next Token :  , Posbility: 0.0097
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : optional, Posbility: 0.0007
Next Token : int, Posbility: 0.0008
Next Token : list, Posbility: 0.0015
Next Token : none, Posbility: 0.0015
Next Token : opt, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0009
Next Token :  =, Posbility: 0.0030
Next Token : 2, Posbility: 0.0063
Next Token :  , Posbility: 0.0415
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : none, Posbility: 0.0010
Next Token : int, Posbility: 0.0015
Next Token : rec, Posbility: 0.0015
Next Token : list, Posbility: 0.0017
Next Token : opt, Posbility: 0.9727
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token : _, Posbility: 0.0040
Next Token :  =, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token :  match, Posbility: 0.0004
Next Token :  , Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0010
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : let, Posbility: 0.0008
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  count, Posbility: 0.0004
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token : +, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_
 score:False
Error type: noerr
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_int
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : obj, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : obj, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : , Posbility: 0.0011
Next Token :  , Posbility: 0.0011
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7305
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs

 score:False
Error type: noerr
---------------------------
Next Token : *, Posbility: 0.0042
Next Token : module, Posbility: 0.0044
Next Token : ```, Posbility: 0.0053
Next Token : (, Posbility: 0.0393
Next Token : let, Posbility: 0.8945
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0008
Next Token :  main, Posbility: 0.0011
Next Token :  , Posbility: 0.0250
Next Token :  count, Posbility: 0.0283
Next Token :  rec, Posbility: 0.9375
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0018
Next Token :  is, Posbility: 0.0021
Next Token :  rec, Posbility: 0.0023
Next Token :  , Posbility: 0.0284
Next Token :  count, Posbility: 0.9414
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token :  =, Posbility: 0.0009
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : float, Posbility: 0.0015
Next Token : opt, Posbility: 0.0015
Next Token : list, Posbility: 0.0019
Next Token : all, Posbility: 0.0040
Next Token : int, Posbility: 0.9688
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0004
Next Token : ', Posbility: 0.0007
Next Token : 2, Posbility: 0.0009
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0049
Next Token : int, Posbility: 0.0081
Next Token : list, Posbility: 0.0117
Next Token : rec, Posbility: 0.0320
Next Token : opt, Posbility: 0.8203
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0007
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0005
Next Token : none, Posbility: 0.0008
Next Token : list, Posbility: 0.0009
Next Token : optional, Posbility: 0.0013
Next Token : opt, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : int, Posbility: 0.0002
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 0.0008
Next Token :  =, Posbility: 0.0010
Next Token :  , Posbility: 0.0203
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0004
Next Token : optional, Posbility: 0.0004
Next Token : list, Posbility: 0.0005
Next Token : int, Posbility: 0.0008
Next Token : opt, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  =, Posbility: 0.0059
Next Token : _, Posbility: 0.0067
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  count, Posbility: 0.0001
Next Token :  match, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : count, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0004
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  count, Posbility: 0.0003
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_
 score:False
Error type: noerr
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_int
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : , Posbility: 0.0007
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7305
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0017
Next Token : module, Posbility: 0.0032
Next Token : ```, Posbility: 0.0044
Next Token : (, Posbility: 0.0221
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0005
Next Token :  main, Posbility: 0.0009
Next Token :  , Posbility: 0.0175
Next Token :  count, Posbility: 0.0253
Next Token :  rec, Posbility: 0.9492
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0009
Next Token :  sum, Posbility: 0.0009
Next Token :  rec, Posbility: 0.0013
Next Token :  , Posbility: 0.0156
Next Token :  count, Posbility: 0.9688
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0006
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0009
Next Token : float, Posbility: 0.0010
Next Token : list, Posbility: 0.0013
Next Token : all, Posbility: 0.0027
Next Token : int, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 32, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0009
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0003
Next Token : ', Posbility: 0.0003
Next Token : 2, Posbility: 0.0005
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0029
Next Token : list, Posbility: 0.0054
Next Token : int, Posbility: 0.0062
Next Token : rec, Posbility: 0.0115
Next Token : opt, Posbility: 0.9141
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0002
Next Token : list, Posbility: 0.0002
Next Token : op, Posbility: 0.0002
Next Token : optional, Posbility: 0.0004
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0110
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : o, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : op, Posbility: 0.0002
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0006
Next Token :  =, Posbility: 0.0052
Next Token : _, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  match, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : count, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0;, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  count, Posbility: 0.0002
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_
 score:False
Error type: noerr
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_int
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0140
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : , Posbility: 0.0011
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7305
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0013
Next Token : module, Posbility: 0.0030
Next Token : ```, Posbility: 0.0039
Next Token : (, Posbility: 0.0175
Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0004
Next Token :  main, Posbility: 0.0006
Next Token :  , Posbility: 0.0154
Next Token :  count, Posbility: 0.0225
Next Token :  rec, Posbility: 0.9570
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0004
Next Token :  sum, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0009
Next Token :  , Posbility: 0.0096
Next Token :  count, Posbility: 0.9805
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0004
Next Token : list, Posbility: 0.0006
Next Token : float, Posbility: 0.0006
Next Token : all, Posbility: 0.0015
Next Token : int, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 32, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0002
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0021
Next Token : list, Posbility: 0.0034
Next Token : int, Posbility: 0.0049
Next Token : rec, Posbility: 0.0072
Next Token : opt, Posbility: 0.9414
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0001
Next Token : op, Posbility: 0.0002
Next Token : int, Posbility: 0.0002
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token :  , Posbility: 0.0097
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : option, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : op, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  =, Posbility: 0.0052
Next Token : _, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [],, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  count, Posbility: 0.0003
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_
 score:False
Error type: noerr
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_int
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0952
Next Token : _, Posbility: 0.9062
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : , Posbility: 0.0015
Next Token : 

, Posbility: 0.2217
Next Token : 
, Posbility: 0.7734
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs

 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0011
Next Token : ```, Posbility: 0.0029
Next Token : module, Posbility: 0.0029
Next Token : (, Posbility: 0.0165
Next Token : let, Posbility: 0.9570
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0003
Next Token :  main, Posbility: 0.0005
Next Token :  , Posbility: 0.0121
Next Token :  count, Posbility: 0.0200
Next Token :  rec, Posbility: 0.9648
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0003
Next Token :  sum, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 0.0075
Next Token :  count, Posbility: 0.9844
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0003
Next Token : float, Posbility: 0.0004
Next Token : list, Posbility: 0.0005
Next Token : all, Posbility: 0.0012
Next Token : int, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 32, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token : ', Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : optional, Posbility: 0.0019
Next Token : list, Posbility: 0.0024
Next Token : rec, Posbility: 0.0035
Next Token : int, Posbility: 0.0050
Next Token : opt, Posbility: 0.9609
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0001
Next Token : list, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : none, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : op, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  =, Posbility: 0.0058
Next Token : _, Posbility: 0.0140
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: noerr
---------------------------
Next Token : [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: noerr
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  |
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x 
 score:False
Error type: noerr
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x ::
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  count, Posbility: 0.0002
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0008
Next Token :  count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_
 score:False
Error type: noerr
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_int
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0601
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ott, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : _, Posbility: 0.0004
Next Token : 
, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : , Posbility: 0.0015
Next Token : 

, Posbility: 0.2217
Next Token : 
, Posbility: 0.7734
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs

 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0013
Next Token : ```, Posbility: 0.0030
Next Token : module, Posbility: 0.0032
Next Token : (, Posbility: 0.0175
Next Token : let, Posbility: 0.9531
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let
 score:False
Error type: noerr
---------------------------
Next Token :  int, Posbility: 0.0003
Next Token :  main, Posbility: 0.0005
Next Token :  , Posbility: 0.0137
Next Token :  count, Posbility: 0.0177
Next Token :  rec, Posbility: 0.9648
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  factor, Posbility: 0.0002
Next Token :  sum, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 0.0059
Next Token :  count, Posbility: 0.9883
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_
 score:False
Error type: noerr
---------------------------
Next Token : opt, Posbility: 0.0003
Next Token : float, Posbility: 0.0004
Next Token : list, Posbility: 0.0004
Next Token : all, Posbility: 0.0013
Next Token : int, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_int
 score:False
Error type: noerr
---------------------------
Next Token : 32, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints
 score:False
Error type: noerr
---------------------------
Next Token : ', Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_
 score:False
Error type: noerr
---------------------------
Next Token : optional, Posbility: 0.0019
Next Token : list, Posbility: 0.0024
Next Token : int, Posbility: 0.0031
Next Token : rec, Posbility: 0.0035
Next Token : opt, Posbility: 0.9648
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0001
Next Token : int, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : obj, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : op, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0008
Next Token :  =, Posbility: 0.0040
Next Token : _, Posbility: 0.0140
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function that returns the number of integer elements in a given list. *)
let rec count_ints xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints xs
let rec count_ints_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt xs
let rec count_ints_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt xs
let rec count_ints_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> 0
  | x :: xs -> 1 + count_ints_opt_opt_opt_opt_opt_opt_opt_opt xs
let rec count_ints_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>