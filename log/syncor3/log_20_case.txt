code:
 (* Write a  function to find smallest number in a list. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0076
Next Token :  list, Posbility: 0.0126
Next Token :  find, Posbility: 0.0820
Next Token :  , Posbility: 0.1963
Next Token :  rec, Posbility: 0.6055
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0171
Next Token :  search, Posbility: 0.0193
Next Token :  loop, Posbility: 0.0282
Next Token :  find, Posbility: 0.2080
Next Token :  , Posbility: 0.5664
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : aux, Posbility: 0.0073
Next Token : fi, Posbility: 0.0106
Next Token : f, Posbility: 0.0199
Next Token : min, Posbility: 0.3516
Next Token : smallest, Posbility: 0.4512
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0142
Next Token :  i, Posbility: 0.0161
Next Token :  =, Posbility: 0.1523
Next Token :  , Posbility: 0.2217
Next Token : _, Posbility: 0.5312
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0417
Next Token : helper, Posbility: 0.0537
Next Token : num, Posbility: 0.1133
Next Token : of, Posbility: 0.1289
Next Token : number, Posbility: 0.2402
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0369
Next Token :  l, Posbility: 0.0537
Next Token :  =, Posbility: 0.1138
Next Token : _, Posbility: 0.2412
Next Token :  , Posbility: 0.3965
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : nums, Posbility: 0.0615
Next Token : (, Posbility: 0.1147
Next Token : n, Posbility: 0.1475
Next Token : lst, Posbility: 0.1670
Next Token : x, Posbility: 0.2432
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0031
Next Token :  i, Posbility: 0.0040
Next Token :  , Posbility: 0.0620
Next Token :  =, Posbility: 0.3145
Next Token : s, Posbility: 0.5898
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0013
Next Token :   , Posbility: 0.0021
Next Token :  acc, Posbility: 0.0030
Next Token :  , Posbility: 0.0366
Next Token :  =, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0055
Next Token :  function, Posbility: 0.0063
Next Token :  match, Posbility: 0.0674
Next Token :  , Posbility: 0.0864
Next Token : 
, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0061
Next Token : 	, Posbility: 0.0129
Next Token :    , Posbility: 0.0166
Next Token :     , Posbility: 0.1396
Next Token :   , Posbility: 0.8008
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0055
Next Token : List, Posbility: 0.0079
Next Token : let, Posbility: 0.1240
Next Token : if, Posbility: 0.2041
Next Token : match, Posbility: 0.6289
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token :   , Posbility: 0.0008
Next Token :  !, Posbility: 0.0009
Next Token :  String, Posbility: 0.0075
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0019
Next Token : Seq, Posbility: 0.0022
Next Token : (, Posbility: 0.0052
Next Token : List, Posbility: 0.1045
Next Token : x, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  with, Posbility: 0.0008
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0003
Next Token :  @, Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 0.0009
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0023
Next Token :  , Posbility: 0.0043
Next Token :  [, Posbility: 0.0055
Next Token :  [], Posbility: 0.0525
Next Token : 
, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0007
Next Token :       , Posbility: 0.0018
Next Token :    , Posbility: 0.0026
Next Token :     , Posbility: 0.0752
Next Token :   , Posbility: 0.9180
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([], Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : [, Posbility: 0.0172
Next Token : [], Posbility: 0.0413
Next Token : |, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0011
Next Token :  nil, Posbility: 0.0065
Next Token :  , Posbility: 0.0137
Next Token :  [, Posbility: 0.0137
Next Token :  [], Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0039
Next Token :   , Posbility: 0.0050
Next Token :    , Posbility: 0.0065
Next Token :  =>, Posbility: 0.0107
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0002
Next Token : -, Posbility: 0.0003
Next Token : â†’, Posbility: 0.0003
Next Token : ::, Posbility: 0.0006
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0771
Next Token :  0, Posbility: 0.0771
Next Token :  fail, Posbility: 0.1270
Next Token :  error, Posbility: 0.2090
Next Token :  , Posbility: 0.3457
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Error, Posbility: 0.0280
Next Token : (), Posbility: 0.0359
Next Token : x, Posbility: 0.0405
Next Token : assert, Posbility: 0.0859
Next Token : raise, Posbility: 0.5586
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0104
Next Token : _, Posbility: 0.0248
Next Token :  ", Posbility: 0.0767
Next Token :  , Posbility: 0.3438
Next Token :  Not, Posbility: 0.4980
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not
 score:False
Error type: noerr
---------------------------
Next Token : In, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token :  found, Posbility: 0.0003
Next Token : found, Posbility: 0.0005
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_
 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0037
Next Token : Found, Posbility: 0.0047
Next Token : a, Posbility: 0.0078
Next Token : reached, Posbility: 0.0089
Next Token : found, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0349
Next Token : _, Posbility: 0.0396
Next Token :  ", Posbility: 0.0649
Next Token :  , Posbility: 0.0835
Next Token : 
, Posbility: 0.6992
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :     , Posbility: 0.0005
Next Token :  , Posbility: 0.0041
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : ;, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0027
Next Token :  a, Posbility: 0.0064
Next Token :  [], Posbility: 0.0173
Next Token :  [, Posbility: 0.2119
Next Token :  , Posbility: 0.7383
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0177
Next Token : head, Posbility: 0.0258
Next Token : hd, Posbility: 0.0425
Next Token : _, Posbility: 0.1904
Next Token : x, Posbility: 0.6641
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0032
Next Token : :, Posbility: 0.0098
Next Token : s, Posbility: 0.0265
Next Token : ::, Posbility: 0.4141
Next Token :  , Posbility: 0.5312
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0002
Next Token : if, Posbility: 0.0019
Next Token : :, Posbility: 0.0021
Next Token : ->, Posbility: 0.0159
Next Token : ::, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  new, Posbility: 0.0011
Next Token :  more, Posbility: 0.0019
Next Token :  [], Posbility: 0.0040
Next Token :  rest, Posbility: 0.1172
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : t, Posbility: 0.0243
Next Token : tail, Posbility: 0.0243
Next Token : y, Posbility: 0.0312
Next Token : _, Posbility: 0.1797
Next Token : x, Posbility: 0.7109
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 0.0009
Next Token : ', Posbility: 0.0067
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0347
Next Token : 1, Posbility: 0.0447
Next Token : _, Posbility: 0.0574
Next Token : ', Posbility: 0.0947
Next Token :  , Posbility: 0.6992
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : -, Posbility: 0.0002
Next Token : if, Posbility: 0.0022
Next Token : ::, Posbility: 0.0067
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0090
Next Token :  1, Posbility: 0.0090
Next Token :  match, Posbility: 0.0190
Next Token : 
, Posbility: 0.2988
Next Token :  , Posbility: 0.6328
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0166
Next Token : (, Posbility: 0.0240
Next Token : if, Posbility: 0.2598
Next Token : smallest, Posbility: 0.2930
Next Token : x, Posbility: 0.3320
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0400
Next Token :  <=, Posbility: 0.0513
Next Token : 

, Posbility: 0.2031
Next Token :  , Posbility: 0.2598
Next Token : 
, Posbility: 0.3789
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0082
Next Token : (, Posbility: 0.0295
Next Token : end, Posbility: 0.0908
Next Token :   , Posbility: 0.1924
Next Token : let, Posbility: 0.3184
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0094
Next Token :  find, Posbility: 0.0155
Next Token :  main, Posbility: 0.1011
Next Token :  , Posbility: 0.1299
Next Token :  rec, Posbility: 0.6602
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0171
Next Token :  loop, Posbility: 0.0317
Next Token :  rec, Posbility: 0.0525
Next Token :  find, Posbility: 0.0864
Next Token :  , Posbility: 0.5625
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : recursive, Posbility: 0.0049
Next Token : f, Posbility: 0.0070
Next Token : lowest, Posbility: 0.0070
Next Token : min, Posbility: 0.0150
Next Token : smallest, Posbility: 0.8164
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0007
Next Token :  k, Posbility: 0.0008
Next Token :  =, Posbility: 0.0021
Next Token :  , Posbility: 0.0178
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0098
Next Token : list, Posbility: 0.0111
Next Token : numbers, Posbility: 0.0111
Next Token : of, Posbility: 0.0126
Next Token : number, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0184
Next Token : 2, Posbility: 0.0305
Next Token : ', Posbility: 0.1064
Next Token :  , Posbility: 0.2891
Next Token : _, Posbility: 0.4766
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0498
Next Token : iter, Posbility: 0.0564
Next Token : aux, Posbility: 0.0564
Next Token : list, Posbility: 0.0820
Next Token : rec, Posbility: 0.1973
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0114
Next Token : _, Posbility: 0.0146
Next Token :  =, Posbility: 0.0449
Next Token : urse, Posbility: 0.0947
Next Token :  , Posbility: 0.7969
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0021
Next Token : n, Posbility: 0.0035
Next Token : ::, Posbility: 0.0045
Next Token : (, Posbility: 0.0107
Next Token : x, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token :  in, Posbility: 0.0003
Next Token :  , Posbility: 0.0024
Next Token :  =, Posbility: 0.0109
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0009
Next Token : _, Posbility: 0.0024
Next Token :  acc, Posbility: 0.0039
Next Token :  , Posbility: 0.0288
Next Token :  =, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0007
Next Token : 

, Posbility: 0.0007
Next Token :  match, Posbility: 0.0028
Next Token :  , Posbility: 0.1055
Next Token : 
, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0010
Next Token : let, Posbility: 0.0017
Next Token :    , Posbility: 0.0024
Next Token :     , Posbility: 0.0085
Next Token :   , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0130
Next Token : if, Posbility: 0.1089
Next Token : let, Posbility: 0.1582
Next Token : smallest, Posbility: 0.2305
Next Token : match, Posbility: 0.4316
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  !, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Small, Posbility: 0.0003
Next Token : List, Posbility: 0.0009
Next Token : (, Posbility: 0.0024
Next Token : smallest, Posbility: 0.0178
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  with, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0002
Next Token : ., Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 0.0006
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0003
Next Token :  nil, Posbility: 0.0003
Next Token :  [, Posbility: 0.0107
Next Token :  , Posbility: 0.0177
Next Token :  [], Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token :   , Posbility: 0.0005
Next Token :  =>, Posbility: 0.0019
Next Token :  |, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0100
Next Token :  fail, Posbility: 0.0100
Next Token :  None, Posbility: 0.0165
Next Token : 
, Posbility: 0.0272
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0132
Next Token : x, Posbility: 0.0315
Next Token : return, Posbility: 0.0520
Next Token : smallest, Posbility: 0.0520
Next Token : raise, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  ", Posbility: 0.0005
Next Token : _, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  Not, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  found, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : empty, Posbility: 0.0000
Next Token : Found, Posbility: 0.0000
Next Token : done, Posbility: 0.0001
Next Token : found, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token :  , Posbility: 0.0012
Next Token :  |, Posbility: 0.0013
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : else, Posbility: 0.0002
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0023
Next Token :  0, Posbility: 0.0106
Next Token :  [, Posbility: 0.0135
Next Token :  [], Posbility: 0.0135
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0026
Next Token : (, Posbility: 0.0042
Next Token : head, Posbility: 0.0148
Next Token : _, Posbility: 0.0515
Next Token : x, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0006
Next Token :  |, Posbility: 0.0013
Next Token : s, Posbility: 0.0027
Next Token : ::, Posbility: 0.0369
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token : x, Posbility: 0.0004
Next Token : :, Posbility: 0.0017
Next Token : ->, Posbility: 0.0028
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  0, Posbility: 0.0003
Next Token :  [, Posbility: 0.0007
Next Token :  [], Posbility: 0.0025
Next Token :  rest, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : tail, Posbility: 0.0015
Next Token : y, Posbility: 0.0017
Next Token : _, Posbility: 0.0228
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0013
Next Token : 
, Posbility: 0.0015
Next Token :  =>, Posbility: 0.0017
Next Token :  when, Posbility: 0.0178
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : -, Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token : if, Posbility: 0.0010
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0046
Next Token :  {, Posbility: 0.0109
Next Token :  match, Posbility: 0.0383
Next Token : 
, Posbility: 0.4648
Next Token :  , Posbility: 0.4648
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0303
Next Token : 
, Posbility: 0.0388
Next Token : x, Posbility: 0.1196
Next Token : if, Posbility: 0.1357
Next Token : smallest, Posbility: 0.6094
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  number, Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token : (, Posbility: 0.0007
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_
 score:False
Error type: noerr
---------------------------
Next Token : of, Posbility: 0.0000
Next Token : num, Posbility: 0.0001
Next Token : numbers, Posbility: 0.0001
Next Token : rec, Posbility: 0.0002
Next Token : number, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0054
Next Token :  rec, Posbility: 0.0089
Next Token : (, Posbility: 0.0089
Next Token :  , Posbility: 0.4844
Next Token : _, Posbility: 0.4844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : recursive, Posbility: 0.0002
Next Token : helper, Posbility: 0.0004
Next Token : iter, Posbility: 0.0005
Next Token : rec, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0016
Next Token :  [, Posbility: 0.0018
Next Token : _, Posbility: 0.0048
Next Token : (, Posbility: 0.0669
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0002
Next Token : tail, Posbility: 0.0004
Next Token : ([, Posbility: 0.0007
Next Token : (, Posbility: 0.2676
Next Token : x, Posbility: 0.7266
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec x
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0003
Next Token : 

, Posbility: 0.0004
Next Token : 
, Posbility: 0.0024
Next Token :  , Posbility: 0.0140
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0056
Next Token : ), Posbility: 0.0135
Next Token :  , Posbility: 0.0254
Next Token : 

, Posbility: 0.1875
Next Token : 
, Posbility: 0.7422
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0123
Next Token : end, Posbility: 0.0228
Next Token :   , Posbility: 0.0400
Next Token : (, Posbility: 0.0454
Next Token : let, Posbility: 0.4316
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0057
Next Token :  main, Posbility: 0.0327
Next Token :  find, Posbility: 0.0371
Next Token :  , Posbility: 0.1885
Next Token :  rec, Posbility: 0.6602
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0085
Next Token :  loop, Posbility: 0.0160
Next Token :  rec, Posbility: 0.0182
Next Token :  find, Posbility: 0.0493
Next Token :  , Posbility: 0.7695
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : minimal, Posbility: 0.0029
Next Token : recursive, Posbility: 0.0033
Next Token : lowest, Posbility: 0.0062
Next Token : min, Posbility: 0.0080
Next Token : smallest, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token :  =, Posbility: 0.0008
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : num, Posbility: 0.0013
Next Token : numbers, Posbility: 0.0021
Next Token : of, Posbility: 0.0027
Next Token : rec, Posbility: 0.0040
Next Token : number, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0079
Next Token : ', Posbility: 0.0115
Next Token : 2, Posbility: 0.0148
Next Token :  , Posbility: 0.0354
Next Token : _, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0337
Next Token : opt, Posbility: 0.0806
Next Token : loop, Posbility: 0.0913
Next Token : rec, Posbility: 0.0913
Next Token : iter, Posbility: 0.4629
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0067
Next Token : _, Posbility: 0.0161
Next Token :  =, Posbility: 0.0439
Next Token : ative, Posbility: 0.1055
Next Token :  , Posbility: 0.7773
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0013
Next Token : lst, Posbility: 0.0019
Next Token : (, Posbility: 0.0045
Next Token : f, Posbility: 0.0084
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0009
Next Token :  acc, Posbility: 0.0021
Next Token :  iter, Posbility: 0.0035
Next Token :  , Posbility: 0.0178
Next Token :  =, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0004
Next Token :   , Posbility: 0.0004
Next Token :  match, Posbility: 0.0057
Next Token :  , Posbility: 0.0258
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0004
Next Token :    , Posbility: 0.0017
Next Token : let, Posbility: 0.0017
Next Token :     , Posbility: 0.0059
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0140
Next Token : try, Posbility: 0.0140
Next Token : if, Posbility: 0.0232
Next Token : let, Posbility: 0.1943
Next Token : match, Posbility: 0.6758
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  !, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  iter, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : smallest, Posbility: 0.0003
Next Token : Seq, Posbility: 0.0005
Next Token : (, Posbility: 0.0008
Next Token : List, Posbility: 0.0059
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  with, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0001
Next Token : ., Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  nil, Posbility: 0.0009
Next Token :  [, Posbility: 0.0040
Next Token :  , Posbility: 0.0109
Next Token :  [], Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  when, Posbility: 0.0002
Next Token :  =>, Posbility: 0.0003
Next Token :  |, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0015
Next Token :  None, Posbility: 0.0019
Next Token :  fail, Posbility: 0.0031
Next Token : 
, Posbility: 0.0040
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0010
Next Token : smallest, Posbility: 0.0012
Next Token : x, Posbility: 0.0019
Next Token : return, Posbility: 0.0052
Next Token : raise, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token :  , Posbility: 0.0004
Next Token :  Not, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  found, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_
 score:False
Error type: noerr
---------------------------
Next Token : empty, Posbility: 0.0000
Next Token : find, Posbility: 0.0000
Next Token : Found, Posbility: 0.0000
Next Token : done, Posbility: 0.0001
Next Token : found, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0002
Next Token : 

, Posbility: 0.0003
Next Token :  |, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : else, Posbility: 0.0001
Next Token : let, Posbility: 0.0004
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0007
Next Token :  0, Posbility: 0.0008
Next Token :  [], Posbility: 0.0107
Next Token :  [, Posbility: 0.0138
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0013
Next Token : (, Posbility: 0.0014
Next Token : head, Posbility: 0.0057
Next Token : _, Posbility: 0.0226
Next Token : x, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0003
Next Token :  |, Posbility: 0.0005
Next Token : s, Posbility: 0.0040
Next Token : ::, Posbility: 0.0123
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0002
Next Token : x, Posbility: 0.0004
Next Token : :, Posbility: 0.0010
Next Token : ->, Posbility: 0.0022
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  acc, Posbility: 0.0002
Next Token :  [, Posbility: 0.0004
Next Token :  [], Posbility: 0.0010
Next Token :  rest, Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0005
Next Token : tail, Posbility: 0.0012
Next Token : _, Posbility: 0.0124
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token : ', Posbility: 0.0005
Next Token :  when, Posbility: 0.0059
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0093
Next Token :  {, Posbility: 0.0120
Next Token :  match, Posbility: 0.0420
Next Token : 
, Posbility: 0.3965
Next Token :  , Posbility: 0.5117
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0530
Next Token : if, Posbility: 0.0601
Next Token : let, Posbility: 0.0601
Next Token : smallest, Posbility: 0.1846
Next Token : x, Posbility: 0.5039
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0081
Next Token :  , Posbility: 0.0596
Next Token : 

, Posbility: 0.1260
Next Token : s, Posbility: 0.1260
Next Token : 
, Posbility: 0.6406
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0171
Next Token : 

, Posbility: 0.0182
Next Token :   , Posbility: 0.0386
Next Token : (, Posbility: 0.0767
Next Token : let, Posbility: 0.6016
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0019
Next Token :  iter, Posbility: 0.0036
Next Token :  main, Posbility: 0.0099
Next Token :  , Posbility: 0.0732
Next Token :  rec, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  compare, Posbility: 0.0033
Next Token :  iter, Posbility: 0.0049
Next Token :  loop, Posbility: 0.0071
Next Token :  find, Posbility: 0.0117
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0010
Next Token : minimal, Posbility: 0.0013
Next Token : min, Posbility: 0.0019
Next Token : lowest, Posbility: 0.0024
Next Token : smallest, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  number, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0006
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : num, Posbility: 0.0006
Next Token : of, Posbility: 0.0010
Next Token : rec, Posbility: 0.0010
Next Token : numbers, Posbility: 0.0012
Next Token : number, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0010
Next Token : 2, Posbility: 0.0031
Next Token :  =, Posbility: 0.0065
Next Token :  , Posbility: 0.0138
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0243
Next Token : opt, Posbility: 0.0311
Next Token : list, Posbility: 0.0352
Next Token : rec, Posbility: 0.0400
Next Token : iter, Posbility: 0.7070
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0155
Next Token : ', Posbility: 0.0291
Next Token :  , Posbility: 0.1147
Next Token : 2, Posbility: 0.2754
Next Token : _, Posbility: 0.5156
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0188
Next Token : aux, Posbility: 0.0398
Next Token : tail, Posbility: 0.0581
Next Token : rec, Posbility: 0.1396
Next Token : opt, Posbility: 0.2598
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0020
Next Token : 1, Posbility: 0.0026
Next Token : _, Posbility: 0.0194
Next Token :  =, Posbility: 0.0220
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0003
Next Token : lst, Posbility: 0.0005
Next Token : f, Posbility: 0.0005
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0012
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  with, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 0.0059
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0075
Next Token :  match, Posbility: 0.0075
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0002
Next Token :    , Posbility: 0.0007
Next Token : let, Posbility: 0.0007
Next Token :     , Posbility: 0.0028
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : smallest, Posbility: 0.0017
Next Token : if, Posbility: 0.0069
Next Token : let, Posbility: 0.0310
Next Token : try, Posbility: 0.0452
Next Token : match, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0001
Next Token :  iter, Posbility: 0.0001
Next Token :  Optional, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : smallest, Posbility: 0.0007
Next Token : List, Posbility: 0.0036
Next Token : Option, Posbility: 0.0036
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0001
Next Token : ., Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  null, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0009
Next Token :  None, Posbility: 0.0024
Next Token :  , Posbility: 0.0066
Next Token :  [, Posbility: 0.0066
Next Token :  [], Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  then, Posbility: 0.0003
Next Token :  =>, Posbility: 0.0004
Next Token :  |, Posbility: 0.0046
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0077
Next Token :  none, Posbility: 0.0126
Next Token :  Some, Posbility: 0.0209
Next Token :  , Posbility: 0.2539
Next Token :  None, Posbility: 0.6875
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token :  else, Posbility: 0.0007
Next Token :  |, Posbility: 0.0010
Next Token : _, Posbility: 0.0010
Next Token :  , Posbility: 0.0022
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : else, Posbility: 0.0004
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0003
Next Token :  [], Posbility: 0.0004
Next Token :  [, Posbility: 0.0009
Next Token :  Some, Posbility: 0.0036
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : head, Posbility: 0.0005
Next Token : _, Posbility: 0.0085
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token : s, Posbility: 0.0005
Next Token : ::, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0002
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  rest, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : tail, Posbility: 0.0001
Next Token : _, Posbility: 0.0032
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  when, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  some, Posbility: 0.0099
Next Token :  match, Posbility: 0.0209
Next Token : 
, Posbility: 0.0938
Next Token :  , Posbility: 0.3262
Next Token :  Some, Posbility: 0.5391
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0012
Next Token :  ((, Posbility: 0.0014
Next Token : _, Posbility: 0.0026
Next Token : (, Posbility: 0.1631
Next Token :  , Posbility: 0.8281
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : min, Posbility: 0.0005
Next Token : lowest, Posbility: 0.0013
Next Token : smallest, Posbility: 0.1211
Next Token : (, Posbility: 0.3301
Next Token : x, Posbility: 0.5430
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0021
Next Token : ), Posbility: 0.0030
Next Token :  , Posbility: 0.0120
Next Token : 

, Posbility: 0.3105
Next Token : 
, Posbility: 0.6562
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0203
Next Token : 

, Posbility: 0.0260
Next Token : module, Posbility: 0.0403
Next Token : (, Posbility: 0.1318
Next Token : let, Posbility: 0.5938
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0018
Next Token :  iter, Posbility: 0.0026
Next Token :  main, Posbility: 0.0081
Next Token :  , Posbility: 0.0364
Next Token :  rec, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0034
Next Token :  loop, Posbility: 0.0038
Next Token :  iter, Posbility: 0.0043
Next Token :  find, Posbility: 0.0092
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : min, Posbility: 0.0019
Next Token : minimal, Posbility: 0.0019
Next Token : map, Posbility: 0.0021
Next Token : lowest, Posbility: 0.0024
Next Token : smallest, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : num, Posbility: 0.0007
Next Token : rec, Posbility: 0.0007
Next Token : of, Posbility: 0.0013
Next Token : numbers, Posbility: 0.0013
Next Token : number, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0004
Next Token :  =, Posbility: 0.0010
Next Token : 2, Posbility: 0.0019
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0153
Next Token : list, Posbility: 0.0366
Next Token : rec, Posbility: 0.0469
Next Token : opt, Posbility: 0.1641
Next Token : iter, Posbility: 0.5703
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0012
Next Token : 1, Posbility: 0.0020
Next Token :  , Posbility: 0.0192
Next Token : 2, Posbility: 0.0408
Next Token : _, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0142
Next Token : ex, Posbility: 0.0182
Next Token : list, Posbility: 0.0265
Next Token : rec, Posbility: 0.0386
Next Token : opt, Posbility: 0.5312
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0071
Next Token : ', Posbility: 0.0527
Next Token :  , Posbility: 0.0679
Next Token : 2, Posbility: 0.2080
Next Token : _, Posbility: 0.6406
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : aux, Posbility: 0.0247
Next Token : tail, Posbility: 0.0280
Next Token : opt, Posbility: 0.1104
Next Token : ex, Posbility: 0.1104
Next Token : rec, Posbility: 0.1416
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : urs, Posbility: 0.0019
Next Token : _, Posbility: 0.0035
Next Token :  =, Posbility: 0.0083
Next Token : urse, Posbility: 0.0155
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : f, Posbility: 0.0008
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0009
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  acc, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  match, Posbility: 0.0009
Next Token :  , Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : let, Posbility: 0.0003
Next Token :    , Posbility: 0.0004
Next Token :     , Posbility: 0.0012
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0013
Next Token : if, Posbility: 0.0016
Next Token : smallest, Posbility: 0.0051
Next Token : let, Posbility: 0.0227
Next Token : match, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : smallest, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  none, Posbility: 0.0024
Next Token :  Some, Posbility: 0.0065
Next Token :  , Posbility: 0.0178
Next Token :  None, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : head, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0017
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : ::, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  rest, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  when, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0061
Next Token :  match, Posbility: 0.0275
Next Token : 
, Posbility: 0.0747
Next Token :  Some, Posbility: 0.3340
Next Token :  , Posbility: 0.5508
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0037
Next Token : let, Posbility: 0.0061
Next Token : if, Posbility: 0.0167
Next Token : x, Posbility: 0.0454
Next Token : smallest, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  number, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_
 score:False
Error type: noerr
---------------------------
Next Token : iter, Posbility: 0.0000
Next Token : value, Posbility: 0.0000
Next Token : numbers, Posbility: 0.0000
Next Token : num, Posbility: 0.0001
Next Token : number, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number
 score:False
Error type: noerr
---------------------------
Next Token :  rec, Posbility: 0.0001
Next Token :  iter, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_
 score:False
Error type: noerr
---------------------------
Next Token : iterator, Posbility: 0.0000
Next Token : it, Posbility: 0.0001
Next Token : opt, Posbility: 0.0009
Next Token : rec, Posbility: 0.0474
Next Token : iter, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_
 score:False
Error type: noerr
---------------------------
Next Token : iter, Posbility: 0.0000
Next Token : recursive, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : rec, Posbility: 0.0085
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0009
Next Token :  , Posbility: 0.0229
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : re, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : recursive, Posbility: 0.0001
Next Token : iter, Posbility: 0.0003
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token : _, Posbility: 0.0012
Next Token : (, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : smallest, Posbility: 0.0000
Next Token : tail, Posbility: 0.0000
Next Token : (, Posbility: 0.0085
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0014
Next Token :  +, Posbility: 0.0038
Next Token :  , Posbility: 0.0055
Next Token : 

, Posbility: 0.2637
Next Token : 
, Posbility: 0.7148
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0121
Next Token : 

, Posbility: 0.0156
Next Token : module, Posbility: 0.0227
Next Token : (, Posbility: 0.1387
Next Token : let, Posbility: 0.5469
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0052
Next Token :  iter, Posbility: 0.0076
Next Token :  main, Posbility: 0.0086
Next Token :  , Posbility: 0.0723
Next Token :  rec, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0023
Next Token :  loop, Posbility: 0.0034
Next Token :  iter, Posbility: 0.0039
Next Token :  find, Posbility: 0.0093
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0015
Next Token : minimal, Posbility: 0.0017
Next Token : min, Posbility: 0.0021
Next Token : lowest, Posbility: 0.0024
Next Token : smallest, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  number, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0003
Next Token : num, Posbility: 0.0005
Next Token : numbers, Posbility: 0.0009
Next Token : of, Posbility: 0.0012
Next Token : number, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0005
Next Token :  =, Posbility: 0.0007
Next Token : 2, Posbility: 0.0013
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0080
Next Token : list, Posbility: 0.0248
Next Token : rec, Posbility: 0.0317
Next Token : opt, Posbility: 0.0977
Next Token : iter, Posbility: 0.7227
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0007
Next Token : opt, Posbility: 0.0007
Next Token :  , Posbility: 0.0074
Next Token : 2, Posbility: 0.0108
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0040
Next Token : list, Posbility: 0.0085
Next Token : iter, Posbility: 0.0096
Next Token : rec, Posbility: 0.0229
Next Token : opt, Posbility: 0.8633
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0016
Next Token : 1, Posbility: 0.0018
Next Token :  , Posbility: 0.0195
Next Token : 2, Posbility: 0.0284
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0286
Next Token : tail, Posbility: 0.0366
Next Token : opt, Posbility: 0.1128
Next Token : iter, Posbility: 0.1641
Next Token : rec, Posbility: 0.3477
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0165
Next Token : ', Posbility: 0.0396
Next Token :  , Posbility: 0.0947
Next Token : 2, Posbility: 0.2002
Next Token : _, Posbility: 0.6172
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0168
Next Token : iter, Posbility: 0.0190
Next Token : ex, Posbility: 0.0315
Next Token : tail, Posbility: 0.0403
Next Token : opt, Posbility: 0.4902
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0029
Next Token : 
, Posbility: 0.0054
Next Token : _, Posbility: 0.0242
Next Token :  =, Posbility: 0.0398
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : f, Posbility: 0.0003
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  match, Posbility: 0.0008
Next Token :  , Posbility: 0.0010
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0012
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0007
Next Token : smallest, Posbility: 0.0022
Next Token : try, Posbility: 0.0028
Next Token : let, Posbility: 0.0059
Next Token : match, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Option, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : smallest, Posbility: 0.0010
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  with, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0001
Next Token :  None, Posbility: 0.0003
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 0.0019
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  |, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0022
Next Token :  none, Posbility: 0.0022
Next Token :  , Posbility: 0.0447
Next Token :  Some, Posbility: 0.0447
Next Token :  None, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0006
Next Token : ., Posbility: 0.0036
Next Token :  , Posbility: 0.0040
Next Token :  |, Posbility: 0.0040
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  [], Posbility: 0.0004
Next Token :  Some, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : head, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0022
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  rest, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0012
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  when, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  some, Posbility: 0.0045
Next Token : 
, Posbility: 0.0337
Next Token :  match, Posbility: 0.0337
Next Token :  , Posbility: 0.2480
Next Token :  Some, Posbility: 0.6758
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0004
Next Token :  Some, Posbility: 0.0010
Next Token : _, Posbility: 0.0024
Next Token : (, Posbility: 0.0075
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : minimal, Posbility: 0.0003
Next Token : lowest, Posbility: 0.0007
Next Token : (, Posbility: 0.1060
Next Token : smallest, Posbility: 0.1060
Next Token : x, Posbility: 0.7852
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0013
Next Token : , Posbility: 0.0017
Next Token :  , Posbility: 0.0053
Next Token : 

, Posbility: 0.2871
Next Token : 
, Posbility: 0.6914
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0144
Next Token : 

, Posbility: 0.0209
Next Token : module, Posbility: 0.0344
Next Token : (, Posbility: 0.1064
Next Token : let, Posbility: 0.6523
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0036
Next Token :  iter, Posbility: 0.0060
Next Token :  main, Posbility: 0.0112
Next Token :  , Posbility: 0.0645
Next Token :  rec, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0023
Next Token :  loop, Posbility: 0.0030
Next Token :  iter, Posbility: 0.0039
Next Token :  find, Posbility: 0.0072
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : min, Posbility: 0.0015
Next Token : minimal, Posbility: 0.0015
Next Token : map, Posbility: 0.0017
Next Token : lowest, Posbility: 0.0017
Next Token : smallest, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0004
Next Token : num, Posbility: 0.0005
Next Token : numbers, Posbility: 0.0010
Next Token : of, Posbility: 0.0013
Next Token : number, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0003
Next Token :  =, Posbility: 0.0007
Next Token : 2, Posbility: 0.0010
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0067
Next Token : list, Posbility: 0.0232
Next Token : rec, Posbility: 0.0339
Next Token : opt, Posbility: 0.0630
Next Token : iter, Posbility: 0.7695
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0003
Next Token : 3, Posbility: 0.0004
Next Token : 2, Posbility: 0.0052
Next Token :  , Posbility: 0.0066
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0031
Next Token : list, Posbility: 0.0096
Next Token : iter, Posbility: 0.0109
Next Token : rec, Posbility: 0.0297
Next Token : opt, Posbility: 0.8672
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0006
Next Token :  =, Posbility: 0.0011
Next Token : 2, Posbility: 0.0084
Next Token :  , Posbility: 0.0109
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0082
Next Token : list, Posbility: 0.0136
Next Token : iter, Posbility: 0.0476
Next Token : opt, Posbility: 0.1885
Next Token : rec, Posbility: 0.5781
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0008
Next Token : 1, Posbility: 0.0009
Next Token : 2, Posbility: 0.0074
Next Token :  , Posbility: 0.0123
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : none, Posbility: 0.0038
Next Token : list, Posbility: 0.0049
Next Token : iter, Posbility: 0.0062
Next Token : rec, Posbility: 0.0132
Next Token : opt, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0039
Next Token :  =, Posbility: 0.0063
Next Token :  , Posbility: 0.0471
Next Token : 2, Posbility: 0.0996
Next Token : _, Posbility: 0.8320
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ex, Posbility: 0.0238
Next Token : aux, Posbility: 0.0270
Next Token : iter, Posbility: 0.0393
Next Token : rec, Posbility: 0.1064
Next Token : opt, Posbility: 0.2891
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0048
Next Token : 2, Posbility: 0.0079
Next Token : _, Posbility: 0.0147
Next Token :  =, Posbility: 0.0400
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : (), Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  match, Posbility: 0.0008
Next Token :  , Posbility: 0.0010
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : try, Posbility: 0.0008
Next Token : smallest, Posbility: 0.0022
Next Token : let, Posbility: 0.0028
Next Token : match, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : smallest, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  |, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0003
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 0.0066
Next Token :  Some, Posbility: 0.0066
Next Token :  None, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : ., Posbility: 0.0010
Next Token :  |, Posbility: 0.0012
Next Token :  , Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  [], Posbility: 0.0003
Next Token :  Some, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : head, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0013
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  when, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  some, Posbility: 0.0023
Next Token : 
, Posbility: 0.0062
Next Token :  match, Posbility: 0.0170
Next Token :  , Posbility: 0.0461
Next Token :  Some, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  Some, Posbility: 0.0006
Next Token : (, Posbility: 0.0006
Next Token : _, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : lowest, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : smallest, Posbility: 0.0066
Next Token : (, Posbility: 0.0178
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0011
Next Token : , Posbility: 0.0026
Next Token :  , Posbility: 0.0033
Next Token : 

, Posbility: 0.2637
Next Token : 
, Posbility: 0.7188
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0140
Next Token : and, Posbility: 0.0181
Next Token : module, Posbility: 0.0408
Next Token : (, Posbility: 0.1177
Next Token : let, Posbility: 0.6367
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0025
Next Token :  iter, Posbility: 0.0042
Next Token :  main, Posbility: 0.0070
Next Token :  , Posbility: 0.0581
Next Token :  rec, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0018
Next Token :  loop, Posbility: 0.0030
Next Token :  iter, Posbility: 0.0039
Next Token :  find, Posbility: 0.0056
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : min, Posbility: 0.0015
Next Token : lowest, Posbility: 0.0015
Next Token : map, Posbility: 0.0017
Next Token : minimal, Posbility: 0.0017
Next Token : smallest, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0003
Next Token : num, Posbility: 0.0004
Next Token : of, Posbility: 0.0009
Next Token : numbers, Posbility: 0.0009
Next Token : number, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0003
Next Token : 2, Posbility: 0.0009
Next Token :  =, Posbility: 0.0009
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0067
Next Token : list, Posbility: 0.0182
Next Token : rec, Posbility: 0.0386
Next Token : opt, Posbility: 0.0635
Next Token : iter, Posbility: 0.7734
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : 3, Posbility: 0.0003
Next Token : 2, Posbility: 0.0036
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0040
Next Token : list, Posbility: 0.0084
Next Token : iter, Posbility: 0.0138
Next Token : rec, Posbility: 0.0376
Next Token : opt, Posbility: 0.8555
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0005
Next Token :  =, Posbility: 0.0005
Next Token : 2, Posbility: 0.0036
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0039
Next Token : list, Posbility: 0.0093
Next Token : iter, Posbility: 0.0325
Next Token : opt, Posbility: 0.1865
Next Token : rec, Posbility: 0.6523
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token :  =, Posbility: 0.0003
Next Token : 2, Posbility: 0.0017
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0011
Next Token : list, Posbility: 0.0021
Next Token : iter, Posbility: 0.0039
Next Token : rec, Posbility: 0.0106
Next Token : opt, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token :  =, Posbility: 0.0012
Next Token : 2, Posbility: 0.0036
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0046
Next Token : none, Posbility: 0.0059
Next Token : iter, Posbility: 0.0059
Next Token : rec, Posbility: 0.0559
Next Token : opt, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0042
Next Token :  =, Posbility: 0.0312
Next Token : 2, Posbility: 0.0457
Next Token :  , Posbility: 0.0967
Next Token : _, Posbility: 0.8086
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0156
Next Token : aux, Posbility: 0.0177
Next Token : iter, Posbility: 0.0479
Next Token : rec, Posbility: 0.1895
Next Token : opt, Posbility: 0.4023
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0018
Next Token : 2, Posbility: 0.0023
Next Token : _, Posbility: 0.0118
Next Token :  =, Posbility: 0.0413
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (), Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  None, Posbility: 0.0002
Next Token :  , Posbility: 0.0015
Next Token :  match, Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : let, Posbility: 0.0009
Next Token : smallest, Posbility: 0.0013
Next Token : match, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : smallest, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  0, Posbility: 0.0003
Next Token :  Some, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  None, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0003
Next Token : end, Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0010
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0009
Next Token :  match, Posbility: 0.0009
Next Token : 
, Posbility: 0.0015
Next Token :  , Posbility: 0.0067
Next Token :  Some, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : smallest, Posbility: 0.0001
Next Token : (, Posbility: 0.0012
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0005
Next Token :  , Posbility: 0.0015
Next Token : , Posbility: 0.0025
Next Token : 

, Posbility: 0.2207
Next Token : 
, Posbility: 0.7695
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0083
Next Token : and, Posbility: 0.0187
Next Token : module, Posbility: 0.0327
Next Token : (, Posbility: 0.0894
Next Token : let, Posbility: 0.7461
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0016
Next Token :  iter, Posbility: 0.0029
Next Token :  main, Posbility: 0.0043
Next Token :  , Posbility: 0.0522
Next Token :  rec, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0011
Next Token :  loop, Posbility: 0.0019
Next Token :  iter, Posbility: 0.0027
Next Token :  find, Posbility: 0.0039
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0010
Next Token : f, Posbility: 0.0012
Next Token : lowest, Posbility: 0.0012
Next Token : minimal, Posbility: 0.0013
Next Token : smallest, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0003
Next Token : num, Posbility: 0.0004
Next Token : numbers, Posbility: 0.0010
Next Token : of, Posbility: 0.0012
Next Token : number, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0003
Next Token : 2, Posbility: 0.0006
Next Token :  =, Posbility: 0.0008
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0048
Next Token : list, Posbility: 0.0146
Next Token : rec, Posbility: 0.0398
Next Token : opt, Posbility: 0.0579
Next Token : iter, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : 3, Posbility: 0.0003
Next Token : 2, Posbility: 0.0028
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0041
Next Token : list, Posbility: 0.0046
Next Token : iter, Posbility: 0.0126
Next Token : rec, Posbility: 0.0344
Next Token : opt, Posbility: 0.8867
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0003
Next Token :  =, Posbility: 0.0005
Next Token : 2, Posbility: 0.0017
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0023
Next Token : list, Posbility: 0.0056
Next Token : iter, Posbility: 0.0172
Next Token : opt, Posbility: 0.1631
Next Token : rec, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0004
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0006
Next Token : list, Posbility: 0.0007
Next Token : iter, Posbility: 0.0021
Next Token : rec, Posbility: 0.0075
Next Token : opt, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0006
Next Token : optional, Posbility: 0.0008
Next Token : iter, Posbility: 0.0011
Next Token : rec, Posbility: 0.0178
Next Token : opt, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0005
Next Token : 2, Posbility: 0.0010
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0011
Next Token : none, Posbility: 0.0019
Next Token : iter, Posbility: 0.0024
Next Token : rec, Posbility: 0.0176
Next Token : opt, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0010
Next Token : 2, Posbility: 0.0075
Next Token :  =, Posbility: 0.0159
Next Token :  , Posbility: 0.1035
Next Token : _, Posbility: 0.8672
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0064
Next Token : none, Posbility: 0.0106
Next Token : iter, Posbility: 0.0175
Next Token : rec, Posbility: 0.1138
Next Token : opt, Posbility: 0.7422
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0005
Next Token : 
, Posbility: 0.0013
Next Token : _, Posbility: 0.0108
Next Token :  =, Posbility: 0.0156
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (), Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 0.0006
Next Token :  match, Posbility: 0.0015
Next Token :  , Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0004
Next Token : smallest, Posbility: 0.0006
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : smallest, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  Some, Posbility: 0.0006
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : end, Posbility: 0.0004
Next Token : let, Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  None, Posbility: 0.0004
Next Token :  , Posbility: 0.0015
Next Token :  Some, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : smallest, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token : , Posbility: 0.0022
Next Token : 

, Posbility: 0.2002
Next Token : 
, Posbility: 0.7930
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0084
Next Token : and, Posbility: 0.0148
Next Token : module, Posbility: 0.0244
Next Token : (, Posbility: 0.0664
Next Token : let, Posbility: 0.8086
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0014
Next Token :  iter, Posbility: 0.0029
Next Token :  main, Posbility: 0.0055
Next Token :  , Posbility: 0.0586
Next Token :  rec, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0008
Next Token :  loop, Posbility: 0.0017
Next Token :  iter, Posbility: 0.0019
Next Token :  find, Posbility: 0.0024
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0009
Next Token : f, Posbility: 0.0012
Next Token : lowest, Posbility: 0.0012
Next Token : minimal, Posbility: 0.0013
Next Token : smallest, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0002
Next Token : num, Posbility: 0.0003
Next Token : numbers, Posbility: 0.0008
Next Token : of, Posbility: 0.0012
Next Token : number, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0002
Next Token : 2, Posbility: 0.0005
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0036
Next Token : list, Posbility: 0.0076
Next Token : rec, Posbility: 0.0264
Next Token : opt, Posbility: 0.0383
Next Token : iter, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : f, Posbility: 0.0002
Next Token : 2, Posbility: 0.0013
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0037
Next Token : option, Posbility: 0.0037
Next Token : iter, Posbility: 0.0079
Next Token : rec, Posbility: 0.0277
Next Token : opt, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  =, Posbility: 0.0005
Next Token : 2, Posbility: 0.0006
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0014
Next Token : list, Posbility: 0.0033
Next Token : iter, Posbility: 0.0170
Next Token : opt, Posbility: 0.1108
Next Token : rec, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0003
Next Token : optional, Posbility: 0.0004
Next Token : iter, Posbility: 0.0013
Next Token : rec, Posbility: 0.0046
Next Token : opt, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ____, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0002
Next Token : optional, Posbility: 0.0004
Next Token : iter, Posbility: 0.0005
Next Token : rec, Posbility: 0.0059
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0001
Next Token : iter, Posbility: 0.0003
Next Token : optional, Posbility: 0.0004
Next Token : rec, Posbility: 0.0025
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0007
Next Token : none, Posbility: 0.0008
Next Token : optional, Posbility: 0.0009
Next Token : rec, Posbility: 0.0059
Next Token : opt, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token : 2, Posbility: 0.0016
Next Token :  =, Posbility: 0.0055
Next Token :  , Posbility: 0.0596
Next Token : _, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0014
Next Token : none, Posbility: 0.0023
Next Token : iter, Posbility: 0.0030
Next Token : rec, Posbility: 0.0320
Next Token : opt, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : 
, Posbility: 0.0014
Next Token : _, Posbility: 0.0156
Next Token :  =, Posbility: 0.0177
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 0.0004
Next Token :  match, Posbility: 0.0009
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token : smallest, Posbility: 0.0002
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : smallest, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : end, Posbility: 0.0002
Next Token : let, Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: noerr
---------------------------
Next Token :  some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  None, Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : smallest, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : , Posbility: 0.0018
Next Token : 

, Posbility: 0.1641
Next Token : 
, Posbility: 0.8320
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0055
Next Token : and, Posbility: 0.0103
Next Token : module, Posbility: 0.0132
Next Token : (, Posbility: 0.0493
Next Token : let, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: noerr
---------------------------
Next Token :  test, Posbility: 0.0012
Next Token :  iter, Posbility: 0.0020
Next Token :  main, Posbility: 0.0062
Next Token :  , Posbility: 0.0522
Next Token :  rec, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  compare, Posbility: 0.0009
Next Token :  loop, Posbility: 0.0015
Next Token :  iter, Posbility: 0.0017
Next Token :  find, Posbility: 0.0019
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : min, Posbility: 0.0007
Next Token : f, Posbility: 0.0010
Next Token : minimal, Posbility: 0.0012
Next Token : lowest, Posbility: 0.0012
Next Token : smallest, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  number, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_
 score:False
Error type: noerr
---------------------------
Next Token : num, Posbility: 0.0002
Next Token : rec, Posbility: 0.0002
Next Token : numbers, Posbility: 0.0006
Next Token : of, Posbility: 0.0012
Next Token : number, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number
 score:False
Error type: noerr
---------------------------
Next Token : _2_, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token :  =, Posbility: 0.0004
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_
 score:False
Error type: noerr
---------------------------
Next Token : loop, Posbility: 0.0025
Next Token : list, Posbility: 0.0077
Next Token : rec, Posbility: 0.0270
Next Token : opt, Posbility: 0.0305
Next Token : iter, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : f, Posbility: 0.0002
Next Token : 2, Posbility: 0.0009
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0018
Next Token : option, Posbility: 0.0024
Next Token : iter, Posbility: 0.0039
Next Token : rec, Posbility: 0.0175
Next Token : opt, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : 2, Posbility: 0.0004
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : recursive, Posbility: 0.0015
Next Token : list, Posbility: 0.0024
Next Token : iter, Posbility: 0.0138
Next Token : opt, Posbility: 0.0898
Next Token : rec, Posbility: 0.8555
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_
 score:False
Error type: noerr
---------------------------
Next Token : seq, Posbility: 0.0003
Next Token : optional, Posbility: 0.0003
Next Token : iter, Posbility: 0.0010
Next Token : rec, Posbility: 0.0028
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt
 score:False
Error type: noerr
---------------------------
Next Token : ____, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_
 score:False
Error type: noerr
---------------------------
Next Token : seq, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : iter, Posbility: 0.0004
Next Token : rec, Posbility: 0.0036
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : ____, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : optional, Posbility: 0.0003
Next Token : rec, Posbility: 0.0010
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : iter, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0003
Next Token : rec, Posbility: 0.0007
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0001
Next Token : none, Posbility: 0.0002
Next Token : optional, Posbility: 0.0006
Next Token : rec, Posbility: 0.0012
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token : 2, Posbility: 0.0009
Next Token :  =, Posbility: 0.0034
Next Token :  , Posbility: 0.0530
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : optional, Posbility: 0.0008
Next Token : none, Posbility: 0.0009
Next Token : iter, Posbility: 0.0013
Next Token : rec, Posbility: 0.0177
Next Token : opt, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : 
, Posbility: 0.0027
Next Token :  =, Posbility: 0.0198
Next Token : _, Posbility: 0.0225
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
 score:False
Error type: noerr
---------------------------
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 0.0002
Next Token :  match, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : smallest, Posbility: 0.0001
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : smallest, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: noerr
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : end, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: noerr
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: noerr
---------------------------
Next Token :  some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  None, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : smallest, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : , Posbility: 0.0019
Next Token : 

, Posbility: 0.1475
Next Token : 
, Posbility: 0.8477
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0045
Next Token : and, Posbility: 0.0074
Next Token : module, Posbility: 0.0101
Next Token : (, Posbility: 0.0352
Next Token : let, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: noerr
---------------------------
Next Token :  acc, Posbility: 0.0010
Next Token :  iter, Posbility: 0.0020
Next Token :  main, Posbility: 0.0038
Next Token :  , Posbility: 0.0464
Next Token :  rec, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  compare, Posbility: 0.0007
Next Token :  loop, Posbility: 0.0008
Next Token :  find, Posbility: 0.0012
Next Token :  iter, Posbility: 0.0012
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : min, Posbility: 0.0006
Next Token : lowest, Posbility: 0.0009
Next Token : f, Posbility: 0.0010
Next Token : minimal, Posbility: 0.0010
Next Token : smallest, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  number, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_
 score:False
Error type: noerr
---------------------------
Next Token : num, Posbility: 0.0002
Next Token : rec, Posbility: 0.0002
Next Token : numbers, Posbility: 0.0006
Next Token : of, Posbility: 0.0012
Next Token : number, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number
 score:False
Error type: noerr
---------------------------
Next Token : _2_, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_
 score:False
Error type: noerr
---------------------------
Next Token : loop, Posbility: 0.0018
Next Token : list, Posbility: 0.0048
Next Token : opt, Posbility: 0.0216
Next Token : rec, Posbility: 0.0216
Next Token : iter, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0005
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0018
Next Token : option, Posbility: 0.0021
Next Token : iter, Posbility: 0.0050
Next Token : rec, Posbility: 0.0222
Next Token : opt, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : recursive, Posbility: 0.0011
Next Token : list, Posbility: 0.0017
Next Token : iter, Posbility: 0.0078
Next Token : opt, Posbility: 0.0579
Next Token : rec, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0001
Next Token : seq, Posbility: 0.0001
Next Token : iter, Posbility: 0.0005
Next Token : rec, Posbility: 0.0015
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt
 score:False
Error type: noerr
---------------------------
Next Token : ____, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : iter, Posbility: 0.0002
Next Token : rec, Posbility: 0.0019
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : ____, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : rec, Posbility: 0.0010
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : iter, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : rec, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : iter, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : rec, Posbility: 0.0003
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : none, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0004
Next Token : rec, Posbility: 0.0006
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token : 2, Posbility: 0.0005
Next Token :  =, Posbility: 0.0039
Next Token :  , Posbility: 0.0471
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : some, Posbility: 0.0005
Next Token : none, Posbility: 0.0006
Next Token : iter, Posbility: 0.0006
Next Token : rec, Posbility: 0.0109
Next Token : opt, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 
, Posbility: 0.0031
Next Token :  =, Posbility: 0.0074
Next Token : _, Posbility: 0.0157
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find smallest number in a list. *)
let rec smallest_number xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_rec xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> smallest_number_rec xs
let rec smallest_number_iter xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec smallest_number_iter_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec xs =
  match xs with
  | [] -> None
  | x :: xs -> smallest_number_iter_opt_rec xs
let rec smallest_number_iter_opt_rec_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec smallest_number_iter_opt_rec_opt_opt_opt_opt_opt_opt_opt xs =
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>