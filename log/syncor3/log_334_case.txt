code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  remove, Posbility: 0.0097
Next Token :  zero, Posbility: 0.0811
Next Token :  , Posbility: 0.1514
Next Token :  move, Posbility: 0.1943
Next Token :  rec, Posbility: 0.4668
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0255
Next Token :  remove, Posbility: 0.0289
Next Token :  zero, Posbility: 0.1670
Next Token :  move, Posbility: 0.2754
Next Token :  , Posbility: 0.2754
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0283
Next Token : tail, Posbility: 0.0322
Next Token : zeros, Posbility: 0.0466
Next Token : rev, Posbility: 0.0601
Next Token : fold, Posbility: 0.0771
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : l, Posbility: 0.0703
Next Token :  =, Posbility: 0.0898
Next Token :  , Posbility: 0.0898
Next Token : r, Posbility: 0.0898
Next Token : _, Posbility: 0.5195
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0396
Next Token : right, Posbility: 0.0574
Next Token : up, Posbility: 0.0574
Next Token : left, Posbility: 0.0737
Next Token : zero, Posbility: 0.2910
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zero
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0046
Next Token : _, Posbility: 0.0928
Next Token :  , Posbility: 0.0928
Next Token :  =, Posbility: 0.0928
Next Token : es, Posbility: 0.6836
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0214
Next Token : _, Posbility: 0.0581
Next Token :  =, Posbility: 0.1230
Next Token :  l, Posbility: 0.1230
Next Token :  , Posbility: 0.5508
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0718
Next Token : z, Posbility: 0.0815
Next Token : (, Posbility: 0.1187
Next Token : lst, Posbility: 0.1729
Next Token : x, Posbility: 0.1953
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0198
Next Token :  acc, Posbility: 0.0688
Next Token :  =, Posbility: 0.1875
Next Token :  , Posbility: 0.2734
Next Token : s, Posbility: 0.3516
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0047
Next Token :  l, Posbility: 0.0060
Next Token :  acc, Posbility: 0.0732
Next Token :  , Posbility: 0.1553
Next Token :  =, Posbility: 0.6953
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0039
Next Token :  function, Posbility: 0.0093
Next Token :  match, Posbility: 0.0474
Next Token :  , Posbility: 0.0884
Next Token : 
, Posbility: 0.8398
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0042
Next Token :    , Posbility: 0.0131
Next Token : 	, Posbility: 0.0131
Next Token :     , Posbility: 0.1406
Next Token :   , Posbility: 0.8086
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0049
Next Token : List, Posbility: 0.0405
Next Token : let, Posbility: 0.1250
Next Token : if, Posbility: 0.1611
Next Token : match, Posbility: 0.6367
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0006
Next Token : 
, Posbility: 0.0007
Next Token :  !, Posbility: 0.0013
Next Token :  String, Posbility: 0.0066
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0011
Next Token : Seq, Posbility: 0.0017
Next Token : (, Posbility: 0.0061
Next Token : List, Posbility: 0.0742
Next Token : x, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  with, Posbility: 0.0013
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 0.0005
Next Token :  @, Posbility: 0.0009
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0026
Next Token :  , Posbility: 0.0055
Next Token :  [, Posbility: 0.0080
Next Token :  [], Posbility: 0.0522
Next Token : 
, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0006
Next Token :       , Posbility: 0.0020
Next Token :    , Posbility: 0.0029
Next Token :     , Posbility: 0.0947
Next Token :   , Posbility: 0.8984
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Nil, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : [, Posbility: 0.0197
Next Token : [], Posbility: 0.0325
Next Token : |, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0014
Next Token :  nil, Posbility: 0.0104
Next Token :  [, Posbility: 0.0172
Next Token :  , Posbility: 0.0283
Next Token :  [], Posbility: 0.9375
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0050
Next Token :    , Posbility: 0.0064
Next Token :  |, Posbility: 0.0064
Next Token :  =>, Posbility: 0.0135
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0002
Next Token :  =>, Posbility: 0.0003
Next Token : â†’, Posbility: 0.0004
Next Token : ::, Posbility: 0.0015
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0019
Next Token :  [, Posbility: 0.0025
Next Token : 
, Posbility: 0.0087
Next Token :  , Posbility: 0.3691
Next Token :  [], Posbility: 0.6055
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0021
Next Token :   , Posbility: 0.0045
Next Token :  |, Posbility: 0.0083
Next Token :  , Posbility: 0.0121
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0041
Next Token :  acc, Posbility: 0.0041
Next Token :  [], Posbility: 0.0067
Next Token :  [, Posbility: 0.1738
Next Token :  , Posbility: 0.7773
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : hd, Posbility: 0.0211
Next Token : h, Posbility: 0.0306
Next Token : (, Posbility: 0.0393
Next Token : _, Posbility: 0.1553
Next Token : x, Posbility: 0.6992
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0026
Next Token : :, Posbility: 0.0195
Next Token : s, Posbility: 0.0679
Next Token : ::, Posbility: 0.3906
Next Token :  , Posbility: 0.5039
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0002
Next Token : ->, Posbility: 0.0012
Next Token : :, Posbility: 0.0025
Next Token : if, Posbility: 0.0059
Next Token : ::, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  acc, Posbility: 0.0028
Next Token :  zero, Posbility: 0.0045
Next Token :  [], Posbility: 0.0052
Next Token :  rest, Posbility: 0.1035
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : z, Posbility: 0.0121
Next Token : tail, Posbility: 0.0156
Next Token : y, Posbility: 0.0374
Next Token : _, Posbility: 0.0481
Next Token : x, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token : 0, Posbility: 0.0005
Next Token : ', Posbility: 0.0052
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0205
Next Token : _, Posbility: 0.0298
Next Token : ', Posbility: 0.0557
Next Token :  when, Posbility: 0.0811
Next Token :  , Posbility: 0.7656
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : -, Posbility: 0.0003
Next Token : ::, Posbility: 0.0031
Next Token : if, Posbility: 0.0109
Next Token : ->, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0107
Next Token :  match, Posbility: 0.0107
Next Token :  [, Posbility: 0.0177
Next Token : 
, Posbility: 0.3555
Next Token :  , Posbility: 0.5859
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0199
Next Token : (, Posbility: 0.0540
Next Token : x, Posbility: 0.2422
Next Token : fold, Posbility: 0.2422
Next Token : if, Posbility: 0.3984
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Not, Posbility: 0.0068
Next Token :  is, Posbility: 0.0144
Next Token :  String, Posbility: 0.0238
Next Token :  not, Posbility: 0.0347
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0026
Next Token : Is, Posbility: 0.0029
Next Token : Int, Posbility: 0.0167
Next Token : (, Posbility: 0.0403
Next Token : x, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =0, Posbility: 0.0032
Next Token : ., Posbility: 0.0042
Next Token :  , Posbility: 0.0145
Next Token :  ==, Posbility: 0.1768
Next Token :  =, Posbility: 0.7891
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token :  0.0, Posbility: 0.0009
Next Token :  , Posbility: 0.0009
Next Token :  0;, Posbility: 0.0009
Next Token :  0, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  &&, Posbility: 0.0005
Next Token :   , Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.0032
Next Token :  then, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0011
Next Token :  [, Posbility: 0.0106
Next Token : 
, Posbility: 0.0136
Next Token :  [], Posbility: 0.0175
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0003
Next Token : 
, Posbility: 0.0008
Next Token : (, Posbility: 0.0157
Next Token : x, Posbility: 0.1167
Next Token : fold, Posbility: 0.8633
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_
 score:False
Error type: noerr
---------------------------
Next Token : empty, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : zeros, Posbility: 0.0001
Next Token : one, Posbility: 0.0015
Next Token : zero, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zero
 score:False
Error type: noerr
---------------------------
Next Token : ess, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : es, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0004
Next Token :  [, Posbility: 0.0009
Next Token :  ~, Posbility: 0.0010
Next Token : (, Posbility: 0.0371
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes 
 score:False
Error type: noerr
---------------------------
Next Token : ([, Posbility: 0.0001
Next Token : ([], Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : (, Posbility: 0.1191
Next Token : x, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0021
Next Token :  , Posbility: 0.0034
Next Token :  |, Posbility: 0.0044
Next Token : 
, Posbility: 0.0415
Next Token :  else, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0010
Next Token : 
, Posbility: 0.0024
Next Token :  {, Posbility: 0.0136
Next Token :  [, Posbility: 0.3984
Next Token :  , Posbility: 0.5781
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0103
Next Token : fold, Posbility: 0.0133
Next Token : if, Posbility: 0.0361
Next Token : (, Posbility: 0.0981
Next Token : x, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : :, Posbility: 0.0006
Next Token : s, Posbility: 0.0093
Next Token : ::, Posbility: 0.0369
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : :, Posbility: 0.0008
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token : :, Posbility: 0.0006
Next Token : >, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : flatten, Posbility: 0.0000
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 0.0067
Next Token : fold, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold
 score:False
Error type: noerr
---------------------------
Next Token : ing, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ed, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_
 score:False
Error type: noerr
---------------------------
Next Token : two, Posbility: 0.0000
Next Token : empty, Posbility: 0.0000
Next Token : zeros, Posbility: 0.0000
Next Token : one, Posbility: 0.0001
Next Token : zero, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zero
 score:False
Error type: noerr
---------------------------
Next Token : ed, Posbility: 0.0000
Next Token : ess, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : es, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 0.0028
Next Token : (, Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes 
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0019
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes x
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0015
Next Token :  , Posbility: 0.0054
Next Token : ), Posbility: 0.0166
Next Token : 

, Posbility: 0.4844
Next Token : 
, Posbility: 0.4844
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0123
Next Token : ;, Posbility: 0.0332
Next Token : end, Posbility: 0.0583
Next Token :   , Posbility: 0.1494
Next Token : let, Posbility: 0.2793
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  main, Posbility: 0.0669
Next Token :  move, Posbility: 0.0972
Next Token :  zero, Posbility: 0.1602
Next Token :  , Posbility: 0.2061
Next Token :  rec, Posbility: 0.3398
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0300
Next Token :  remove, Posbility: 0.0300
Next Token :  move, Posbility: 0.1045
Next Token :  zero, Posbility: 0.1045
Next Token :  , Posbility: 0.4688
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0124
Next Token : reverse, Posbility: 0.0124
Next Token : rev, Posbility: 0.0124
Next Token : flatten, Posbility: 0.0140
Next Token : fold, Posbility: 0.6758
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0018
Next Token : r, Posbility: 0.0030
Next Token :  =, Posbility: 0.0038
Next Token :  , Posbility: 0.0464
Next Token : _, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0194
Next Token : one, Posbility: 0.0282
Next Token : non, Posbility: 0.0361
Next Token : zeros, Posbility: 0.0466
Next Token : zero, Posbility: 0.6406
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zero
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0005
Next Token : e, Posbility: 0.0015
Next Token :  , Posbility: 0.0040
Next Token : _, Posbility: 0.0109
Next Token : es, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0176
Next Token : 2, Posbility: 0.0613
Next Token :  , Posbility: 0.1011
Next Token : ', Posbility: 0.1660
Next Token : _, Posbility: 0.5820
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rev, Posbility: 0.0371
Next Token : list, Posbility: 0.0476
Next Token : aux, Posbility: 0.0476
Next Token : opt, Posbility: 0.0786
Next Token : rec, Posbility: 0.0889
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0051
Next Token : _, Posbility: 0.0084
Next Token :  =, Posbility: 0.0374
Next Token : urse, Posbility: 0.1670
Next Token :  , Posbility: 0.7500
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0019
Next Token : f, Posbility: 0.0027
Next Token : (), Posbility: 0.0027
Next Token : (, Posbility: 0.0065
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token : 0, Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token :  =, Posbility: 0.0140
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0023
Next Token :  l, Posbility: 0.0023
Next Token :  acc, Posbility: 0.0104
Next Token :  , Posbility: 0.0361
Next Token :  =, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0007
Next Token :   , Posbility: 0.0010
Next Token :  match, Posbility: 0.0052
Next Token :  , Posbility: 0.1177
Next Token : 
, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0006
Next Token : let, Posbility: 0.0015
Next Token :    , Posbility: 0.0017
Next Token :     , Posbility: 0.0067
Next Token :   , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0042
Next Token : fold, Posbility: 0.0189
Next Token : let, Posbility: 0.0659
Next Token : if, Posbility: 0.0850
Next Token : match, Posbility: 0.8047
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0001
Next Token : List, Posbility: 0.0004
Next Token : (, Posbility: 0.0006
Next Token : fold, Posbility: 0.0008
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  [], Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0009
Next Token :  nil, Posbility: 0.0009
Next Token :  [, Posbility: 0.0024
Next Token :  , Posbility: 0.0179
Next Token :  [], Posbility: 0.9766
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token :  =>, Posbility: 0.0005
Next Token :  |, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0009
Next Token : 
, Posbility: 0.0023
Next Token :  0, Posbility: 0.0023
Next Token :  , Posbility: 0.0469
Next Token :  [], Posbility: 0.9453
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :  as, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  |, Posbility: 0.0004
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0009
Next Token :  [], Posbility: 0.0023
Next Token :  [, Posbility: 0.0063
Next Token :  0, Posbility: 0.0466
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0008
Next Token : head, Posbility: 0.0039
Next Token : (, Posbility: 0.0050
Next Token : _, Posbility: 0.0287
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0009
Next Token : 0, Posbility: 0.0021
Next Token : s, Posbility: 0.0045
Next Token : ::, Posbility: 0.0096
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0003
Next Token : x, Posbility: 0.0006
Next Token : ->, Posbility: 0.0009
Next Token : :, Posbility: 0.0015
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0005
Next Token :  0, Posbility: 0.0012
Next Token :  rest, Posbility: 0.0019
Next Token :  [], Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0007
Next Token : fold, Posbility: 0.0008
Next Token : y, Posbility: 0.0017
Next Token : _, Posbility: 0.0075
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0007
Next Token : 
, Posbility: 0.0009
Next Token :  =>, Posbility: 0.0009
Next Token :  when, Posbility: 0.0140
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : if, Posbility: 0.0019
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0022
Next Token :  {, Posbility: 0.0035
Next Token :  match, Posbility: 0.0058
Next Token : 
, Posbility: 0.1172
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0148
Next Token : let, Posbility: 0.0148
Next Token : x, Posbility: 0.0403
Next Token : fold, Posbility: 0.1094
Next Token : if, Posbility: 0.8086
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0008
Next Token :  !, Posbility: 0.0010
Next Token :  is, Posbility: 0.0012
Next Token :  not, Posbility: 0.0036
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0002
Next Token : let, Posbility: 0.0003
Next Token : List, Posbility: 0.0004
Next Token : (, Posbility: 0.0052
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  <=, Posbility: 0.0003
Next Token :  !=, Posbility: 0.0007
Next Token :  ==, Posbility: 0.0012
Next Token :  , Posbility: 0.0041
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0001
Next Token : 0, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  0;, Posbility: 0.0003
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ||, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token :  &&, Posbility: 0.0012
Next Token :  then, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0016
Next Token :  [], Posbility: 0.0044
Next Token :  [, Posbility: 0.0073
Next Token : 
, Posbility: 0.0226
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token : if, Posbility: 0.0003
Next Token : (, Posbility: 0.0023
Next Token : x, Posbility: 0.0471
Next Token : fold, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : ing, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_
 score:False
Error type: noerr
---------------------------
Next Token : empty, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token : zeros, Posbility: 0.0001
Next Token : one, Posbility: 0.0002
Next Token : zero, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zero
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ess, Posbility: 0.0000
Next Token : es, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0004
Next Token :  , Posbility: 0.0952
Next Token : _, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_
 score:False
Error type: noerr
---------------------------
Next Token : re, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : zero, Posbility: 0.0000
Next Token : recursive, Posbility: 0.0000
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token :   , Posbility: 0.0004
Next Token : (, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0001
Next Token : tail, Posbility: 0.0002
Next Token : fold, Posbility: 0.0040
Next Token : (, Posbility: 0.0179
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0005
Next Token :   , Posbility: 0.0008
Next Token :  , Posbility: 0.0070
Next Token : 
, Posbility: 0.0669
Next Token :  else, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0008
Next Token : 
, Posbility: 0.0044
Next Token :  {, Posbility: 0.0082
Next Token :  [, Posbility: 0.0288
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0013
Next Token : (, Posbility: 0.0162
Next Token : if, Posbility: 0.0162
Next Token : fold, Posbility: 0.0728
Next Token : x, Posbility: 0.8867
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else x
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token : s, Posbility: 0.0025
Next Token : ::, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else x 
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : @@, Posbility: 0.0002
Next Token : :, Posbility: 0.0007
Next Token : ^, Posbility: 0.0008
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Fold, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0015
Next Token : x, Posbility: 0.0067
Next Token : fold, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else x :: fold
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ed, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else x :: fold_
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : empty, Posbility: 0.0000
Next Token : zeros, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : zero, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else x :: fold_zero
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : esse, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : ess, Posbility: 0.0000
Next Token : es, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else x :: fold_zeroes
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else x :: fold_zeroes_
 score:False
Error type: noerr
---------------------------
Next Token : res, Posbility: 0.0000
Next Token : re, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : recursive, Posbility: 0.0000
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else x :: fold_zeroes_rec
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 
, Posbility: 0.0013
Next Token : (, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else x :: fold_zeroes_rec 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : fold, Posbility: 0.0009
Next Token : (, Posbility: 0.0374
Next Token : x, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else x :: fold_zeroes_rec x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else x :: fold_zeroes_rec xs
 score:False
Error type: noerr
---------------------------
Next Token :  ++, Posbility: 0.0021
Next Token :  +, Posbility: 0.0082
Next Token :  , Posbility: 0.0082
Next Token : 
, Posbility: 0.3926
Next Token : 

, Posbility: 0.5703
---------------------------
code:
 (* Write a  function to move all zeroes to the end of the given list. *)
let rec fold_zeroes xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes xs else x :: fold_zeroes xs
let rec fold_zeroes_rec xs =
  match xs with
  | [] -> []
  | x :: xs -> if x = 0 then fold_zeroes_rec xs else x :: fold_zeroes_rec xs


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :59.07927632331848

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>