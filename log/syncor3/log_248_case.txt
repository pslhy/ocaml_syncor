code:
 (* Write a  function to count the upper case characters in a given string. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0118
Next Token :  string, Posbility: 0.0172
Next Token :  rec, Posbility: 0.1631
Next Token :  , Posbility: 0.3047
Next Token :  count, Posbility: 0.3926
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Up, Posbility: 0.0018
Next Token :  , Posbility: 0.0102
Next Token :  =, Posbility: 0.0244
Next Token : Upper, Posbility: 0.0315
Next Token : _, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : uc, Posbility: 0.0120
Next Token : char, Posbility: 0.0154
Next Token : up, Posbility: 0.0610
Next Token : uppercase, Posbility: 0.1006
Next Token : upper, Posbility: 0.7422
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0095
Next Token :  , Posbility: 0.0698
Next Token : s, Posbility: 0.1904
Next Token :  =, Posbility: 0.1904
Next Token : _, Posbility: 0.5156
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cas, Posbility: 0.0029
Next Token : character, Posbility: 0.0049
Next Token : cases, Posbility: 0.0217
Next Token : char, Posbility: 0.0280
Next Token : case, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  chars, Posbility: 0.0087
Next Token : (, Posbility: 0.0143
Next Token :  , Posbility: 0.1738
Next Token :  =, Posbility: 0.2871
Next Token : _, Posbility: 0.4727
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : words, Posbility: 0.0030
Next Token : in, Posbility: 0.0221
Next Token : letter, Posbility: 0.0771
Next Token : character, Posbility: 0.2100
Next Token : char, Posbility: 0.6445
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0023
Next Token : _, Posbility: 0.0063
Next Token :  , Posbility: 0.0172
Next Token :  =, Posbility: 0.0284
Next Token : s, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0269
Next Token : _, Posbility: 0.0442
Next Token :  str, Posbility: 0.0728
Next Token :  =, Posbility: 0.1982
Next Token :  , Posbility: 0.5391
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0047
Next Token : st, Posbility: 0.0068
Next Token : (, Posbility: 0.0271
Next Token : x, Posbility: 0.0393
Next Token : s, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0017
Next Token :  ~, Posbility: 0.0017
Next Token : 
, Posbility: 0.0035
Next Token :  , Posbility: 0.0096
Next Token :  =, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0043
Next Token :  match, Posbility: 0.0131
Next Token :  String, Posbility: 0.0131
Next Token :  , Posbility: 0.1245
Next Token : 
, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0081
Next Token : 	, Posbility: 0.0092
Next Token :    , Posbility: 0.0171
Next Token :     , Posbility: 0.1260
Next Token :   , Posbility: 0.8242
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : String, Posbility: 0.0214
Next Token : List, Posbility: 0.0273
Next Token : s, Posbility: 0.0310
Next Token : match, Posbility: 0.0352
Next Token : let, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  open, Posbility: 0.0544
Next Token :  chars, Posbility: 0.0698
Next Token :  count, Posbility: 0.0791
Next Token :  rec, Posbility: 0.1680
Next Token :  , Posbility: 0.3555
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0374
Next Token : s, Posbility: 0.0791
Next Token : n, Posbility: 0.0791
Next Token : c, Posbility: 0.1309
Next Token : upper, Posbility: 0.2148
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0013
Next Token : Case, Posbility: 0.0036
Next Token : s, Posbility: 0.0267
Next Token :  =, Posbility: 0.0728
Next Token : _, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0020
Next Token : cases, Posbility: 0.0146
Next Token : char, Posbility: 0.0398
Next Token : count, Posbility: 0.1084
Next Token : case, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0007
Next Token : ,, Posbility: 0.0007
Next Token : d, Posbility: 0.0018
Next Token :  =, Posbility: 0.2676
Next Token : _, Posbility: 0.7266
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cnt, Posbility: 0.0045
Next Token : letter, Posbility: 0.0122
Next Token : counter, Posbility: 0.0122
Next Token : count, Posbility: 0.2451
Next Token : char, Posbility: 0.6680
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 0.0159
Next Token : _, Posbility: 0.1172
Next Token : s, Posbility: 0.8672
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0009
Next Token :  , Posbility: 0.0038
Next Token : ,, Posbility: 0.0038
Next Token : _, Posbility: 0.0466
Next Token :  =, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0737
Next Token :  String, Posbility: 0.2002
Next Token :  0, Posbility: 0.2002
Next Token : 
, Posbility: 0.2002
Next Token :  , Posbility: 0.2002
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0432
Next Token : Array, Posbility: 0.0432
Next Token : s, Posbility: 0.1035
Next Token : List, Posbility: 0.1709
Next Token : ref, Posbility: 0.4102
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0059
Next Token :  "", Posbility: 0.0160
Next Token :  , Posbility: 0.0435
Next Token :  [], Posbility: 0.0435
Next Token :  0, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0030
Next Token : L, Posbility: 0.0039
Next Token :  |, Posbility: 0.0044
Next Token : 
, Posbility: 0.0325
Next Token :  in, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 0.0035
Next Token :  , Posbility: 0.0084
Next Token : 

, Posbility: 0.0200
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0004
Next Token :       , Posbility: 0.0005
Next Token :  , Posbility: 0.0010
Next Token :     , Posbility: 0.0046
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : String, Posbility: 0.0240
Next Token : fun, Posbility: 0.0309
Next Token : List, Posbility: 0.1079
Next Token : for, Posbility: 0.2275
Next Token : let, Posbility: 0.4824
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0170
Next Token :  loop, Posbility: 0.0219
Next Token :  count, Posbility: 0.0281
Next Token :  , Posbility: 0.1108
Next Token :  rec, Posbility: 0.7227
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0173
Next Token :  go, Posbility: 0.0325
Next Token :  loop, Posbility: 0.1865
Next Token :  , Posbility: 0.2393
Next Token :  count, Posbility: 0.3945
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ing, Posbility: 0.0049
Next Token :  char, Posbility: 0.0082
Next Token :  =, Posbility: 0.0471
Next Token :  , Posbility: 0.1641
Next Token : _, Posbility: 0.7344
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0109
Next Token : helper, Posbility: 0.0140
Next Token : up, Posbility: 0.0262
Next Token : upper, Posbility: 0.4102
Next Token : char, Posbility: 0.4102
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0098
Next Token : _, Posbility: 0.0437
Next Token :  =, Posbility: 0.0437
Next Token :  , Posbility: 0.3242
Next Token : s, Posbility: 0.5352
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0400
Next Token : _, Posbility: 0.0513
Next Token :  char, Posbility: 0.0845
Next Token :  =, Posbility: 0.1084
Next Token :  , Posbility: 0.6250
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ch, Posbility: 0.0161
Next Token : (), Posbility: 0.0339
Next Token : (, Posbility: 0.0815
Next Token : c, Posbility: 0.1050
Next Token : s, Posbility: 0.6836
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0183
Next Token :  acc, Posbility: 0.0388
Next Token :  i, Posbility: 0.1055
Next Token :  , Posbility: 0.1357
Next Token :  =, Posbility: 0.6055
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0077
Next Token :  match, Posbility: 0.0099
Next Token :  , Posbility: 0.0210
Next Token :  function, Posbility: 0.0645
Next Token : 
, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0063
Next Token :    , Posbility: 0.0117
Next Token :   , Posbility: 0.0171
Next Token :       , Posbility: 0.0320
Next Token :     , Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0076
Next Token : List, Posbility: 0.0142
Next Token : let, Posbility: 0.1963
Next Token : if, Posbility: 0.2520
Next Token : match, Posbility: 0.4707
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  S, Posbility: 0.0013
Next Token :  !, Posbility: 0.0034
Next Token :  char, Posbility: 0.0039
Next Token :  String, Posbility: 0.3984
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Seq, Posbility: 0.0049
Next Token : (, Posbility: 0.0103
Next Token : List, Posbility: 0.0674
Next Token : Char, Posbility: 0.1611
Next Token : s, Posbility: 0.7227
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token :  @, Posbility: 0.0015
Next Token : ., Posbility: 0.0109
Next Token :  with, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0017
Next Token :  [, Posbility: 0.0040
Next Token :  [], Posbility: 0.0045
Next Token :  , Posbility: 0.0051
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0006
Next Token :    , Posbility: 0.0014
Next Token :   , Posbility: 0.0016
Next Token :       , Posbility: 0.0471
Next Token :     , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0013
Next Token : ", Posbility: 0.0030
Next Token : [, Posbility: 0.0082
Next Token : [], Posbility: 0.0288
Next Token : |, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0250
Next Token :  None, Posbility: 0.0250
Next Token :  , Posbility: 0.1436
Next Token :  "", Posbility: 0.2373
Next Token :  [], Posbility: 0.5039
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0038
Next Token :   , Posbility: 0.0038
Next Token :  =>, Posbility: 0.0081
Next Token :  |, Posbility: 0.0283
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0002
Next Token : →, Posbility: 0.0003
Next Token : -, Posbility: 0.0004
Next Token : ::, Posbility: 0.0017
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0081
Next Token :  [], Posbility: 0.0220
Next Token : 
, Posbility: 0.0986
Next Token :  0, Posbility: 0.0986
Next Token :  , Posbility: 0.7266
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : raise, Posbility: 0.0270
Next Token : ref, Posbility: 0.0347
Next Token : return, Posbility: 0.2559
Next Token : (), Posbility: 0.2559
Next Token : upper, Posbility: 0.3281
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : Case, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : CASE, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : char, Posbility: 0.0000
Next Token : cases, Posbility: 0.0001
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0000
Next Token : chr, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0151
Next Token :  +, Posbility: 0.0151
Next Token :  , Posbility: 0.0249
Next Token :  |, Posbility: 0.0869
Next Token : 
, Posbility: 0.8242
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0007
Next Token :    , Posbility: 0.0017
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : |`, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0060
Next Token :  char, Posbility: 0.0098
Next Token :  ', Posbility: 0.0126
Next Token :  [, Posbility: 0.0442
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0165
Next Token : ch, Posbility: 0.0349
Next Token : x, Posbility: 0.0737
Next Token : _, Posbility: 0.3301
Next Token : c, Posbility: 0.4805
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0037
Next Token : :, Posbility: 0.0131
Next Token :  when, Posbility: 0.0752
Next Token : ::, Posbility: 0.3359
Next Token :  , Posbility: 0.5547
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0004
Next Token : :, Posbility: 0.0026
Next Token : if, Posbility: 0.0194
Next Token : ->, Posbility: 0.0410
Next Token : ::, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [], Posbility: 0.0024
Next Token :  new, Posbility: 0.0035
Next Token :  chars, Posbility: 0.0084
Next Token :  rest, Posbility: 0.2158
Next Token :  , Posbility: 0.7539
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0415
Next Token : t, Posbility: 0.0603
Next Token : _, Posbility: 0.0996
Next Token : s, Posbility: 0.1279
Next Token : cs, Posbility: 0.5703
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0027
Next Token :  @, Posbility: 0.0027
Next Token :  =>, Posbility: 0.0096
Next Token :  when, Posbility: 0.1167
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0003
Next Token : :, Posbility: 0.0003
Next Token : if, Posbility: 0.0066
Next Token : ::, Posbility: 0.0201
Next Token : ->, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0030
Next Token :  match, Posbility: 0.0049
Next Token :  count, Posbility: 0.0981
Next Token :  , Posbility: 0.1621
Next Token : 
, Posbility: 0.7227
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :          , Posbility: 0.0027
Next Token :        , Posbility: 0.0073
Next Token :     , Posbility: 0.0082
Next Token :       , Posbility: 0.3965
Next Token :         , Posbility: 0.5781
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : upper, Posbility: 0.0530
Next Token : match, Posbility: 0.0598
Next Token : count, Posbility: 0.1118
Next Token : let, Posbility: 0.2090
Next Token : if, Posbility: 0.5000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  System, Posbility: 0.0078
Next Token :  is, Posbility: 0.0165
Next Token :  char, Posbility: 0.0947
Next Token :  String, Posbility: 0.1562
Next Token :  , Posbility: 0.6992
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Character, Posbility: 0.0078
Next Token : (', Posbility: 0.0114
Next Token : (, Posbility: 0.0240
Next Token : c, Posbility: 0.4258
Next Token : Char, Posbility: 0.4824
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Info, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 0.0003
Next Token : _, Posbility: 0.0006
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : uppercase, Posbility: 0.0003
Next Token : Is, Posbility: 0.0015
Next Token : to, Posbility: 0.0025
Next Token : upper, Posbility: 0.0025
Next Token : is, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Lower, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : upper, Posbility: 0.0001
Next Token : Upper, Posbility: 0.0015
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0015
Next Token : alphabet, Posbility: 0.0024
Next Token : lower, Posbility: 0.0040
Next Token : uppercase, Posbility: 0.0177
Next Token : upper, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0006
Next Token : case, Posbility: 0.0047
Next Token : (, Posbility: 0.0077
Next Token :  , Posbility: 0.0938
Next Token : _, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : alpha, Posbility: 0.0002
Next Token : cas, Posbility: 0.0002
Next Token : char, Posbility: 0.0003
Next Token : ascii, Posbility: 0.0022
Next Token : case, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ?, Posbility: 0.0007
Next Token :  ?, Posbility: 0.0016
Next Token : (, Posbility: 0.0045
Next Token : _, Posbility: 0.0228
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : /, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : Char, Posbility: 0.0002
Next Token : (, Posbility: 0.0110
Next Token : c, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0012
Next Token :  =, Posbility: 0.0031
Next Token :  &&, Posbility: 0.0031
Next Token : 
, Posbility: 0.0052
Next Token :  then, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ++, Posbility: 0.0023
Next Token :  !, Posbility: 0.0055
Next Token :  count, Posbility: 0.1592
Next Token :  , Posbility: 0.2617
Next Token : 
, Posbility: 0.5547
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :          , Posbility: 0.0054
Next Token :         , Posbility: 0.0114
Next Token :            , Posbility: 0.0129
Next Token :             , Posbility: 0.2598
Next Token :           , Posbility: 0.7070
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : begin, Posbility: 0.0114
Next Token : let, Posbility: 0.0579
Next Token : (, Posbility: 0.0957
Next Token : upper, Posbility: 0.3789
Next Token : count, Posbility: 0.3789
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : up, Posbility: 0.0000
Next Token :  char, Posbility: 0.0000
Next Token : lower, Posbility: 0.0001
Next Token : upper, Posbility: 0.0067
Next Token : char, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token : (, Posbility: 0.0015
Next Token : _, Posbility: 0.0024
Next Token :  ~, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fs, Posbility: 0.0000
Next Token : c, Posbility: 0.0001
Next Token : s, Posbility: 0.0040
Next Token : (, Posbility: 0.0179
Next Token : cs, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0073
Next Token :  |, Posbility: 0.0199
Next Token :  else, Posbility: 0.0327
Next Token : 
, Posbility: 0.4004
Next Token : ;, Posbility: 0.5117
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0006
Next Token :  (*, Posbility: 0.0009
Next Token :  count, Posbility: 0.0027
Next Token :  , Posbility: 0.0139
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :             , Posbility: 0.0013
Next Token :        , Posbility: 0.0024
Next Token :          , Posbility: 0.0135
Next Token :         , Posbility: 0.2402
Next Token :           , Posbility: 0.7422
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0251
Next Token : incr, Posbility: 0.0284
Next Token : (, Posbility: 0.1445
Next Token : let, Posbility: 0.1445
Next Token : upper, Posbility: 0.5039
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : ++;, Posbility: 0.0000
Next Token :  +=, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : CASE, Posbility: 0.0000
Next Token : uppercase, Posbility: 0.0000
Next Token : char, Posbility: 0.0000
Next Token : cases, Posbility: 0.0000
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  +=, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : cases, Posbility: 0.0000
Next Token : chr, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  +=, Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0150
Next Token :  +, Posbility: 0.0522
Next Token :  +=, Posbility: 0.0762
Next Token :  , Posbility: 0.3867
Next Token :  :=, Posbility: 0.4375
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars :=
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0038
Next Token : !, Posbility: 0.0063
Next Token :  !, Posbility: 0.0134
Next Token : 
, Posbility: 0.0283
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0012
Next Token : Char, Posbility: 0.0081
Next Token : ref, Posbility: 0.0132
Next Token : (, Posbility: 0.0408
Next Token : upper, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : upper, Posbility: 0.0000
Next Token : char, Posbility: 0.0000
Next Token : uppercase, Posbility: 0.0000
Next Token : cases, Posbility: 0.0000
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  char, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : chr, Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token :  ++, Posbility: 0.0004
Next Token : +1, Posbility: 0.0019
Next Token :  , Posbility: 0.0041
Next Token :  +, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1), Posbility: 0.0006
Next Token :  , Posbility: 0.0041
Next Token : 1, Posbility: 0.0112
Next Token :  1;, Posbility: 0.3711
Next Token :  1, Posbility: 0.6094
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0024
Next Token :  |, Posbility: 0.0024
Next Token :  , Posbility: 0.0040
Next Token :  else, Posbility: 0.0085
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0146
Next Token :       , Posbility: 0.0352
Next Token :    , Posbility: 0.0581
Next Token :     , Posbility: 0.1582
Next Token :         , Posbility: 0.7070
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token : end, Posbility: 0.0001
Next Token : elif, Posbility: 0.0001
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0003
Next Token :   , Posbility: 0.0006
Next Token :  , Posbility: 0.0159
Next Token :  count, Posbility: 0.1167
Next Token : 
, Posbility: 0.8633
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        else

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        else count
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        else 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        else  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        else {
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0058
Next Token :  !, Posbility: 0.0066
Next Token :  String, Posbility: 0.0075
Next Token :  not, Posbility: 0.0913
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0069
Next Token : (, Posbility: 0.0114
Next Token : upper, Posbility: 0.0114
Next Token : c, Posbility: 0.1396
Next Token : Char, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Is, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : Set, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : char, Posbility: 0.0003
Next Token : compare, Posbility: 0.0005
Next Token : equal, Posbility: 0.0005
Next Token : to, Posbility: 0.0009
Next Token : is, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : upper, Posbility: 0.0000
Next Token :  lower, Posbility: 0.0000
Next Token : lower, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0076
Next Token : alphabet, Posbility: 0.0076
Next Token : alpha, Posbility: 0.0125
Next Token : upper, Posbility: 0.4121
Next Token : lower, Posbility: 0.5312
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : ed, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : alpha, Posbility: 0.0000
Next Token : cas, Posbility: 0.0000
Next Token : ascii, Posbility: 0.0003
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token : (, Posbility: 0.0012
Next Token : _, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0001
Next Token : cs, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : (, Posbility: 0.0013
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0013
Next Token :  &&, Posbility: 0.0022
Next Token :  ||, Posbility: 0.0031
Next Token : 
, Posbility: 0.0036
Next Token :  then, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0005
Next Token :  0, Posbility: 0.0007
Next Token :  , Posbility: 0.0194
Next Token :  count, Posbility: 0.0364
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c then

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c then count
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c then 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c then 0
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c then !
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0112
Next Token :      , Posbility: 0.0145
Next Token :            , Posbility: 0.0505
Next Token :          , Posbility: 0.1069
Next Token :        , Posbility: 0.7891
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
       
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ||, Posbility: 0.0003
Next Token :  with, Posbility: 0.0004
Next Token :  &&, Posbility: 0.0007
Next Token :  and, Posbility: 0.0017
Next Token :  then, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0013
Next Token :   , Posbility: 0.0181
Next Token :  , Posbility: 0.0491
Next Token :  count, Posbility: 0.1514
Next Token : 
, Posbility: 0.7656
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        then

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        then count
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        then 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        then  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        then !
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0157
Next Token :  !, Posbility: 0.0295
Next Token :  count, Posbility: 0.0552
Next Token :  not, Posbility: 0.2471
Next Token :  , Posbility: 0.5938
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ref, Posbility: 0.0371
Next Token : c, Posbility: 0.0786
Next Token : (, Posbility: 0.1143
Next Token : upper, Posbility: 0.1465
Next Token : Char, Posbility: 0.5117
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : Set, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : char, Posbility: 0.0036
Next Token : upper, Posbility: 0.0060
Next Token : compare, Posbility: 0.0164
Next Token : to, Posbility: 0.0444
Next Token : is, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Upper, Posbility: 0.0000
Next Token :  not, Posbility: 0.0001
Next Token : upper, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lower, Posbility: 0.0103
Next Token : alphabet, Posbility: 0.0103
Next Token : alpha, Posbility: 0.0103
Next Token : uppercase, Posbility: 0.0103
Next Token : upper, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cas, Posbility: 0.0000
Next Token : alpha, Posbility: 0.0000
Next Token : bound, Posbility: 0.0000
Next Token : ascii, Posbility: 0.0002
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0029
Next Token : (, Posbility: 0.0043
Next Token :  ~, Posbility: 0.0080
Next Token : _, Posbility: 0.0405
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : follow, Posbility: 0.0270
Next Token : char, Posbility: 0.1211
Next Token : or, Posbility: 0.1377
Next Token : letter, Posbility: 0.1553
Next Token : ascii, Posbility: 0.1992
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0010
Next Token : 
, Posbility: 0.0012
Next Token : (, Posbility: 0.0152
Next Token : _, Posbility: 0.0364
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : char, Posbility: 0.0894
Next Token : extended, Posbility: 0.0894
Next Token : equivalent, Posbility: 0.0894
Next Token : compatible, Posbility: 0.1147
Next Token : letter, Posbility: 0.2432
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0019
Next Token : s, Posbility: 0.0019
Next Token : (, Posbility: 0.0031
Next Token : _, Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : code, Posbility: 0.0204
Next Token : p, Posbility: 0.0262
Next Token : character, Posbility: 0.0432
Next Token : char, Posbility: 0.1172
Next Token : or, Posbility: 0.4648
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0001
Next Token : ('.'), Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : (, Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : number, Posbility: 0.0496
Next Token : punct, Posbility: 0.0496
Next Token : mark, Posbility: 0.0815
Next Token : space, Posbility: 0.0923
Next Token : digit, Posbility: 0.3223
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0034
Next Token : (, Posbility: 0.0038
Next Token : 
, Posbility: 0.0117
Next Token : _, Posbility: 0.0361
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0194
Next Token : ascii, Posbility: 0.0874
Next Token : or, Posbility: 0.1436
Next Token : character, Posbility: 0.1846
Next Token : char, Posbility: 0.3047
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0021
Next Token : (, Posbility: 0.0072
Next Token : 
, Posbility: 0.0082
Next Token : _, Posbility: 0.0287
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0388
Next Token : ex, Posbility: 0.0388
Next Token : ascii, Posbility: 0.1055
Next Token : code, Posbility: 0.1533
Next Token : or, Posbility: 0.1738
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ('.'), Posbility: 0.0003
Next Token : (', Posbility: 0.0004
Next Token :  , Posbility: 0.0012
Next Token : (, Posbility: 0.0025
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : separator, Posbility: 0.0447
Next Token : char, Posbility: 0.0508
Next Token : space, Posbility: 0.0947
Next Token : punct, Posbility: 0.1074
Next Token : underscore, Posbility: 0.2002
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0245
Next Token : (, Posbility: 0.0278
Next Token :  char, Posbility: 0.0315
Next Token : _, Posbility: 0.3379
Next Token :  , Posbility: 0.5586
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0008
Next Token : ascii, Posbility: 0.0021
Next Token : character, Posbility: 0.0082
Next Token : or, Posbility: 0.0322
Next Token : char, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0035
Next Token : (, Posbility: 0.0095
Next Token : 
, Posbility: 0.0479
Next Token : _, Posbility: 0.0791
Next Token :  , Posbility: 0.8516
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0306
Next Token : code, Posbility: 0.0347
Next Token : char, Posbility: 0.0732
Next Token : ascii, Posbility: 0.0830
Next Token : or, Posbility: 0.6133
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _1_, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : period, Posbility: 0.0396
Next Token : whitespace, Posbility: 0.0396
Next Token : other, Posbility: 0.0449
Next Token : space, Posbility: 0.1079
Next Token : ascii, Posbility: 0.1221
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  letter, Posbility: 0.0001
Next Token : 
, Posbility: 0.0006
Next Token : (, Posbility: 0.0010
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : space, Posbility: 0.0139
Next Token : whitespace, Posbility: 0.0139
Next Token : char, Posbility: 0.0203
Next Token : punct, Posbility: 0.1167
Next Token : letter, Posbility: 0.6719
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0044
Next Token : s, Posbility: 0.0064
Next Token : (, Posbility: 0.0064
Next Token :  , Posbility: 0.1299
Next Token : _, Posbility: 0.8438
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0053
Next Token : with, Posbility: 0.0060
Next Token : ascii, Posbility: 0.0078
Next Token : or, Posbility: 0.4219
Next Token : char, Posbility: 0.4785
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0126
Next Token : (, Posbility: 0.0206
Next Token : 
, Posbility: 0.0562
Next Token : _, Posbility: 0.3242
Next Token :  , Posbility: 0.5352
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ascii, Posbility: 0.0098
Next Token : not, Posbility: 0.0161
Next Token : class, Posbility: 0.0266
Next Token : in, Posbility: 0.0342
Next Token : or, Posbility: 0.7773
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token : _0_, Posbility: 0.0004
Next Token : _1_, Posbility: 0.0005
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digits, Posbility: 0.0128
Next Token : underscore, Posbility: 0.0128
Next Token : unicode, Posbility: 0.0165
Next Token : ascii, Posbility: 0.2578
Next Token : digit, Posbility: 0.6172
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0011
Next Token :  char, Posbility: 0.0021
Next Token : 
, Posbility: 0.0035
Next Token :  , Posbility: 0.0256
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : character, Posbility: 0.0018
Next Token : underscore, Posbility: 0.0026
Next Token : ascii, Posbility: 0.0049
Next Token : or, Posbility: 0.0322
Next Token : char, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0195
Next Token :  then, Posbility: 0.0221
Next Token : 
, Posbility: 0.0322
Next Token :  , Posbility: 0.3066
Next Token : _, Posbility: 0.5703
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : underscore, Posbility: 0.0032
Next Token : in, Posbility: 0.0078
Next Token : ascii, Posbility: 0.0078
Next Token : char, Posbility: 0.0447
Next Token : or, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : _0_, Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : space, Posbility: 0.0087
Next Token : unicode, Posbility: 0.0087
Next Token : underline, Posbility: 0.0111
Next Token : ascii, Posbility: 0.0234
Next Token : underscore, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  char, Posbility: 0.0010
Next Token :  character, Posbility: 0.0013
Next Token :  , Posbility: 0.0124
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0004
Next Token : ascii, Posbility: 0.0009
Next Token : character, Posbility: 0.0012
Next Token : or, Posbility: 0.0075
Next Token : char, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0206
Next Token :  then, Posbility: 0.0265
Next Token :  in, Posbility: 0.0718
Next Token :  , Posbility: 0.3652
Next Token : _, Posbility: 0.4688
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0049
Next Token : ascii, Posbility: 0.0118
Next Token : char, Posbility: 0.0366
Next Token : in, Posbility: 0.0469
Next Token : or, Posbility: 0.8320
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token : _0_, Posbility: 0.0003
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : punct, Posbility: 0.0066
Next Token : digit, Posbility: 0.0085
Next Token : space, Posbility: 0.0159
Next Token : letter, Posbility: 0.0204
Next Token : ascii, Posbility: 0.8633
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  letter, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lowercase, Posbility: 0.0010
Next Token : uppercase, Posbility: 0.0011
Next Token : char, Posbility: 0.0013
Next Token : digit, Posbility: 0.0085
Next Token : letter, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0002
Next Token : s, Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0259
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0017
Next Token : ascii, Posbility: 0.0020
Next Token : digit, Posbility: 0.0032
Next Token : or, Posbility: 0.0732
Next Token : char, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0102
Next Token :  in, Posbility: 0.0216
Next Token :  then, Posbility: 0.0244
Next Token :  , Posbility: 0.2041
Next Token : _, Posbility: 0.7148
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ascii, Posbility: 0.0013
Next Token :  , Posbility: 0.0015
Next Token :  or, Posbility: 0.0022
Next Token : in, Posbility: 0.0074
Next Token : or, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0001
Next Token : _0_, Posbility: 0.0001
Next Token : _1_, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0030
Next Token : space, Posbility: 0.0050
Next Token : ascii, Posbility: 0.0082
Next Token : punct, Posbility: 0.0106
Next Token : digit, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  character, Posbility: 0.0001
Next Token :  char, Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0002
Next Token : ascii, Posbility: 0.0002
Next Token : character, Posbility: 0.0003
Next Token : or, Posbility: 0.0017
Next Token : char, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0116
Next Token :  in, Posbility: 0.0131
Next Token :  then, Posbility: 0.0664
Next Token :  , Posbility: 0.0757
Next Token : _, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0004
Next Token : ascii, Posbility: 0.0008
Next Token : in, Posbility: 0.0021
Next Token : char, Posbility: 0.0045
Next Token : or, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0001
Next Token : _1_, Posbility: 0.0001
Next Token : _0_, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : space, Posbility: 0.0201
Next Token : lowercase, Posbility: 0.0201
Next Token : whitespace, Posbility: 0.0258
Next Token : ascii, Posbility: 0.0293
Next Token : underscore, Posbility: 0.7539
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  character, Posbility: 0.0009
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0001
Next Token :  char, Posbility: 0.0001
Next Token : character, Posbility: 0.0004
Next Token : or, Posbility: 0.0013
Next Token : char, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0107
Next Token :  in, Posbility: 0.0256
Next Token :  then, Posbility: 0.0479
Next Token :  , Posbility: 0.1475
Next Token : _, Posbility: 0.7461
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0015
Next Token : char, Posbility: 0.0024
Next Token :  or, Posbility: 0.0027
Next Token : in, Posbility: 0.0084
Next Token : or, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0001
Next Token : _1_, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0043
Next Token : upper, Posbility: 0.0049
Next Token : space, Posbility: 0.0070
Next Token : letter, Posbility: 0.0132
Next Token : ascii, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : char, Posbility: 0.0003
Next Token : character, Posbility: 0.0004
Next Token : lowercase, Posbility: 0.0004
Next Token : digit, Posbility: 0.0028
Next Token : letter, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token :  or, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0110
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0005
Next Token : uppercase, Posbility: 0.0005
Next Token : ch, Posbility: 0.0006
Next Token : or, Posbility: 0.0157
Next Token : char, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0043
Next Token : 
, Posbility: 0.0070
Next Token :  then, Posbility: 0.0070
Next Token :  , Posbility: 0.0461
Next Token : _, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0002
Next Token : in, Posbility: 0.0008
Next Token : else, Posbility: 0.0008
Next Token :  or, Posbility: 0.0012
Next Token : or, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : _1_, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ascii, Posbility: 0.0024
Next Token : space, Posbility: 0.0039
Next Token : letter, Posbility: 0.0045
Next Token : punct, Posbility: 0.0107
Next Token : digit, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ch, Posbility: 0.0000
Next Token : letter, Posbility: 0.0001
Next Token : character, Posbility: 0.0001
Next Token : or, Posbility: 0.0002
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0049
Next Token : 
, Posbility: 0.0104
Next Token :  , Posbility: 0.0194
Next Token :  then, Posbility: 0.0194
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : plus, Posbility: 0.0002
Next Token : of, Posbility: 0.0002
Next Token : char, Posbility: 0.0004
Next Token : in, Posbility: 0.0004
Next Token : or, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _1_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : upper, Posbility: 0.0121
Next Token : space, Posbility: 0.0137
Next Token : lowercase, Posbility: 0.0137
Next Token : whitespace, Posbility: 0.0226
Next Token : underscore, Posbility: 0.8477
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  character, Posbility: 0.0003
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0002
Next Token : or, Posbility: 0.0003
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0125
Next Token : 
, Posbility: 0.0142
Next Token :  then, Posbility: 0.0300
Next Token :  , Posbility: 0.0496
Next Token : _, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0003
Next Token : else, Posbility: 0.0009
Next Token :  or, Posbility: 0.0010
Next Token : in, Posbility: 0.0013
Next Token : or, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token : _1_, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lowercase, Posbility: 0.0021
Next Token : upper, Posbility: 0.0027
Next Token : space, Posbility: 0.0035
Next Token : letter, Posbility: 0.0073
Next Token : ascii, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  letter, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : char, Posbility: 0.0002
Next Token : lowercase, Posbility: 0.0002
Next Token : character, Posbility: 0.0002
Next Token : digit, Posbility: 0.0007
Next Token : letter, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  or, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0001
Next Token : uppercase, Posbility: 0.0002
Next Token : ch, Posbility: 0.0003
Next Token : or, Posbility: 0.0041
Next Token : char, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  else, Posbility: 0.0013
Next Token :  in, Posbility: 0.0014
Next Token : 
, Posbility: 0.0065
Next Token :  , Posbility: 0.0226
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0002
Next Token : in, Posbility: 0.0003
Next Token : else, Posbility: 0.0004
Next Token :  or, Posbility: 0.0005
Next Token : or, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _1_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : upper, Posbility: 0.0019
Next Token : space, Posbility: 0.0031
Next Token : letter, Posbility: 0.0051
Next Token : punct, Posbility: 0.0121
Next Token : digit, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ch, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : or, Posbility: 0.0001
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0031
Next Token :  then, Posbility: 0.0050
Next Token : 
, Posbility: 0.0120
Next Token :  , Posbility: 0.0120
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : plus, Posbility: 0.0001
Next Token : and, Posbility: 0.0001
Next Token : in, Posbility: 0.0002
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _1_, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : space, Posbility: 0.0070
Next Token : lowercase, Posbility: 0.0090
Next Token : uppercase, Posbility: 0.0131
Next Token : whitespace, Posbility: 0.0148
Next Token : underscore, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  character, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0001
Next Token : or, Posbility: 0.0001
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0063
Next Token :  then, Posbility: 0.0080
Next Token : 
, Posbility: 0.0150
Next Token :  , Posbility: 0.0317
Next Token : _, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0002
Next Token : else, Posbility: 0.0003
Next Token : in, Posbility: 0.0004
Next Token :  or, Posbility: 0.0005
Next Token : or, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : _1_, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : upper, Posbility: 0.0015
Next Token : lowercase, Posbility: 0.0015
Next Token : space, Posbility: 0.0017
Next Token : letter, Posbility: 0.0035
Next Token : ascii, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  letter, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lowercase, Posbility: 0.0001
Next Token : char, Posbility: 0.0001
Next Token : character, Posbility: 0.0001
Next Token : digit, Posbility: 0.0003
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0001
Next Token : uppercase, Posbility: 0.0001
Next Token : ch, Posbility: 0.0002
Next Token : or, Posbility: 0.0019
Next Token : char, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0006
Next Token :  in, Posbility: 0.0008
Next Token : 
, Posbility: 0.0065
Next Token :  , Posbility: 0.0200
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0001
Next Token : else, Posbility: 0.0001
Next Token : of, Posbility: 0.0001
Next Token :  or, Posbility: 0.0003
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _1_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : upper, Posbility: 0.0015
Next Token : space, Posbility: 0.0019
Next Token : letter, Posbility: 0.0031
Next Token : punct, Posbility: 0.0084
Next Token : digit, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0010
Next Token :  in, Posbility: 0.0011
Next Token : 
, Posbility: 0.0084
Next Token :  , Posbility: 0.0084
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0001
Next Token : plus, Posbility: 0.0001
Next Token : and, Posbility: 0.0001
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : space, Posbility: 0.0039
Next Token : lowercase, Posbility: 0.0057
Next Token : whitespace, Posbility: 0.0073
Next Token : uppercase, Posbility: 0.0106
Next Token : underscore, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  character, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  else, Posbility: 0.0026
Next Token :  in, Posbility: 0.0038
Next Token : 
, Posbility: 0.0104
Next Token :  , Posbility: 0.0322
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0001
Next Token : of, Posbility: 0.0002
Next Token : in, Posbility: 0.0002
Next Token :  or, Posbility: 0.0003
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : _1_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : upper, Posbility: 0.0009
Next Token : space, Posbility: 0.0010
Next Token : lowercase, Posbility: 0.0015
Next Token : letter, Posbility: 0.0017
Next Token : ascii, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  letter, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lowercase, Posbility: 0.0001
Next Token : char, Posbility: 0.0001
Next Token : character, Posbility: 0.0001
Next Token : digit, Posbility: 0.0001
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0001
Next Token : ascii, Posbility: 0.0001
Next Token : ch, Posbility: 0.0001
Next Token : or, Posbility: 0.0010
Next Token : char, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0005
Next Token : ), Posbility: 0.0005
Next Token : 
, Posbility: 0.0051
Next Token :  , Posbility: 0.0139
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token : and, Posbility: 0.0001
Next Token : of, Posbility: 0.0001
Next Token :  or, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : space, Posbility: 0.0012
Next Token : upper, Posbility: 0.0012
Next Token : letter, Posbility: 0.0022
Next Token : punct, Posbility: 0.0066
Next Token : digit, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0004
Next Token :  or, Posbility: 0.0007
Next Token :  , Posbility: 0.0066
Next Token : 
, Posbility: 0.0075
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : plus, Posbility: 0.0000
Next Token : and, Posbility: 0.0001
Next Token : of, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : space, Posbility: 0.0024
Next Token : lowercase, Posbility: 0.0045
Next Token : whitespace, Posbility: 0.0051
Next Token : uppercase, Posbility: 0.0095
Next Token : underscore, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  character, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  else, Posbility: 0.0011
Next Token :  in, Posbility: 0.0030
Next Token : 
, Posbility: 0.0119
Next Token :  , Posbility: 0.0286
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : oc, Posbility: 0.0001
Next Token :  or, Posbility: 0.0001
Next Token : and, Posbility: 0.0001
Next Token : of, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : _1_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ASCII, Posbility: 0.0008
Next Token : alphabet, Posbility: 0.0008
Next Token : letter, Posbility: 0.0010
Next Token : lowercase, Posbility: 0.0015
Next Token : ascii, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : character, Posbility: 0.0001
Next Token : lowercase, Posbility: 0.0001
Next Token : char, Posbility: 0.0001
Next Token : digit, Posbility: 0.0001
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : character, Posbility: 0.0000
Next Token : and, Posbility: 0.0001
Next Token : ch, Posbility: 0.0001
Next Token : or, Posbility: 0.0007
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0003
Next Token : ), Posbility: 0.0008
Next Token : 
, Posbility: 0.0036
Next Token :  , Posbility: 0.0075
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0001
Next Token : and, Posbility: 0.0001
Next Token : of, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : upper, Posbility: 0.0006
Next Token : ascii, Posbility: 0.0006
Next Token : letter, Posbility: 0.0012
Next Token : punct, Posbility: 0.0046
Next Token : digit, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *), Posbility: 0.0002
Next Token :  or, Posbility: 0.0006
Next Token :  , Posbility: 0.0031
Next Token : 
, Posbility: 0.0059
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : oc, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : and, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : space, Posbility: 0.0015
Next Token : whitespace, Posbility: 0.0035
Next Token : lowercase, Posbility: 0.0035
Next Token : uppercase, Posbility: 0.0084
Next Token : underscore, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  character, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0010
Next Token :  in, Posbility: 0.0014
Next Token : 
, Posbility: 0.0106
Next Token :  , Posbility: 0.0225
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : oc, Posbility: 0.0001
Next Token : of, Posbility: 0.0001
Next Token : and, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _1_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : alphabet, Posbility: 0.0006
Next Token : letter, Posbility: 0.0007
Next Token : ASCII, Posbility: 0.0008
Next Token : lowercase, Posbility: 0.0015
Next Token : ascii, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lowercase, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 0.0001
Next Token : digit, Posbility: 0.0001
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ascii, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : ch, Posbility: 0.0001
Next Token : or, Posbility: 0.0005
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0003
Next Token : ), Posbility: 0.0006
Next Token : 
, Posbility: 0.0031
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0001
Next Token : of, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : upper, Posbility: 0.0003
Next Token : ascii, Posbility: 0.0004
Next Token : letter, Posbility: 0.0006
Next Token : punct, Posbility: 0.0025
Next Token : digit, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0004
Next Token :  or, Posbility: 0.0007
Next Token :  , Posbility: 0.0019
Next Token : 
, Posbility: 0.0067
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : oc, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : and, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : space, Posbility: 0.0013
Next Token : whitespace, Posbility: 0.0040
Next Token : lowercase, Posbility: 0.0040
Next Token : uppercase, Posbility: 0.0096
Next Token : underscore, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  character, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0011
Next Token :  or, Posbility: 0.0011
Next Token : 
, Posbility: 0.0121
Next Token :  , Posbility: 0.0155
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : oc, Posbility: 0.0001
Next Token : of, Posbility: 0.0001
Next Token : and, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : uppercase, Posbility: 0.0004
Next Token : alphabet, Posbility: 0.0005
Next Token : ASCII, Posbility: 0.0008
Next Token : lowercase, Posbility: 0.0015
Next Token : ascii, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lowercase, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : digit, Posbility: 0.0000
Next Token : char, Posbility: 0.0000
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : character, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : ch, Posbility: 0.0001
Next Token : or, Posbility: 0.0002
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0002
Next Token : ), Posbility: 0.0009
Next Token :  , Posbility: 0.0019
Next Token : 
, Posbility: 0.0032
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : oc, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : and, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digits, Posbility: 0.0003
Next Token : ascii, Posbility: 0.0004
Next Token : letter, Posbility: 0.0005
Next Token : punct, Posbility: 0.0025
Next Token : digit, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *), Posbility: 0.0006
Next Token : ), Posbility: 0.0007
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 0.0059
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : oc, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : and, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : space, Posbility: 0.0008
Next Token : whitespace, Posbility: 0.0031
Next Token : lowercase, Posbility: 0.0040
Next Token : uppercase, Posbility: 0.0096
Next Token : underscore, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *), Posbility: 0.0005
Next Token : ), Posbility: 0.0007
Next Token :  , Posbility: 0.0052
Next Token : 
, Posbility: 0.0075
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : oc, Posbility: 0.0001
Next Token : of, Posbility: 0.0001
Next Token : and, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : uppercase, Posbility: 0.0004
Next Token : alphabet, Posbility: 0.0004
Next Token : ASCII, Posbility: 0.0012
Next Token : lowercase, Posbility: 0.0012
Next Token : ascii, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  letter, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lowercase, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : digit, Posbility: 0.0000
Next Token : char, Posbility: 0.0001
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : character, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : ch, Posbility: 0.0001
Next Token : or, Posbility: 0.0001
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ),, Posbility: 0.0002
Next Token : ), Posbility: 0.0010
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.0028
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : of, Posbility: 0.0000
Next Token : and, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0003
Next Token : ascii, Posbility: 0.0003
Next Token : digits, Posbility: 0.0004
Next Token : punct, Posbility: 0.0022
Next Token : digit, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : charset, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token :  *), Posbility: 0.0006
Next Token : ), Posbility: 0.0008
Next Token : 
, Posbility: 0.0046
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : oc, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : and, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : space, Posbility: 0.0005
Next Token : whitespace, Posbility: 0.0035
Next Token : lowercase, Posbility: 0.0035
Next Token : uppercase, Posbility: 0.0085
Next Token : underscore, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *), Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *), Posbility: 0.0010
Next Token : ), Posbility: 0.0019
Next Token : 
, Posbility: 0.0021
Next Token : -, Posbility: 0.0178
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : other, Posbility: 0.0000
Next Token : oc, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : and, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : uppercase, Posbility: 0.0005
Next Token : alphabet, Posbility: 0.0007
Next Token : lowercase, Posbility: 0.0013
Next Token : ASCII, Posbility: 0.0019
Next Token : ascii, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lowercase, Posbility: 0.0000
Next Token : digit, Posbility: 0.0000
Next Token : char, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : ), Posbility: 0.0003
Next Token : 
, Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : oc, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : upper, Posbility: 0.0003
Next Token : letter, Posbility: 0.0004
Next Token : digits, Posbility: 0.0009
Next Token : punct, Posbility: 0.0059
Next Token : digit, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : charset, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *), Posbility: 0.0002
Next Token : 

, Posbility: 0.0002
Next Token : ), Posbility: 0.0005
Next Token : 
, Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : for, Posbility: 0.0000
Next Token : char, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : and, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : punct, Posbility: 0.0002
Next Token : whitespace, Posbility: 0.0013
Next Token : lowercase, Posbility: 0.0017
Next Token : uppercase, Posbility: 0.0032
Next Token : underscore, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  *), Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0000
Next Token : charset, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0002
Next Token : 
, Posbility: 0.0009
Next Token : s, Posbility: 0.0017
Next Token : -, Posbility: 0.0947
Next Token : _, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : at, Posbility: 0.0000
Next Token : and, Posbility: 0.0001
Next Token : of, Posbility: 0.0007
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : -, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 0.0013
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : utf, Posbility: 0.0002
Next Token : ASCII, Posbility: 0.0003
Next Token : uppercase, Posbility: 0.0004
Next Token : lowercase, Posbility: 0.0004
Next Token : ascii, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  letter, Posbility: 0.0000
Next Token : lowercase, Posbility: 0.0000
Next Token : lower, Posbility: 0.0000
Next Token : digit, Posbility: 0.0000
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  char, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : character, Posbility: 0.0000
Next Token :  char, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : numeric, Posbility: 0.0003
Next Token : digits, Posbility: 0.0003
Next Token : punct, Posbility: 0.0004
Next Token : ascii, Posbility: 0.0009
Next Token : digit, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : charset, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : -, Posbility: 0.0535
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0004
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : whitespace, Posbility: 0.0013
Next Token : lowercase, Posbility: 0.0024
Next Token : ascii, Posbility: 0.0031
Next Token : uppercase, Posbility: 0.0096
Next Token : underscore, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token :  char, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0001
Next Token : s, Posbility: 0.0004
Next Token : 
, Posbility: 0.0009
Next Token : -, Posbility: 0.0474
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0003
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : upper, Posbility: 0.0002
Next Token : uppercase, Posbility: 0.0003
Next Token : ASCII, Posbility: 0.0003
Next Token : lowercase, Posbility: 0.0004
Next Token : ascii, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  letter, Posbility: 0.0000
Next Token : digit, Posbility: 0.0000
Next Token : lowercase, Posbility: 0.0000
Next Token : lower, Posbility: 0.0000
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : character, Posbility: 0.0000
Next Token :  char, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : numeric, Posbility: 0.0002
Next Token : digits, Posbility: 0.0003
Next Token : punct, Posbility: 0.0003
Next Token : ascii, Posbility: 0.0005
Next Token : digit, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : -, Posbility: 0.0330
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : whitespace, Posbility: 0.0017
Next Token : ascii, Posbility: 0.0022
Next Token : lowercase, Posbility: 0.0024
Next Token : uppercase, Posbility: 0.0096
Next Token : underscore, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token :  char, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token :  or, Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token : -, Posbility: 0.0179
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  the, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : upper, Posbility: 0.0002
Next Token : ASCII, Posbility: 0.0003
Next Token : uppercase, Posbility: 0.0003
Next Token : lowercase, Posbility: 0.0004
Next Token : ascii, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _1_1_, Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : lowercase, Posbility: 0.0000
Next Token : lower, Posbility: 0.0000
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0000
Next Token : ascii, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _1_, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : numeric, Posbility: 0.0002
Next Token : digits, Posbility: 0.0003
Next Token : punct, Posbility: 0.0003
Next Token : ascii, Posbility: 0.0004
Next Token : digit, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ascii, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : -, Posbility: 0.0260
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : whitespace, Posbility: 0.0015
Next Token : ascii, Posbility: 0.0017
Next Token : lowercase, Posbility: 0.0022
Next Token : uppercase, Posbility: 0.0085
Next Token : underscore, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0000
Next Token :  char, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token : -, Posbility: 0.0124
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : asc, Posbility: 0.0001
Next Token : ASCII, Posbility: 0.0002
Next Token : uppercase, Posbility: 0.0003
Next Token : lowercase, Posbility: 0.0003
Next Token : ascii, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : lowercase, Posbility: 0.0000
Next Token : lower, Posbility: 0.0000
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : upper, Posbility: 0.0002
Next Token : punct, Posbility: 0.0002
Next Token : digits, Posbility: 0.0003
Next Token : ascii, Posbility: 0.0004
Next Token : digit, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : charset, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : -, Posbility: 0.0159
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ascii, Posbility: 0.0010
Next Token : whitespace, Posbility: 0.0017
Next Token : lowercase, Posbility: 0.0028
Next Token : uppercase, Posbility: 0.0066
Next Token : underscore, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : -, Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : asc, Posbility: 0.0001
Next Token : uppercase, Posbility: 0.0002
Next Token : ASCII, Posbility: 0.0002
Next Token : lowercase, Posbility: 0.0003
Next Token : ascii, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : lowercase, Posbility: 0.0000
Next Token : lower, Posbility: 0.0000
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : character, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : numeric, Posbility: 0.0002
Next Token : ascii, Posbility: 0.0002
Next Token : punct, Posbility: 0.0002
Next Token : digits, Posbility: 0.0003
Next Token : digit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ascii, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : -, Posbility: 0.0140
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ascii, Posbility: 0.0008
Next Token : whitespace, Posbility: 0.0012
Next Token : lowercase, Posbility: 0.0019
Next Token : uppercase, Posbility: 0.0046
Next Token : underscore, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  character, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : -, Posbility: 0.0140
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : at, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  the, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : asc, Posbility: 0.0001
Next Token : uppercase, Posbility: 0.0002
Next Token : ASCII, Posbility: 0.0002
Next Token : lowercase, Posbility: 0.0004
Next Token : ascii, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : lowercase, Posbility: 0.0000
Next Token : lower, Posbility: 0.0000
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : character, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : numeric, Posbility: 0.0001
Next Token : punct, Posbility: 0.0002
Next Token : ascii, Posbility: 0.0002
Next Token : digits, Posbility: 0.0003
Next Token : digit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ascii, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : -, Posbility: 0.0085
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0003
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ascii, Posbility: 0.0005
Next Token : whitespace, Posbility: 0.0009
Next Token : lowercase, Posbility: 0.0017
Next Token : uppercase, Posbility: 0.0041
Next Token : underscore, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  character, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : -, Posbility: 0.0067
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : at, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : _1_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : asc, Posbility: 0.0001
Next Token : uppercase, Posbility: 0.0002
Next Token : ASCII, Posbility: 0.0002
Next Token : lowercase, Posbility: 0.0003
Next Token : ascii, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  letter, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : lowercase, Posbility: 0.0000
Next Token : lower, Posbility: 0.0000
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : character, Posbility: 0.0000
Next Token : ascii, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : numeric, Posbility: 0.0002
Next Token : punct, Posbility: 0.0002
Next Token : ascii, Posbility: 0.0002
Next Token : digits, Posbility: 0.0003
Next Token : digit, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 0.0002
Next Token : -, Posbility: 0.0067
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : at, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0004
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : underline, Posbility: 0.0003
Next Token : whitespace, Posbility: 0.0009
Next Token : lowercase, Posbility: 0.0012
Next Token : uppercase, Posbility: 0.0032
Next Token : underscore, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token : -, Posbility: 0.0076
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : other, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : _1_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : asc, Posbility: 0.0001
Next Token : uppercase, Posbility: 0.0002
Next Token : ASCII, Posbility: 0.0003
Next Token : lowercase, Posbility: 0.0004
Next Token : ascii, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : lowercase, Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : lower, Posbility: 0.0000
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : letter, Posbility: 0.0000
Next Token : ascii, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : numeric, Posbility: 0.0001
Next Token : digital, Posbility: 0.0001
Next Token : punct, Posbility: 0.0002
Next Token : digits, Posbility: 0.0003
Next Token : digit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : charset, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0125
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : underline, Posbility: 0.0003
Next Token : whitespace, Posbility: 0.0008
Next Token : lowercase, Posbility: 0.0012
Next Token : uppercase, Posbility: 0.0025
Next Token : underscore, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ch, Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token : -, Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : oc, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : /, Posbility: 0.0000
Next Token : _1_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : asc, Posbility: 0.0001
Next Token : uppercase, Posbility: 0.0002
Next Token : ASCII, Posbility: 0.0003
Next Token : lowercase, Posbility: 0.0003
Next Token : ascii, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  letter, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : lowercase, Posbility: 0.0000
Next Token : lower, Posbility: 0.0000
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : character, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digital, Posbility: 0.0001
Next Token : ascii, Posbility: 0.0001
Next Token : punct, Posbility: 0.0002
Next Token : digits, Posbility: 0.0003
Next Token : digit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _1_, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : underline, Posbility: 0.0004
Next Token : whitespace, Posbility: 0.0010
Next Token : lowercase, Posbility: 0.0012
Next Token : uppercase, Posbility: 0.0022
Next Token : underscore, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  character, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : other, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _1_, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : asc, Posbility: 0.0001
Next Token : uppercase, Posbility: 0.0001
Next Token : ASCII, Posbility: 0.0002
Next Token : lowercase, Posbility: 0.0003
Next Token : ascii, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0000
Next Token :  letter, Posbility: 0.0000
Next Token : lowercase, Posbility: 0.0000
Next Token : lower, Posbility: 0.0000
Next Token : letter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : character, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : of, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : numeric, Posbility: 0.0001
Next Token : ascii, Posbility: 0.0001
Next Token : punct, Posbility: 0.0002
Next Token : digits, Posbility: 0.0002
Next Token : digit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0000
Next Token : ch, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0067
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : of, Posbility: 0.0003
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : _0_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ascii, Posbility: 0.0008
Next Token : whitespace, Posbility: 0.0012
Next Token : lowercase, Posbility: 0.0025
Next Token : uppercase, Posbility: 0.0040
Next Token : underscore, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ch, Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : letter, Posbility: 0.0000
Next Token : character, Posbility: 0.0000
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars = ref 0 in
  let rec count_chars s =
    match s with
    | [] -> upper_case_chars
    | c :: cs ->
        if Char.is_upper_case c then
          count_chars cs;
          upper_case_chars := upper_case_chars + 1
        elif Char.is_lower_case c
        and Char.is_upper_case_ascii_letter_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char_or_ascii_letter_char_or_digit_char_or_underscore_char
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>