code:
 (* Write a function to merge three lists into a single sorted list. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sort, Posbility: 0.0114
Next Token :  list, Posbility: 0.0146
Next Token :  , Posbility: 0.1387
Next Token :  merge, Posbility: 0.2930
Next Token :  rec, Posbility: 0.4844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0054
Next Token :  rec, Posbility: 0.0054
Next Token :  list, Posbility: 0.0114
Next Token :  , Posbility: 0.2021
Next Token :  merge, Posbility: 0.7031
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0366
Next Token : 3, Posbility: 0.0996
Next Token :  =, Posbility: 0.0996
Next Token :  , Posbility: 0.1855
Next Token : _, Posbility: 0.3926
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sorted, Posbility: 0.0571
Next Token : sort, Posbility: 0.0942
Next Token : three, Posbility: 0.1367
Next Token : list, Posbility: 0.1553
Next Token : lists, Posbility: 0.2910
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0486
Next Token : (, Posbility: 0.0486
Next Token :  a, Posbility: 0.0552
Next Token :  =, Posbility: 0.2471
Next Token :  , Posbility: 0.4609
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0466
Next Token : :, Posbility: 0.0767
Next Token : lst, Posbility: 0.0986
Next Token : x, Posbility: 0.2090
Next Token : (, Posbility: 0.2363
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : acc, Posbility: 0.0277
Next Token : list, Posbility: 0.0967
Next Token : x, Posbility: 0.1240
Next Token : a, Posbility: 0.1240
Next Token : l, Posbility: 0.2637
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0203
Next Token : 0,, Posbility: 0.0229
Next Token : ,, Posbility: 0.0295
Next Token : 1, Posbility: 0.4082
Next Token : 1,, Posbility: 0.4609
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  ..., Posbility: 0.0008
Next Token :  v, Posbility: 0.0013
Next Token :  , Posbility: 0.0157
Next Token : l, Posbility: 0.1162
Next Token :  l, Posbility: 0.8594
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 3,, Posbility: 0.0001
Next Token : 2, Posbility: 0.0099
Next Token : 2), Posbility: 0.0942
Next Token : 2,, Posbility: 0.8945
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  merge, Posbility: 0.0002
Next Token :  acc, Posbility: 0.0002
Next Token :  list, Posbility: 0.0003
Next Token :  , Posbility: 0.0067
Next Token :  l, Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2), Posbility: 0.0003
Next Token : ), Posbility: 0.0009
Next Token : _, Posbility: 0.0010
Next Token : 3,, Posbility: 0.0109
Next Token : 3, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0005
Next Token : ):, Posbility: 0.0015
Next Token :  =, Posbility: 0.0024
Next Token :  , Posbility: 0.0179
Next Token : ), Posbility: 0.9766
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0020
Next Token : 
, Posbility: 0.0078
Next Token :  l, Posbility: 0.0128
Next Token :  , Posbility: 0.0649
Next Token :  =, Posbility: 0.8984
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0045
Next Token :  function, Posbility: 0.0075
Next Token :  , Posbility: 0.0554
Next Token :  match, Posbility: 0.0554
Next Token : 
, Posbility: 0.8672
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0065
Next Token :    , Posbility: 0.0107
Next Token : 	, Posbility: 0.0156
Next Token :     , Posbility: 0.1904
Next Token :   , Posbility: 0.7539
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0089
Next Token : List, Posbility: 0.0130
Next Token : let, Posbility: 0.1235
Next Token : if, Posbility: 0.2031
Next Token : match, Posbility: 0.6250
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0102
Next Token : 
, Posbility: 0.0167
Next Token :  [, Posbility: 0.0457
Next Token :  l, Posbility: 0.3379
Next Token :  , Posbility: 0.5547
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Seq, Posbility: 0.0056
Next Token : Int, Posbility: 0.0093
Next Token : Compare, Posbility: 0.0688
Next Token : List, Posbility: 0.1865
Next Token : (, Posbility: 0.6523
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Some, Posbility: 0.0034
Next Token : Compare, Posbility: 0.0118
Next Token :  l, Posbility: 0.0134
Next Token : List, Posbility: 0.0986
Next Token : l, Posbility: 0.8242
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 3,, Posbility: 0.0090
Next Token : 2,, Posbility: 0.0115
Next Token : 1., Posbility: 0.0130
Next Token : 1, Posbility: 0.0454
Next Token : 1,, Posbility: 0.9141
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0001
Next Token :  None, Posbility: 0.0002
Next Token :  , Posbility: 0.0010
Next Token : l, Posbility: 0.0293
Next Token :  l, Posbility: 0.9688
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 3, Posbility: 0.0011
Next Token : 3,, Posbility: 0.0011
Next Token : 2, Posbility: 0.0018
Next Token : 2), Posbility: 0.0598
Next Token : 2,, Posbility: 0.9336
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token : l, Posbility: 0.0001
Next Token :  None, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 3], Posbility: 0.0000
Next Token : 1), Posbility: 0.0000
Next Token : 2), Posbility: 0.0003
Next Token : 3,, Posbility: 0.0041
Next Token : 3, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ),, Posbility: 0.0009
Next Token :  with, Posbility: 0.0015
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token :  {, Posbility: 0.0009
Next Token : 
, Posbility: 0.0067
Next Token :  with, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0013
Next Token :  [, Posbility: 0.0017
Next Token : 

, Posbility: 0.0040
Next Token :  , Posbility: 0.0052
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0009
Next Token :  , Posbility: 0.0016
Next Token :    , Posbility: 0.0023
Next Token :     , Posbility: 0.0530
Next Token :   , Posbility: 0.9414
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([, Posbility: 0.0016
Next Token : ([], Posbility: 0.0070
Next Token : [, Posbility: 0.0216
Next Token : (, Posbility: 0.0457
Next Token : |, Posbility: 0.9180
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0143
Next Token :  [, Posbility: 0.1060
Next Token :  [],, Posbility: 0.1060
Next Token :  [], Posbility: 0.1357
Next Token :  , Posbility: 0.6094
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Nil, Posbility: 0.0161
Next Token : _, Posbility: 0.0183
Next Token : (), Posbility: 0.0302
Next Token : (, Posbility: 0.4160
Next Token : ([], Posbility: 0.4727
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :       , Posbility: 0.0002
Next Token : ;, Posbility: 0.0003
Next Token :  as, Posbility: 0.0015
Next Token :  , Posbility: 0.0124
Next Token : ,, Posbility: 0.9805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([],
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : _, Posbility: 0.0056
Next Token :  [], Posbility: 0.0118
Next Token : [],, Posbility: 0.0118
Next Token :  , Posbility: 0.3066
Next Token :  [],, Posbility: 0.6484
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [],
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0009
Next Token :  l, Posbility: 0.0024
Next Token :  [],, Posbility: 0.0065
Next Token :  [], Posbility: 0.0177
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0010
Next Token : ([], Posbility: 0.0016
Next Token : x, Posbility: 0.0056
Next Token : _, Posbility: 0.0469
Next Token : []), Posbility: 0.9414
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], [])
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0122
Next Token :   , Posbility: 0.0122
Next Token :  =>, Posbility: 0.0122
Next Token : ,, Posbility: 0.2451
Next Token :  , Posbility: 0.6680
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : →, Posbility: 0.0003
Next Token : -, Posbility: 0.0003
Next Token : ::, Posbility: 0.0008
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0057
Next Token : 
, Posbility: 0.0156
Next Token :  l, Posbility: 0.0422
Next Token :  , Posbility: 0.0698
Next Token :  [], Posbility: 0.8516
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0026
Next Token :   , Posbility: 0.0071
Next Token :  , Posbility: 0.0092
Next Token :  |, Posbility: 0.0282
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0010
Next Token :  ((, Posbility: 0.0014
Next Token :  [], Posbility: 0.0027
Next Token :  [, Posbility: 0.0291
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0018
Next Token : _, Posbility: 0.0219
Next Token : (, Posbility: 0.2656
Next Token : ([, Posbility: 0.2656
Next Token : ([], Posbility: 0.4395
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :       , Posbility: 0.0003
Next Token :  as, Posbility: 0.0003
Next Token :  , Posbility: 0.0017
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([],
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  a, Posbility: 0.0086
Next Token :  [, Posbility: 0.1050
Next Token :  l, Posbility: 0.1050
Next Token :  , Posbility: 0.2852
Next Token :  [],, Posbility: 0.4707
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [],
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0155
Next Token :  a, Posbility: 0.0542
Next Token :  [, Posbility: 0.1475
Next Token :  l, Posbility: 0.2432
Next Token :  , Posbility: 0.5156
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ls, Posbility: 0.0337
Next Token : []), Posbility: 0.0488
Next Token : (, Posbility: 0.0713
Next Token : _, Posbility: 0.2812
Next Token : x, Posbility: 0.3613
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : @, Posbility: 0.0037
Next Token : ::, Posbility: 0.0850
Next Token :  , Posbility: 0.1089
Next Token : ), Posbility: 0.2969
Next Token : s, Posbility: 0.4883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0039
Next Token : @, Posbility: 0.0082
Next Token : ::, Posbility: 0.0119
Next Token :  , Posbility: 0.0135
Next Token : ), Posbility: 0.9453
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0126
Next Token :   , Posbility: 0.0126
Next Token :  when, Posbility: 0.0162
Next Token :  |, Posbility: 0.0344
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : →, Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token : if, Posbility: 0.0006
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0044
Next Token :  merge, Posbility: 0.0056
Next Token : 
, Posbility: 0.0198
Next Token :  [, Posbility: 0.3086
Next Token :  , Posbility: 0.6523
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cons, Posbility: 0.0008
Next Token : append, Posbility: 0.0010
Next Token : List, Posbility: 0.0035
Next Token : (, Posbility: 0.0052
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> x
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0010
Next Token :   , Posbility: 0.0013
Next Token :  |, Posbility: 0.0013
Next Token :  , Posbility: 0.0052
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  [], Posbility: 0.0002
Next Token :  ((, Posbility: 0.0008
Next Token :  [, Posbility: 0.0059
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0013
Next Token : x, Posbility: 0.0099
Next Token : ([, Posbility: 0.1201
Next Token : (, Posbility: 0.3262
Next Token : ([], Posbility: 0.5391
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  as, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([],
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [], Posbility: 0.0008
Next Token :  l, Posbility: 0.0077
Next Token :  [],, Posbility: 0.0269
Next Token :  [, Posbility: 0.0728
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : ls, Posbility: 0.0014
Next Token : (, Posbility: 0.0048
Next Token : _, Posbility: 0.0352
Next Token : y, Posbility: 0.0452
Next Token : x, Posbility: 0.9062
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : 2,, Posbility: 0.0004
Next Token : 1,, Posbility: 0.0036
Next Token : ,, Posbility: 0.0109
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2,, Posbility: 0.0032
Next Token : _, Posbility: 0.0041
Next Token : ',, Posbility: 0.0041
Next Token : 1,, Posbility: 0.0942
Next Token : ,, Posbility: 0.8906
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [],, Posbility: 0.0009
Next Token :  l, Posbility: 0.0024
Next Token :  [, Posbility: 0.0066
Next Token :  [], Posbility: 0.0066
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([], Posbility: 0.0020
Next Token : _, Posbility: 0.0147
Next Token : y, Posbility: 0.0659
Next Token : x, Posbility: 0.1089
Next Token : []), Posbility: 0.8047
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, [])
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : ,, Posbility: 0.0002
Next Token :  |, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0007
Next Token :  l, Posbility: 0.0050
Next Token :  [, Posbility: 0.0137
Next Token :  [], Posbility: 0.0176
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0001
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0013
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token : 

, Posbility: 0.0004
Next Token :  , Posbility: 0.0010
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  [], Posbility: 0.0003
Next Token :  ((, Posbility: 0.0006
Next Token :  [, Posbility: 0.0110
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0010
Next Token : x, Posbility: 0.0120
Next Token : ([, Posbility: 0.0884
Next Token : (, Posbility: 0.2412
Next Token : ([], Posbility: 0.6562
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  as, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([],
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  a, Posbility: 0.0006
Next Token :  l, Posbility: 0.0014
Next Token :  [, Posbility: 0.0349
Next Token :  [],, Posbility: 0.0576
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (),, Posbility: 0.0014
Next Token : y, Posbility: 0.0023
Next Token : (, Posbility: 0.0037
Next Token : _, Posbility: 0.0747
Next Token : x, Posbility: 0.9102
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0007
Next Token : 0,, Posbility: 0.0009
Next Token : ,, Posbility: 0.0084
Next Token : 1,, Posbility: 0.0139
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0,, Posbility: 0.0006
Next Token : 2,, Posbility: 0.0009
Next Token : _, Posbility: 0.0058
Next Token : 1,, Posbility: 0.3184
Next Token : ,, Posbility: 0.6719
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0005
Next Token :  [],, Posbility: 0.0005
Next Token :  [], Posbility: 0.0040
Next Token :  [, Posbility: 0.0140
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0166
Next Token : (, Posbility: 0.0449
Next Token : []), Posbility: 0.0449
Next Token : y, Posbility: 0.3320
Next Token : x, Posbility: 0.5469
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 3, Posbility: 0.0009
Next Token : r, Posbility: 0.0009
Next Token : 2), Posbility: 0.0028
Next Token : ), Posbility: 0.0046
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0232
Next Token : 1), Posbility: 0.0232
Next Token : 2), Posbility: 0.1719
Next Token : '), Posbility: 0.2832
Next Token : ), Posbility: 0.4668
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0081
Next Token : 
, Posbility: 0.0117
Next Token :  with, Posbility: 0.0133
Next Token :  when, Posbility: 0.0281
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : if, Posbility: 0.0076
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0130
Next Token :  merge, Posbility: 0.0962
Next Token :  [, Posbility: 0.0962
Next Token : 
, Posbility: 0.2031
Next Token :  , Posbility: 0.5508
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0266
Next Token : let, Posbility: 0.0266
Next Token : (, Posbility: 0.0386
Next Token : List, Posbility: 0.1963
Next Token : x, Posbility: 0.6055
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> x
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 1, Posbility: 0.0003
Next Token : ::, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0422
Next Token :  +, Posbility: 0.0479
Next Token :  ++, Posbility: 0.1011
Next Token :  , Posbility: 0.1670
Next Token : 
, Posbility: 0.5820
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0002
Next Token :      , Posbility: 0.0003
Next Token :       , Posbility: 0.0015
Next Token :     , Posbility: 0.0022
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  [], Posbility: 0.0003
Next Token :  ((, Posbility: 0.0019
Next Token :  [, Posbility: 0.0159
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0011
Next Token : x, Posbility: 0.0216
Next Token : ([], Posbility: 0.0972
Next Token : ([, Posbility: 0.1602
Next Token : (, Posbility: 0.7188
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : h, Posbility: 0.0068
Next Token : y, Posbility: 0.0088
Next Token : _, Posbility: 0.0186
Next Token : l, Posbility: 0.0393
Next Token : x, Posbility: 0.8945
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ::, Posbility: 0.0036
Next Token : 1, Posbility: 0.0160
Next Token : 1,, Posbility: 0.0435
Next Token : ,, Posbility: 0.0559
Next Token : s, Posbility: 0.8750
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ',, Posbility: 0.0020
Next Token : ::, Posbility: 0.0029
Next Token : _, Posbility: 0.0070
Next Token : 1,, Posbility: 0.1787
Next Token : ,, Posbility: 0.8047
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  l, Posbility: 0.0013
Next Token :  [, Posbility: 0.0022
Next Token :  [], Posbility: 0.0096
Next Token :  , Posbility: 0.1177
Next Token :  [],, Posbility: 0.8672
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [],
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [],, Posbility: 0.0015
Next Token :  [, Posbility: 0.0024
Next Token :  [], Posbility: 0.0024
Next Token :  l, Posbility: 0.0066
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()), Posbility: 0.0005
Next Token : _, Posbility: 0.0166
Next Token : y, Posbility: 0.0275
Next Token : x, Posbility: 0.0452
Next Token : []), Posbility: 0.9102
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], [])
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  as, Posbility: 0.0009
Next Token :  |, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  l, Posbility: 0.0015
Next Token :  [], Posbility: 0.0022
Next Token :  [, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0000
Next Token : reverse, Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0015
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0002
Next Token : 

, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0019
Next Token :  [, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 0.0023
Next Token : ([, Posbility: 0.0284
Next Token : ([], Posbility: 0.0284
Next Token : (, Posbility: 0.9414
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : [],, Posbility: 0.0005
Next Token : y, Posbility: 0.0006
Next Token : l, Posbility: 0.0015
Next Token : _, Posbility: 0.0036
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0,, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : 1,, Posbility: 0.0010
Next Token : ,, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 0,, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : 1,, Posbility: 0.0159
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  l, Posbility: 0.0008
Next Token :  [], Posbility: 0.0008
Next Token :  [, Posbility: 0.0022
Next Token :  , Posbility: 0.1187
Next Token :  [],, Posbility: 0.8750
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [],
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token :  [], Posbility: 0.0003
Next Token :  [, Posbility: 0.0007
Next Token :  l, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0066
Next Token : []), Posbility: 0.0066
Next Token : y, Posbility: 0.0139
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1), Posbility: 0.0000
Next Token : 2), Posbility: 0.0001
Next Token : 3, Posbility: 0.0002
Next Token : ), Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0006
Next Token : 1), Posbility: 0.0006
Next Token : '), Posbility: 0.0046
Next Token : 2), Posbility: 0.0046
Next Token : ), Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  |, Posbility: 0.0017
Next Token :  with, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : if, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0023
Next Token : 
, Posbility: 0.0063
Next Token :  [, Posbility: 0.0281
Next Token :  merge, Posbility: 0.0281
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.0009
Next Token : append, Posbility: 0.0014
Next Token : List, Posbility: 0.0023
Next Token : (, Posbility: 0.0469
Next Token : x, Posbility: 0.9414
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> x
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0009
Next Token :  *, Posbility: 0.0010
Next Token :  (*, Posbility: 0.0025
Next Token :  , Posbility: 0.0031
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : when, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0007
Next Token :  ((, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 0.0011
Next Token : ([], Posbility: 0.0108
Next Token : ([, Posbility: 0.0139
Next Token : (, Posbility: 0.9727
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : y, Posbility: 0.0003
Next Token : [],, Posbility: 0.0003
Next Token : l, Posbility: 0.0012
Next Token : _, Posbility: 0.0028
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0,, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : 1,, Posbility: 0.0013
Next Token : ,, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ::, Posbility: 0.0001
Next Token : 0,, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : 1,, Posbility: 0.0110
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  l, Posbility: 0.0002
Next Token :  [, Posbility: 0.0040
Next Token :  [],, Posbility: 0.0179
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (),, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : _, Posbility: 0.0082
Next Token : y, Posbility: 0.0469
Next Token : x, Posbility: 0.9414
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : sl, Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token : 1,, Posbility: 0.0005
Next Token : ,, Posbility: 0.0017
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0066
Next Token : 2,, Posbility: 0.0332
Next Token : ',, Posbility: 0.0908
Next Token : 1,, Posbility: 0.1914
Next Token : ,, Posbility: 0.6680
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0003
Next Token :  [, Posbility: 0.0009
Next Token :  [],, Posbility: 0.0015
Next Token :  [], Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()), Posbility: 0.0013
Next Token : _, Posbility: 0.0035
Next Token : y, Posbility: 0.0096
Next Token : x, Posbility: 0.1172
Next Token : []), Posbility: 0.8672
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, [])
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  with, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  as, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0014
Next Token :  l, Posbility: 0.0019
Next Token :  merge, Posbility: 0.0137
Next Token :  [, Posbility: 0.0176
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0009
Next Token : concat, Posbility: 0.0009
Next Token : List, Posbility: 0.0015
Next Token : (, Posbility: 0.0178
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0022
Next Token :  *, Posbility: 0.0028
Next Token :  (*, Posbility: 0.0040
Next Token :  , Posbility: 0.0045
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : end, Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  
 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  ((, Posbility: 0.0013
Next Token :  [, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : ([], Posbility: 0.0036
Next Token : x, Posbility: 0.0040
Next Token : ([, Posbility: 0.0075
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : y, Posbility: 0.0003
Next Token : a, Posbility: 0.0004
Next Token : l, Posbility: 0.0013
Next Token : _, Posbility: 0.0028
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 0,, Posbility: 0.0001
Next Token : 1,, Posbility: 0.0015
Next Token : ,, Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 0,, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : 1,, Posbility: 0.0085
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0040
Next Token :  [],, Posbility: 0.0179
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (),, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0009
Next Token : _, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2,, Posbility: 0.0000
Next Token : 0,, Posbility: 0.0000
Next Token : ,, Posbility: 0.0003
Next Token : 1,, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ',, Posbility: 0.0001
Next Token : 2,, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 1,, Posbility: 0.0022
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  [],, Posbility: 0.0002
Next Token :  [, Posbility: 0.0009
Next Token :  [], Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0051
Next Token : y, Posbility: 0.0107
Next Token : []), Posbility: 0.0177
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1), Posbility: 0.0000
Next Token : 2), Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1), Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : '), Posbility: 0.0006
Next Token : 2), Posbility: 0.0006
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0005
Next Token : 
, Posbility: 0.0035
Next Token :  when, Posbility: 0.0137
Next Token :  with, Posbility: 0.0176
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : if, Posbility: 0.0059
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0167
Next Token :  [, Posbility: 0.0216
Next Token :  merge, Posbility: 0.0586
Next Token : 
, Posbility: 0.4336
Next Token :  , Posbility: 0.4336
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0496
Next Token : if, Posbility: 0.0562
Next Token : let, Posbility: 0.0562
Next Token : x, Posbility: 0.2852
Next Token : List, Posbility: 0.3672
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 0.0007
Next Token : (, Posbility: 0.0007
Next Token : _, Posbility: 0.0028
Next Token : ., Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : merge, Posbility: 0.0532
Next Token : rev, Posbility: 0.0532
Next Token : sorted, Posbility: 0.0684
Next Token : concat, Posbility: 0.1445
Next Token : sort, Posbility: 0.5039
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0161
Next Token :  l, Posbility: 0.0266
Next Token :  [, Posbility: 0.0496
Next Token : _, Posbility: 0.1729
Next Token :  , Posbility: 0.6836
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort 
 score:False
Error type: noerr
---------------------------
Next Token : ([, Posbility: 0.0063
Next Token : Compare, Posbility: 0.0063
Next Token : List, Posbility: 0.0221
Next Token : x, Posbility: 0.2100
Next Token : (, Posbility: 0.7305
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : compare, Posbility: 0.0339
Next Token : x, Posbility: 0.0383
Next Token : function, Posbility: 0.0383
Next Token : List, Posbility: 0.1338
Next Token : fun, Posbility: 0.6016
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0055
Next Token :  v, Posbility: 0.0070
Next Token :  l, Posbility: 0.0669
Next Token :  a, Posbility: 0.0859
Next Token :  , Posbility: 0.8164
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0135
Next Token : e, Posbility: 0.0222
Next Token : p, Posbility: 0.0222
Next Token : (, Posbility: 0.1641
Next Token : x, Posbility: 0.7383
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0095
Next Token :  a, Posbility: 0.0258
Next Token :  l, Posbility: 0.0791
Next Token : 1, Posbility: 0.1021
Next Token :  , Posbility: 0.7539
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0018
Next Token : (, Posbility: 0.0025
Next Token : x, Posbility: 0.0275
Next Token : ->, Posbility: 0.0581
Next Token : y, Posbility: 0.9102
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  when, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : →, Posbility: 0.0002
Next Token : -, Posbility: 0.0004
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0022
Next Token :  String, Posbility: 0.0270
Next Token : 
, Posbility: 0.0942
Next Token :  compare, Posbility: 0.1553
Next Token :  , Posbility: 0.6953
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0305
Next Token : Ord, Posbility: 0.0305
Next Token : List, Posbility: 0.0569
Next Token : x, Posbility: 0.2891
Next Token : Compare, Posbility: 0.3711
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0030
Next Token : rs, Posbility: 0.0057
Next Token :  , Posbility: 0.0073
Next Token : r, Posbility: 0.0198
Next Token : ., Posbility: 0.9531
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : string, Posbility: 0.0145
Next Token : (, Posbility: 0.0347
Next Token : compare, Posbility: 0.1553
Next Token : int, Posbility: 0.3301
Next Token : Int, Posbility: 0.3730
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 64, Posbility: 0.0214
Next Token : s, Posbility: 0.0311
Next Token :  , Posbility: 0.0659
Next Token : ., Posbility: 0.1396
Next Token : 32, Posbility: 0.7109
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0014
Next Token : 
, Posbility: 0.0016
Next Token :  compare, Posbility: 0.0073
Next Token :  , Posbility: 0.2412
Next Token : ., Posbility: 0.7422
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lt, Posbility: 0.0085
Next Token : Compare, Posbility: 0.0109
Next Token : cmp, Posbility: 0.0554
Next Token : (, Posbility: 0.1035
Next Token : compare, Posbility: 0.7617
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token :  l, Posbility: 0.0005
Next Token : _, Posbility: 0.0085
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0015
Next Token : Int, Posbility: 0.0015
Next Token : y, Posbility: 0.0187
Next Token : (, Posbility: 0.1768
Next Token : x, Posbility: 0.7930
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  `, Posbility: 0.0003
Next Token : y, Posbility: 0.0005
Next Token : s, Posbility: 0.0085
Next Token : ., Posbility: 0.3164
Next Token :  , Posbility: 0.6719
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 0.0006
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ),, Posbility: 0.0017
Next Token : )), Posbility: 0.0035
Next Token :  , Posbility: 0.0045
Next Token : );, Posbility: 0.1172
Next Token : ), Posbility: 0.8672
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y)
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0008
Next Token :  [, Posbility: 0.0205
Next Token : 
, Posbility: 0.0299
Next Token :  l, Posbility: 0.0718
Next Token :  , Posbility: 0.8711
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) 
 score:False
Error type: noerr
---------------------------
Next Token : ([, Posbility: 0.0003
Next Token : 
, Posbility: 0.0008
Next Token : List, Posbility: 0.0008
Next Token : (, Posbility: 0.1187
Next Token : x, Posbility: 0.8789
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0028
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs
 score:False
Error type: noerr
---------------------------
Next Token :  ++, Posbility: 0.0649
Next Token : 

, Posbility: 0.0737
Next Token :  l, Posbility: 0.0737
Next Token : 
, Posbility: 0.0835
Next Token :  , Posbility: 0.6172
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0119
Next Token : ;, Posbility: 0.0197
Next Token : (, Posbility: 0.0366
Next Token : ::, Posbility: 0.0535
Next Token : x, Posbility: 0.8359
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs x
 score:False
Error type: noerr
---------------------------
Next Token : 3, Posbility: 0.0003
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 0.0010
Next Token :  , Posbility: 0.0046
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0058
Next Token : ;, Posbility: 0.0334
Next Token : 

, Posbility: 0.0381
Next Token : 
, Posbility: 0.0430
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token : y, Posbility: 0.0008
Next Token : (, Posbility: 0.0009
Next Token : ;, Posbility: 0.0013
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs x
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 3, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0227
Next Token :  , Posbility: 0.0376
Next Token : ;, Posbility: 0.0796
Next Token : 

, Posbility: 0.2441
Next Token : 
, Posbility: 0.5859
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0110
Next Token : ;, Posbility: 0.0212
Next Token : let, Posbility: 0.0212
Next Token : end, Posbility: 0.0698
Next Token :   , Posbility: 0.5820
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  
 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0018
Next Token : (, Posbility: 0.0024
Next Token : ;, Posbility: 0.0154
Next Token : in, Posbility: 0.0175
Next Token : |, Posbility: 0.9531
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0034
Next Token :  otherwise, Posbility: 0.0039
Next Token :  ((, Posbility: 0.0044
Next Token :  [], Posbility: 0.0050
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([, Posbility: 0.0187
Next Token : ([], Posbility: 0.0308
Next Token : x, Posbility: 0.2002
Next Token : _, Posbility: 0.2266
Next Token : (, Posbility: 0.4805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : a, Posbility: 0.0113
Next Token : y, Posbility: 0.0306
Next Token : _, Posbility: 0.0574
Next Token : l, Posbility: 0.0574
Next Token : x, Posbility: 0.7930
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0022
Next Token : 0,, Posbility: 0.0060
Next Token : 1,, Posbility: 0.0439
Next Token : ,, Posbility: 0.2539
Next Token : s, Posbility: 0.6875
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ',, Posbility: 0.0010
Next Token : 0,, Posbility: 0.0032
Next Token : _, Posbility: 0.0036
Next Token : 1,, Posbility: 0.0942
Next Token : ,, Posbility: 0.8945
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  l, Posbility: 0.0030
Next Token :  [], Posbility: 0.0049
Next Token :  [, Posbility: 0.0173
Next Token :  [],, Posbility: 0.0222
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (, Posbility: 0.0019
Next Token : []), Posbility: 0.0019
Next Token : _, Posbility: 0.0623
Next Token : y, Posbility: 0.4590
Next Token : x, Posbility: 0.4590
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0,, Posbility: 0.0017
Next Token : 2,, Posbility: 0.0060
Next Token : 1,, Posbility: 0.0099
Next Token : ,, Posbility: 0.0737
Next Token : s, Posbility: 0.8984
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0104
Next Token : 2,, Posbility: 0.0601
Next Token : ',, Posbility: 0.0771
Next Token : 1,, Posbility: 0.0991
Next Token : ,, Posbility: 0.7305
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0015
Next Token :  rest, Posbility: 0.0019
Next Token :  [, Posbility: 0.0066
Next Token :  [], Posbility: 0.0066
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0020
Next Token : _, Posbility: 0.0525
Next Token : []), Posbility: 0.0525
Next Token : y, Posbility: 0.2354
Next Token : x, Posbility: 0.6406
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 3, Posbility: 0.0006
Next Token : 2), Posbility: 0.0010
Next Token : ,, Posbility: 0.0024
Next Token : ), Posbility: 0.0085
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0060
Next Token : ,, Posbility: 0.0144
Next Token : 2), Posbility: 0.0184
Next Token : '), Posbility: 0.0444
Next Token : ), Posbility: 0.8906
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0041
Next Token :  where, Posbility: 0.0047
Next Token :  with, Posbility: 0.0347
Next Token :  when, Posbility: 0.1553
Next Token :  , Posbility: 0.7891
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >, Posbility: 0.0005
Next Token : →, Posbility: 0.0009
Next Token : if, Posbility: 0.0017
Next Token :  =>, Posbility: 0.0019
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0143
Next Token :  [, Posbility: 0.0183
Next Token :  merge, Posbility: 0.0388
Next Token : 
, Posbility: 0.2871
Next Token :  , Posbility: 0.6094
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0110
Next Token : (, Posbility: 0.0160
Next Token : let, Posbility: 0.1040
Next Token : x, Posbility: 0.1514
Next Token : List, Posbility: 0.6797
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : merge, Posbility: 0.0273
Next Token : fold, Posbility: 0.0273
Next Token : append, Posbility: 0.0452
Next Token : concat, Posbility: 0.0510
Next Token : sort, Posbility: 0.7070
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0009
Next Token :  ((, Posbility: 0.0031
Next Token : 
, Posbility: 0.0094
Next Token : _, Posbility: 0.0255
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token : List, Posbility: 0.0017
Next Token : x, Posbility: 0.0051
Next Token : Compare, Posbility: 0.0139
Next Token : (, Posbility: 0.9766
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0002
Next Token : Compare, Posbility: 0.0002
Next Token : compare, Posbility: 0.0002
Next Token : function, Posbility: 0.0010
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0006
Next Token :  {, Posbility: 0.0009
Next Token :  l, Posbility: 0.0012
Next Token :  a, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0003
Next Token : p, Posbility: 0.0005
Next Token : y, Posbility: 0.0031
Next Token : (, Posbility: 0.0052
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0002
Next Token :  a, Posbility: 0.0002
Next Token : s, Posbility: 0.0006
Next Token : 1, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : z, Posbility: 0.0004
Next Token : x, Posbility: 0.0013
Next Token : ->, Posbility: 0.0036
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0004
Next Token :  String, Posbility: 0.0012
Next Token :  compare, Posbility: 0.0015
Next Token : 
, Posbility: 0.0085
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0010
Next Token : x, Posbility: 0.0010
Next Token : if, Posbility: 0.0013
Next Token : List, Posbility: 0.0022
Next Token : Compare, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : String, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : Int, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0008
Next Token : int, Posbility: 0.0024
Next Token : Float, Posbility: 0.0031
Next Token : String, Posbility: 0.0075
Next Token : Int, Posbility: 0.9805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 32_, Posbility: 0.0000
Next Token : 16, Posbility: 0.0002
Next Token : ., Posbility: 0.0005
Next Token : 64, Posbility: 0.0052
Next Token : 32, Posbility: 0.9922
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  compare, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : comparison, Posbility: 0.0000
Next Token : cmp, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : equal, Posbility: 0.0001
Next Token : compare, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0002
Next Token :  l, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token : _, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -, Posbility: 0.0001
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0159
Next Token : y, Posbility: 0.1172
Next Token : x, Posbility: 0.8633
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : ', Posbility: 0.0004
Next Token : s, Posbility: 0.0009
Next Token : ., Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 0.0013
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : );, Posbility: 0.0001
Next Token :  +, Posbility: 0.0005
Next Token :  , Posbility: 0.0013
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y)
 score:False
Error type: noerr
---------------------------
Next Token :  merge, Posbility: 0.0093
Next Token : 
, Posbility: 0.0119
Next Token :  [, Posbility: 0.0197
Next Token :  l, Posbility: 0.1133
Next Token :  , Posbility: 0.8359
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token : y, Posbility: 0.0005
Next Token : List, Posbility: 0.0171
Next Token : (, Posbility: 0.0464
Next Token : x, Posbility: 0.9336
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) x
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 1, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0013
Next Token :  merge, Posbility: 0.0013
Next Token : 
, Posbility: 0.0036
Next Token :  l, Posbility: 0.0942
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : List, Posbility: 0.0009
Next Token : (, Posbility: 0.0066
Next Token : y, Posbility: 0.0109
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs x
 score:False
Error type: noerr
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0015
Next Token : 

, Posbility: 0.0033
Next Token : 
, Posbility: 0.0079
Next Token :  l, Posbility: 0.1787
Next Token :  , Posbility: 0.8047
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs 
 score:False
Error type: noerr
---------------------------
Next Token : lst, Posbility: 0.0005
Next Token : y, Posbility: 0.0063
Next Token : (, Posbility: 0.0282
Next Token : List, Posbility: 0.0282
Next Token : x, Posbility: 0.9336
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs x
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : 3, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
 score:False
Error type: noerr
---------------------------
Next Token :  ++, Posbility: 0.0118
Next Token :  l, Posbility: 0.0361
Next Token : 
, Posbility: 0.2363
Next Token :  , Posbility: 0.3027
Next Token : 

, Posbility: 0.3438
---------------------------
code:
 (* Write a function to merge three lists into a single sorted list. *)
let rec merge_lists (l1, l2, l3) =
  match (l1, l2, l3) with
  | ([], [], []) -> []
  | ([], [], xs) -> xs
  | ([], xs, []) -> xs
  | ([], xs, xs) -> xs
  | (xs, [], []) -> xs
  | (xs, [], xs) -> xs
  | (xs, xs, []) -> xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs
  | (xs, xs, xs) -> List.sort (fun x y -> Compare.Int32.compare x y) xs xs xs


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :105.75296378135681

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>