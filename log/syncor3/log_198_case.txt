code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0183
Next Token :  k, Posbility: 0.0820
Next Token :  find, Posbility: 0.0820
Next Token :  , Posbility: 0.1963
Next Token :  rec, Posbility: 0.4160
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0195
Next Token :  count, Posbility: 0.0250
Next Token :  k, Posbility: 0.0601
Next Token :  find, Posbility: 0.2695
Next Token :  , Posbility: 0.3457
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0270
Next Token : helper, Posbility: 0.0305
Next Token : pairs, Posbility: 0.0503
Next Token : min, Posbility: 0.1206
Next Token : smallest, Posbility: 0.2256
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : K, Posbility: 0.0089
Next Token : Pair, Posbility: 0.0089
Next Token :  =, Posbility: 0.0130
Next Token :  , Posbility: 0.0147
Next Token : _, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0117
Next Token : two, Posbility: 0.0133
Next Token : k, Posbility: 0.0282
Next Token : pair, Posbility: 0.2676
Next Token : pairs, Posbility: 0.5664
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0254
Next Token :  =, Posbility: 0.0889
Next Token : _, Posbility: 0.1875
Next Token :  k, Posbility: 0.1875
Next Token :  , Posbility: 0.3965
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0309
Next Token : x, Posbility: 0.0579
Next Token : (, Posbility: 0.1572
Next Token : arr, Posbility: 0.1777
Next Token : n, Posbility: 0.2930
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0344
Next Token :  a, Posbility: 0.0500
Next Token :  k, Posbility: 0.1748
Next Token :  =, Posbility: 0.2246
Next Token :  , Posbility: 0.3262
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0430
Next Token : (, Posbility: 0.0801
Next Token : m, Posbility: 0.1318
Next Token : arr, Posbility: 0.1924
Next Token : x, Posbility: 0.1924
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0113
Next Token : 1, Posbility: 0.0210
Next Token :  =, Posbility: 0.0649
Next Token :  , Posbility: 0.2266
Next Token : s, Posbility: 0.6133
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0073
Next Token :  a, Posbility: 0.0155
Next Token : 1, Posbility: 0.0791
Next Token :  =, Posbility: 0.2754
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0011
Next Token : pairs, Posbility: 0.0021
Next Token : (, Posbility: 0.0027
Next Token : x, Posbility: 0.0031
Next Token : y, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0015
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0162
Next Token :  i, Posbility: 0.0184
Next Token :  acc, Posbility: 0.0209
Next Token :  , Posbility: 0.0933
Next Token :  =, Posbility: 0.7812
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0025
Next Token :  function, Posbility: 0.0041
Next Token :  match, Posbility: 0.0383
Next Token :  , Posbility: 0.0718
Next Token : 
, Posbility: 0.8750
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0044
Next Token :    , Posbility: 0.0064
Next Token : 	, Posbility: 0.0106
Next Token :     , Posbility: 0.1289
Next Token :   , Posbility: 0.8398
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0074
Next Token : (, Posbility: 0.0084
Next Token : let, Posbility: 0.1016
Next Token : match, Posbility: 0.4023
Next Token : if, Posbility: 0.4551
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0011
Next Token :  !, Posbility: 0.0039
Next Token :  String, Posbility: 0.0065
Next Token :  not, Posbility: 0.0107
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0143
Next Token : (, Posbility: 0.0566
Next Token : List, Posbility: 0.0933
Next Token : x, Posbility: 0.1748
Next Token : n, Posbility: 0.6094
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  >=, Posbility: 0.0139
Next Token :  ==, Posbility: 0.0623
Next Token :  <=, Posbility: 0.1689
Next Token :  , Posbility: 0.2793
Next Token :  =, Posbility: 0.4609
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0009
Next Token :  [], Posbility: 0.0009
Next Token :  , Posbility: 0.0023
Next Token :  1, Posbility: 0.0471
Next Token :  0, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ||, Posbility: 0.0050
Next Token :  with, Posbility: 0.0064
Next Token :  , Posbility: 0.0082
Next Token : 
, Posbility: 0.0223
Next Token :  then, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0221
Next Token :  [, Posbility: 0.0322
Next Token :  [], Posbility: 0.0991
Next Token :  , Posbility: 0.3457
Next Token : 
, Posbility: 0.4453
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0043
Next Token :       , Posbility: 0.0117
Next Token :   , Posbility: 0.0193
Next Token :    , Posbility: 0.0320
Next Token :     , Posbility: 0.9336
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0767
Next Token : [, Posbility: 0.0767
Next Token : (, Posbility: 0.0981
Next Token : let, Posbility: 0.1260
Next Token : [], Posbility: 0.3438
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0010
Next Token :   , Posbility: 0.0021
Next Token :  else, Posbility: 0.0084
Next Token :  , Posbility: 0.0095
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0085
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0004
Next Token : els, Posbility: 0.0004
Next Token : when, Posbility: 0.0025
Next Token : elif, Posbility: 0.0036
Next Token : else, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0020
Next Token :  match, Posbility: 0.0033
Next Token :  {, Posbility: 0.0308
Next Token :  , Posbility: 0.2578
Next Token : 
, Posbility: 0.6992
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0002
Next Token :       , Posbility: 0.0025
Next Token :    , Posbility: 0.0077
Next Token :   , Posbility: 0.1055
Next Token :     , Posbility: 0.8828
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : smallest, Posbility: 0.0339
Next Token : List, Posbility: 0.0383
Next Token : if, Posbility: 0.0718
Next Token : match, Posbility: 0.0718
Next Token : let, Posbility: 0.6797
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0286
Next Token :  k, Posbility: 0.0415
Next Token :  pair, Posbility: 0.0776
Next Token :  rec, Posbility: 0.1279
Next Token :  , Posbility: 0.4473
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : smallest, Posbility: 0.0337
Next Token : y, Posbility: 0.0713
Next Token : n, Posbility: 0.0806
Next Token : (, Posbility: 0.1504
Next Token : x, Posbility: 0.3613
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0339
Next Token : _, Posbility: 0.0493
Next Token : s, Posbility: 0.0718
Next Token : ,, Posbility: 0.1338
Next Token :  =, Posbility: 0.6016
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0018
Next Token :  First, Posbility: 0.0030
Next Token : 
, Posbility: 0.0034
Next Token :  first, Posbility: 0.0120
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0200
Next Token : nth, Posbility: 0.0227
Next Token : Array, Posbility: 0.1475
Next Token : List, Posbility: 0.2148
Next Token : x, Posbility: 0.5156
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0];, Posbility: 0.0049
Next Token :  [, Posbility: 0.0063
Next Token :  , Posbility: 0.0071
Next Token : [0], Posbility: 0.0359
Next Token : ., Posbility: 0.9297
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0];, Posbility: 0.0162
Next Token : (, Posbility: 0.0236
Next Token : [0, Posbility: 0.0825
Next Token : [, Posbility: 0.2871
Next Token : [0], Posbility: 0.5391
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0010
Next Token :  and, Posbility: 0.0034
Next Token :  , Posbility: 0.0064
Next Token : 
, Posbility: 0.0289
Next Token :  in, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0004
Next Token : 

, Posbility: 0.0008
Next Token :   , Posbility: 0.0017
Next Token :  , Posbility: 0.0140
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :   , Posbility: 0.0005
Next Token :    , Posbility: 0.0015
Next Token :       , Posbility: 0.0052
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0081
Next Token : smallest, Posbility: 0.0081
Next Token : (, Posbility: 0.0104
Next Token : if, Posbility: 0.0220
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  next, Posbility: 0.0019
Next Token :  first, Posbility: 0.0021
Next Token :  pair, Posbility: 0.0021
Next Token :  rec, Posbility: 0.0040
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0009
Next Token : n, Posbility: 0.0011
Next Token : (, Posbility: 0.0024
Next Token : x, Posbility: 0.0288
Next Token : y, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : 1, Posbility: 0.0006
Next Token : _, Posbility: 0.0012
Next Token : s, Posbility: 0.0028
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  match, Posbility: 0.0003
Next Token : 
, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0010
Next Token : Array, Posbility: 0.0013
Next Token : List, Posbility: 0.0022
Next Token : x, Posbility: 0.0046
Next Token : y, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : [1], Posbility: 0.0008
Next Token : (0), Posbility: 0.0013
Next Token : [, Posbility: 0.0015
Next Token : [0], Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0067
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0005
Next Token :   , Posbility: 0.0009
Next Token :       , Posbility: 0.0019
Next Token :    , Posbility: 0.0085
Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0396
Next Token : [, Posbility: 0.0396
Next Token : if, Posbility: 0.1221
Next Token : smallest, Posbility: 0.2275
Next Token : let, Posbility: 0.4824
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  new, Posbility: 0.0408
Next Token :  next, Posbility: 0.0464
Next Token :  rest, Posbility: 0.0525
Next Token :  rec, Posbility: 0.0981
Next Token :  , Posbility: 0.5625
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0234
Next Token : y, Posbility: 0.0437
Next Token : n, Posbility: 0.0635
Next Token : z, Posbility: 0.0635
Next Token : x, Posbility: 0.5312
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0116
Next Token :  =, Posbility: 0.0132
Next Token : ', Posbility: 0.0757
Next Token : _, Posbility: 0.0972
Next Token : s, Posbility: 0.7188
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0427
Next Token : ',, Posbility: 0.0623
Next Token : _, Posbility: 0.0908
Next Token :  =, Posbility: 0.2178
Next Token : ', Posbility: 0.5195
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0007
Next Token :  and, Posbility: 0.0009
Next Token :   , Posbility: 0.0013
Next Token : ', Posbility: 0.0013
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Remove, Posbility: 0.0019
Next Token :  array, Posbility: 0.0027
Next Token :  remove, Posbility: 0.0040
Next Token : 
, Posbility: 0.0066
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0031
Next Token : (, Posbility: 0.0059
Next Token : List, Posbility: 0.0918
Next Token : Array, Posbility: 0.1040
Next Token : x, Posbility: 0.7695
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1:], Posbility: 0.0025
Next Token :  @, Posbility: 0.0028
Next Token :  |, Posbility: 0.0067
Next Token :  , Posbility: 0.0928
Next Token : ., Posbility: 0.8828
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : drop, Posbility: 0.0048
Next Token : [1:], Posbility: 0.0079
Next Token : [1:, Posbility: 0.0131
Next Token : (, Posbility: 0.1406
Next Token : [, Posbility: 0.8125
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2., Posbility: 0.0014
Next Token : x, Posbility: 0.0016
Next Token :  1, Posbility: 0.0021
Next Token : 1, Posbility: 0.0469
Next Token : 1., Posbility: 0.9414
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ];, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : ], Posbility: 0.0009
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0047
Next Token : ];, Posbility: 0.0068
Next Token : (, Posbility: 0.0128
Next Token : -1], Posbility: 0.0649
Next Token : ], Posbility: 0.8945
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 0.0040
Next Token :  and, Posbility: 0.0157
Next Token :  in, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..] in
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..] and
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..] 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..]

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..]  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..-1]
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0281
Next Token : Length, Posbility: 0.0281
Next Token : Array, Posbility: 0.0593
Next Token : n, Posbility: 0.1826
Next Token : x, Posbility: 0.6406
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0005
Next Token : )], Posbility: 0.0005
Next Token : -1), Posbility: 0.0007
Next Token :  , Posbility: 0.0052
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : @, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token :  |, Posbility: 0.0052
Next Token :  , Posbility: 0.0075
Next Token : ., Posbility: 0.9844
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0006
Next Token : @, Posbility: 0.0016
Next Token : len, Posbility: 0.0044
Next Token : Length, Posbility: 0.0417
Next Token : length, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1, Posbility: 0.0014
Next Token : (), Posbility: 0.0034
Next Token :  -1), Posbility: 0.0104
Next Token : -1), Posbility: 0.0464
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : minus, Posbility: 0.0000
Next Token : −, Posbility: 0.0001
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1)), Posbility: 0.0001
Next Token :  2), Posbility: 0.0003
Next Token :  , Posbility: 0.0066
Next Token :  1, Posbility: 0.0178
Next Token :  1), Posbility: 0.9766
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : ],, Posbility: 0.0015
Next Token : ];, Posbility: 0.0085
Next Token : ], Posbility: 0.9883
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  of, Posbility: 0.0005
Next Token :  , Posbility: 0.0013
Next Token : 
, Posbility: 0.0066
Next Token :  and, Posbility: 0.0123
Next Token :  in, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :   , Posbility: 0.0009
Next Token :  , Posbility: 0.0032
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0003
Next Token : (, Posbility: 0.0013
Next Token : if, Posbility: 0.0017
Next Token : smallest, Posbility: 0.0022
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0001
Next Token :  k, Posbility: 0.0001
Next Token :  mut, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : smallest, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 0.0001
Next Token : x, Posbility: 0.0025
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token :  =, Posbility: 0.0006
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0002
Next Token : Array, Posbility: 0.0003
Next Token : (, Posbility: 0.0007
Next Token : x, Posbility: 0.0025
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : [1:], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : [, Posbility: 0.0003
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : [1,, Posbility: 0.0000
Next Token : [1:, Posbility: 0.0000
Next Token : (, Posbility: 0.0015
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : 2., Posbility: 0.0003
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0067
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : cs, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0003
Next Token : -1), Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1),, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  1, Posbility: 0.0005
Next Token :  1)), Posbility: 0.0006
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ](, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0179
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :       , Posbility: 0.0010
Next Token :   , Posbility: 0.0013
Next Token :    , Posbility: 0.0076
Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0304
Next Token : (, Posbility: 0.0344
Next Token : if, Posbility: 0.0569
Next Token : smallest, Posbility: 0.3281
Next Token : let, Posbility: 0.4766
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  new, Posbility: 0.0291
Next Token :  pair, Posbility: 0.0374
Next Token :  k, Posbility: 0.0422
Next Token :  rec, Posbility: 0.1670
Next Token :  , Posbility: 0.5156
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0410
Next Token : z, Posbility: 0.0410
Next Token : n, Posbility: 0.0869
Next Token : smallest, Posbility: 0.1270
Next Token : x, Posbility: 0.3906
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0170
Next Token :  =, Posbility: 0.0522
Next Token : ', Posbility: 0.0669
Next Token : _, Posbility: 0.1611
Next Token : s, Posbility: 0.5625
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0381
Next Token : 2, Posbility: 0.0554
Next Token :  =, Posbility: 0.1035
Next Token : _, Posbility: 0.2197
Next Token : ', Posbility: 0.4648
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0231
Next Token : s, Posbility: 0.0381
Next Token : _, Posbility: 0.1035
Next Token :  =, Posbility: 0.2188
Next Token : ', Posbility: 0.5273
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0004
Next Token :   , Posbility: 0.0006
Next Token : s, Posbility: 0.0015
Next Token :  , Posbility: 0.0052
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sort, Posbility: 0.0018
Next Token :  array, Posbility: 0.0023
Next Token :  [, Posbility: 0.0063
Next Token : 
, Posbility: 0.0361
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0150
Next Token : List, Posbility: 0.0762
Next Token : Array, Posbility: 0.0859
Next Token : smallest, Posbility: 0.0977
Next Token : x, Posbility: 0.6367
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0002
Next Token : ., Posbility: 0.0004
Next Token :  |, Posbility: 0.0009
Next Token :  , Posbility: 0.0028
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ';, Posbility: 0.0051
Next Token : [, Posbility: 0.0108
Next Token : ',, Posbility: 0.0228
Next Token : ., Posbility: 0.2793
Next Token : ', Posbility: 0.6680
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0034
Next Token : [, Posbility: 0.0104
Next Token :  , Posbility: 0.0118
Next Token :  |, Posbility: 0.0195
Next Token : ., Posbility: 0.9414
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [!, Posbility: 0.0051
Next Token : [0, Posbility: 0.0200
Next Token : filter, Posbility: 0.0258
Next Token : (, Posbility: 0.1309
Next Token : [, Posbility: 0.7500
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0037
Next Token : (, Posbility: 0.0100
Next Token : 2., Posbility: 0.0309
Next Token : x, Posbility: 0.0449
Next Token : 1., Posbility: 0.9023
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ], Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : -1], Posbility: 0.0002
Next Token : ], Posbility: 0.0013
Next Token : x, Posbility: 0.0085
Next Token : (, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : min, Posbility: 0.0002
Next Token : len, Posbility: 0.0003
Next Token : n, Posbility: 0.0007
Next Token : (, Posbility: 0.0067
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 0.0002
Next Token : ', Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : '+, Posbility: 0.0006
Next Token : ';, Posbility: 0.0009
Next Token : ',, Posbility: 0.0038
Next Token : ., Posbility: 0.0530
Next Token : ', Posbility: 0.9375
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : Length, Posbility: 0.0003
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token : )], Posbility: 0.0007
Next Token :  -1), Posbility: 0.0009
Next Token : -1), Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -2, Posbility: 0.0001
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1)), Posbility: 0.0001
Next Token :  2), Posbility: 0.0002
Next Token :  1, Posbility: 0.0015
Next Token :  , Posbility: 0.0067
Next Token :  1), Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ],, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ]., Posbility: 0.0002
Next Token : ];, Posbility: 0.0009
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  and, Posbility: 0.0009
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token : 

, Posbility: 0.0013
Next Token :  , Posbility: 0.0013
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0024
Next Token : (, Posbility: 0.0040
Next Token : if, Posbility: 0.0045
Next Token : smallest, Posbility: 0.0084
Next Token : let, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  result, Posbility: 0.0003
Next Token :  k, Posbility: 0.0004
Next Token :  pair, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0012
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : n, Posbility: 0.0005
Next Token : smallest, Posbility: 0.0024
Next Token : x, Posbility: 0.0109
Next Token : y, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ''', Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token :  =, Posbility: 0.0006
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0019
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ';, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : [1:, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : 1., Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0025
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : ., Posbility: 0.0002
Next Token : 6, Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Length, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -1), Posbility: 0.0001
Next Token :  -1), Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  1)), Posbility: 0.0001
Next Token :  1, Posbility: 0.0003
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ](, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0179
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :       , Posbility: 0.0007
Next Token :   , Posbility: 0.0019
Next Token :    , Posbility: 0.0052
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0386
Next Token : List, Posbility: 0.0386
Next Token : if, Posbility: 0.0562
Next Token : smallest, Posbility: 0.2520
Next Token : let, Posbility: 0.5312
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0298
Next Token :  pair, Posbility: 0.0298
Next Token :  k, Posbility: 0.0383
Next Token :  rec, Posbility: 0.1709
Next Token :  , Posbility: 0.5273
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0256
Next Token : z, Posbility: 0.0291
Next Token : n, Posbility: 0.0698
Next Token : smallest, Posbility: 0.1016
Next Token : x, Posbility: 0.5156
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0125
Next Token :  =, Posbility: 0.0635
Next Token : _, Posbility: 0.0723
Next Token : ', Posbility: 0.0723
Next Token : s, Posbility: 0.6836
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0219
Next Token : _, Posbility: 0.0522
Next Token : 2, Posbility: 0.0593
Next Token :  =, Posbility: 0.1108
Next Token : ', Posbility: 0.6367
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0063
Next Token : s, Posbility: 0.0251
Next Token : ',, Posbility: 0.0322
Next Token :  =, Posbility: 0.0684
Next Token : ', Posbility: 0.8320
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0063
Next Token : ',, Posbility: 0.0172
Next Token : s, Posbility: 0.0413
Next Token :  =, Posbility: 0.0874
Next Token : ', Posbility: 0.8281
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0020
Next Token : 1, Posbility: 0.0048
Next Token : s, Posbility: 0.0061
Next Token : ', Posbility: 0.0659
Next Token :  =, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0003
Next Token :  [], Posbility: 0.0006
Next Token :  [, Posbility: 0.0017
Next Token : 
, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : smallest, Posbility: 0.0019
Next Token : Array, Posbility: 0.0028
Next Token : (, Posbility: 0.0031
Next Token : List, Posbility: 0.0031
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ., Posbility: 0.0002
Next Token : ', Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0006
Next Token : ., Posbility: 0.0013
Next Token : ',, Posbility: 0.0030
Next Token : ''', Posbility: 0.0371
Next Token : ', Posbility: 0.9531
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ';, Posbility: 0.0017
Next Token : ',, Posbility: 0.0053
Next Token : ''', Posbility: 0.0305
Next Token : ., Posbility: 0.0649
Next Token : ', Posbility: 0.8945
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : [, Posbility: 0.0004
Next Token :  in, Posbility: 0.0019
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [], Posbility: 0.0001
Next Token : [0], Posbility: 0.0001
Next Token : [0, Posbility: 0.0010
Next Token : (, Posbility: 0.0067
Next Token : [, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : 2., Posbility: 0.0006
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -1], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ], Posbility: 0.0001
Next Token : x, Posbility: 0.0004
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : min, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ',, Posbility: 0.0002
Next Token : '^, Posbility: 0.0002
Next Token : ''', Posbility: 0.0013
Next Token : 1, Posbility: 0.0032
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs'
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ',, Posbility: 0.0002
Next Token : 2., Posbility: 0.0003
Next Token : ''', Posbility: 0.0004
Next Token : ., Posbility: 0.0420
Next Token : ', Posbility: 0.9570
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : -1), Posbility: 0.0002
Next Token : )], Posbility: 0.0003
Next Token :  -1), Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0000
Next Token : -3, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1)), Posbility: 0.0000
Next Token :  2), Posbility: 0.0001
Next Token :  1, Posbility: 0.0006
Next Token :  , Posbility: 0.0009
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ],, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ]., Posbility: 0.0001
Next Token : ];, Posbility: 0.0002
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  and, Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0006
Next Token : (, Posbility: 0.0007
Next Token : if, Posbility: 0.0007
Next Token : smallest, Posbility: 0.0013
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  pair, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : smallest, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0028
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0000
Next Token : ~~~, Posbility: 0.0000
Next Token : """, Posbility: 0.0000
Next Token : ', Posbility: 0.0025
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0006
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token : ''', Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ., Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1:, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1]., Posbility: 0.0000
Next Token : _1., Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 。。, Posbility: 0.0000
Next Token : 1., Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : x, Posbility: 0.0012
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : cs, Posbility: 0.0000
Next Token : sv, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ’, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys'
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 6, Posbility: 0.0000
Next Token : 1., Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 长度, Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -5, Posbility: 0.0000
Next Token : -3, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1)), Posbility: 0.0000
Next Token :  1, Posbility: 0.0002
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ](, Posbility: 0.0000
Next Token : ]., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0000
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0474
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :       , Posbility: 0.0010
Next Token :   , Posbility: 0.0022
Next Token :    , Posbility: 0.0059
Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0413
Next Token : [, Posbility: 0.0413
Next Token : if, Posbility: 0.0469
Next Token : smallest, Posbility: 0.2100
Next Token : let, Posbility: 0.5703
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0193
Next Token :  k, Posbility: 0.0281
Next Token :  res, Posbility: 0.0317
Next Token :  rec, Posbility: 0.1108
Next Token :  , Posbility: 0.6367
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0140
Next Token : pairs, Posbility: 0.0140
Next Token : n, Posbility: 0.0432
Next Token : smallest, Posbility: 0.0918
Next Token : x, Posbility: 0.6758
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0057
Next Token : _, Posbility: 0.0121
Next Token : ', Posbility: 0.0227
Next Token :  =, Posbility: 0.0698
Next Token : s, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ____, Posbility: 0.0073
Next Token : """, Posbility: 0.0120
Next Token :  =, Posbility: 0.0197
Next Token : ', Posbility: 0.3965
Next Token : ''', Posbility: 0.5078
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0021
Next Token : ',, Posbility: 0.0024
Next Token :  =, Posbility: 0.0035
Next Token : ''', Posbility: 0.1167
Next Token : ', Posbility: 0.8633
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0003
Next Token : =, Posbility: 0.0004
Next Token :   , Posbility: 0.0005
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token : 
, Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0001
Next Token : List, Posbility: 0.0003
Next Token : smallest, Posbility: 0.0006
Next Token : (, Posbility: 0.0010
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ', Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ~~~, Posbility: 0.0003
Next Token : '^, Posbility: 0.0003
Next Token : ", Posbility: 0.0006
Next Token : ''', Posbility: 0.2930
Next Token : ', Posbility: 0.7031
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0004
Next Token : ., Posbility: 0.0017
Next Token : ", Posbility: 0.0019
Next Token : ''', Posbility: 0.4043
Next Token : ', Posbility: 0.5898
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ';, Posbility: 0.0007
Next Token : ',, Posbility: 0.0033
Next Token : ., Posbility: 0.1250
Next Token : ''', Posbility: 0.2334
Next Token : ', Posbility: 0.6328
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : 1., Posbility: 0.0001
Next Token : ', Posbility: 0.0125
Next Token : ., Posbility: 0.9883
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0005
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 2., Posbility: 0.0002
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 。。, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : min, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  '', Posbility: 0.0001
Next Token : ‘, Posbility: 0.0001
Next Token : '^, Posbility: 0.0003
Next Token : ''', Posbility: 0.3770
Next Token : ', Posbility: 0.6211
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs'
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : '\, Posbility: 0.0001
Next Token : ~~~, Posbility: 0.0001
Next Token : ., Posbility: 0.0002
Next Token : ''', Posbility: 0.1826
Next Token : ', Posbility: 0.8164
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : `, Posbility: 0.0001
Next Token : ``, Posbility: 0.0001
Next Token : ', Posbility: 0.0017
Next Token : ''', Posbility: 0.0085
Next Token : ., Posbility: 0.9883
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : -1), Posbility: 0.0001
Next Token : )], Posbility: 0.0001
Next Token :  -1), Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : −, Posbility: 0.0000
Next Token : -3, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1)), Posbility: 0.0000
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  1, Posbility: 0.0002
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ]., Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  and, Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0006
Next Token : (, Posbility: 0.0012
Next Token : [, Posbility: 0.0012
Next Token : smallest, Posbility: 0.0025
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  result, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  k, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 0.0001
Next Token : smallest, Posbility: 0.0002
Next Token : x, Posbility: 0.0025
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ''', Posbility: 0.0006
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ``, Posbility: 0.0001
Next Token : ~~~, Posbility: 0.0002
Next Token :  '', Posbility: 0.0002
Next Token : ', Posbility: 0.2227
Next Token : ''', Posbility: 0.7773
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : sv, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ~~~, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : ’, Posbility: 0.0001
Next Token : ''', Posbility: 0.2021
Next Token : ', Posbility: 0.7969
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ``, Posbility: 0.0001
Next Token : ’, Posbility: 0.0002
Next Token : '\, Posbility: 0.0002
Next Token : ''', Posbility: 0.0474
Next Token : ', Posbility: 0.9531
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 。, Posbility: 0.0000
Next Token : .""", Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1]., Posbility: 0.0000
Next Token : _1., Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 。。, Posbility: 0.0000
Next Token : 1., Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : sz, Posbility: 0.0000
Next Token : sv, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0012
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys'
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : .""", Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : LENGTH, Posbility: 0.0000
Next Token : 长度, Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -5, Posbility: 0.0000
Next Token : -3, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1)), Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]", Posbility: 0.0000
Next Token : ](, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0000
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0474
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :       , Posbility: 0.0009
Next Token :   , Posbility: 0.0015
Next Token :    , Posbility: 0.0059
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0386
Next Token : (, Posbility: 0.0437
Next Token : [, Posbility: 0.0496
Next Token : smallest, Posbility: 0.2520
Next Token : let, Posbility: 0.5352
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0159
Next Token :  res, Posbility: 0.0261
Next Token :  k, Posbility: 0.0297
Next Token :  rec, Posbility: 0.1035
Next Token :  , Posbility: 0.6758
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0101
Next Token : pairs, Posbility: 0.0115
Next Token : n, Posbility: 0.0400
Next Token : smallest, Posbility: 0.0845
Next Token : x, Posbility: 0.7070
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0034
Next Token : _, Posbility: 0.0073
Next Token : ', Posbility: 0.0223
Next Token :  =, Posbility: 0.1001
Next Token : s, Posbility: 0.8398
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0086
Next Token : ____, Posbility: 0.0110
Next Token :  =, Posbility: 0.0559
Next Token : ''', Posbility: 0.2500
Next Token : ', Posbility: 0.6016
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0008
Next Token : ", Posbility: 0.0012
Next Token : """, Posbility: 0.0034
Next Token : ', Posbility: 0.3438
Next Token : ''', Posbility: 0.6445
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0028
Next Token : ',, Posbility: 0.0028
Next Token :  =, Posbility: 0.0099
Next Token : ''', Posbility: 0.0830
Next Token : ', Posbility: 0.8906
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0031
Next Token : 1, Posbility: 0.0035
Next Token : s, Posbility: 0.0095
Next Token : ', Posbility: 0.2168
Next Token :  =, Posbility: 0.7539
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  [], Posbility: 0.0004
Next Token :  [, Posbility: 0.0009
Next Token : 
, Posbility: 0.0028
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0005
Next Token : List, Posbility: 0.0015
Next Token : smallest, Posbility: 0.0017
Next Token : (, Posbility: 0.0028
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token : ', Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0002
Next Token : ';, Posbility: 0.0002
Next Token : ", Posbility: 0.0003
Next Token : ''', Posbility: 0.0371
Next Token : ', Posbility: 0.9609
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0004
Next Token : """, Posbility: 0.0005
Next Token : ", Posbility: 0.0019
Next Token : ''', Posbility: 0.4043
Next Token : ', Posbility: 0.5898
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0009
Next Token : `, Posbility: 0.0011
Next Token : ., Posbility: 0.0483
Next Token : ', Posbility: 0.3555
Next Token : ''', Posbility: 0.5859
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1., Posbility: 0.0000
Next Token : [, Posbility: 0.0004
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : [0, Posbility: 0.0004
Next Token : (, Posbility: 0.0015
Next Token : [, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : 2., Posbility: 0.0006
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : min, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : ''', Posbility: 0.0001
Next Token : 1, Posbility: 0.0046
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 6, Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : ''', Posbility: 0.0002
Next Token : 1, Posbility: 0.0006
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ", Posbility: 0.0004
Next Token : ``, Posbility: 0.0006
Next Token : ., Posbility: 0.1533
Next Token : ', Posbility: 0.3691
Next Token : ''', Posbility: 0.4727
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1., Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : )], Posbility: 0.0001
Next Token :  -1), Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3), Posbility: 0.0000
Next Token :  2), Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  1, Posbility: 0.0004
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ]., Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0006
Next Token :  and, Posbility: 0.0015
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token : [, Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token : smallest, Posbility: 0.0009
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  k, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : smallest, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 0.0022
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ds, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : ''', Posbility: 0.0006
Next Token : 1, Posbility: 0.0012
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ''', Posbility: 0.0004
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ’, Posbility: 0.0001
Next Token : ``, Posbility: 0.0001
Next Token :  '', Posbility: 0.0006
Next Token : ', Posbility: 0.0203
Next Token : ''', Posbility: 0.9805
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sv, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ’, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ''', Posbility: 0.0004
Next Token : 1, Posbility: 0.0009
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ’, Posbility: 0.0000
Next Token : `, Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : ''', Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ’, Posbility: 0.0001
Next Token : ``, Posbility: 0.0001
Next Token : .''',, Posbility: 0.0001
Next Token : ', Posbility: 0.0012
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 。, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1]., Posbility: 0.0000
Next Token : _1., Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : sv, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0006
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ’, Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : ''', Posbility: 0.0002
Next Token : 1, Posbility: 0.0006
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : &#8217;, Posbility: 0.0001
Next Token : """, Posbility: 0.0001
Next Token : ’, Posbility: 0.0007
Next Token : ', Posbility: 0.0110
Next Token : ''', Posbility: 0.9883
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 长度, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1)), Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]), Posbility: 0.0000
Next Token : ]", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0000
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0010
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0601
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :       , Posbility: 0.0008
Next Token :   , Posbility: 0.0013
Next Token :    , Posbility: 0.0059
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0249
Next Token : [, Posbility: 0.0249
Next Token : (, Posbility: 0.0410
Next Token : smallest, Posbility: 0.3438
Next Token : let, Posbility: 0.5000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0131
Next Token :  k, Posbility: 0.0245
Next Token :  res, Posbility: 0.0245
Next Token :  rec, Posbility: 0.0854
Next Token :  , Posbility: 0.7148
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0077
Next Token : s, Posbility: 0.0112
Next Token : n, Posbility: 0.0305
Next Token : smallest, Posbility: 0.0645
Next Token : x, Posbility: 0.7891
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0022
Next Token : _, Posbility: 0.0042
Next Token : ', Posbility: 0.0146
Next Token :  =, Posbility: 0.0579
Next Token : s, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0060
Next Token : 1, Posbility: 0.0239
Next Token :  =, Posbility: 0.0393
Next Token : ''', Posbility: 0.0942
Next Token : ', Posbility: 0.7891
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0027
Next Token : s, Posbility: 0.0030
Next Token : ", Posbility: 0.0034
Next Token : ''', Posbility: 0.2402
Next Token : ', Posbility: 0.7383
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0003
Next Token : """, Posbility: 0.0004
Next Token :  =, Posbility: 0.0007
Next Token : ''', Posbility: 0.3477
Next Token : ', Posbility: 0.6484
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0004
Next Token : ’, Posbility: 0.0005
Next Token :  =, Posbility: 0.0031
Next Token : ', Posbility: 0.2432
Next Token : ''', Posbility: 0.7500
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token : =, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : 
, Posbility: 0.0013
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : smallest, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ’, Posbility: 0.0002
Next Token : """, Posbility: 0.0002
Next Token : ", Posbility: 0.0006
Next Token : ''', Posbility: 0.1064
Next Token : ', Posbility: 0.8906
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0002
Next Token : """, Posbility: 0.0005
Next Token : ", Posbility: 0.0013
Next Token : ''', Posbility: 0.4062
Next Token : ', Posbility: 0.5898
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : '\, Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token : """, Posbility: 0.0003
Next Token : ', Posbility: 0.1328
Next Token : ''', Posbility: 0.8672
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : .""", Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : ''', Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 2., Posbility: 0.0001
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : sa, Posbility: 0.0000
Next Token : sv, Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ‘, Posbility: 0.0000
Next Token : """, Posbility: 0.0001
Next Token : ’, Posbility: 0.0001
Next Token : ', Posbility: 0.0757
Next Token : ''', Posbility: 0.9219
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs'''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ``, Posbility: 0.0000
Next Token : ‘, Posbility: 0.0000
Next Token : ’, Posbility: 0.0001
Next Token : ''', Posbility: 0.0097
Next Token : ', Posbility: 0.9883
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ’, Posbility: 0.0001
Next Token : ``, Posbility: 0.0001
Next Token : ''', Posbility: 0.0050
Next Token : ', Posbility: 0.1475
Next Token : ., Posbility: 0.8477
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : −, Posbility: 0.0000
Next Token : -3, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1)), Posbility: 0.0000
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ]., Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  and, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : smallest, Posbility: 0.0001
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  k, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0006
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ds, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : """, Posbility: 0.0000
Next Token : ~~~, Posbility: 0.0001
Next Token : $$, Posbility: 0.0001
Next Token : ', Posbility: 0.0012
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0000
Next Token : ~~~, Posbility: 0.0000
Next Token :  '', Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys''''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : sv, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0000
Next Token : ~~~, Posbility: 0.0000
Next Token : ’, Posbility: 0.0002
Next Token : ', Posbility: 0.0474
Next Token : ''', Posbility: 0.9531
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : ., Posbility: 0.0952
Next Token : ', Posbility: 0.9062
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1:, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _1., Posbility: 0.0000
Next Token : [1]., Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : yy, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : sr, Posbility: 0.0000
Next Token : sv, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ~~~, Posbility: 0.0000
Next Token : ‘, Posbility: 0.0000
Next Token : ’, Posbility: 0.0001
Next Token : ', Posbility: 0.0028
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys'''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ‘, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : .""", Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : 长度, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  1)), Posbility: 0.0001
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ]", Posbility: 0.0000
Next Token : ]), Posbility: 0.0000
Next Token : ];, Posbility: 0.0000
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0179
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :       , Posbility: 0.0005
Next Token :   , Posbility: 0.0008
Next Token :    , Posbility: 0.0041
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0164
Next Token : [, Posbility: 0.0238
Next Token : (, Posbility: 0.0393
Next Token : smallest, Posbility: 0.1758
Next Token : let, Posbility: 0.6953
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  result, Posbility: 0.0059
Next Token :  res, Posbility: 0.0096
Next Token :  k, Posbility: 0.0124
Next Token :  rec, Posbility: 0.0381
Next Token :  , Posbility: 0.8711
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0041
Next Token : s, Posbility: 0.0087
Next Token : n, Posbility: 0.0128
Next Token : smallest, Posbility: 0.0347
Next Token : x, Posbility: 0.8945
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0010
Next Token : x, Posbility: 0.0011
Next Token : ', Posbility: 0.0050
Next Token :  =, Posbility: 0.0369
Next Token : s, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : """, Posbility: 0.0009
Next Token : ", Posbility: 0.0012
Next Token :  =, Posbility: 0.0014
Next Token : ''', Posbility: 0.0664
Next Token : ', Posbility: 0.9180
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0002
Next Token : $$, Posbility: 0.0002
Next Token : """, Posbility: 0.0003
Next Token : ''', Posbility: 0.3203
Next Token : ', Posbility: 0.6797
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ~~~, Posbility: 0.0001
Next Token : """, Posbility: 0.0002
Next Token :  '', Posbility: 0.0004
Next Token : ', Posbility: 0.4375
Next Token : ''', Posbility: 0.5625
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0002
Next Token :  '', Posbility: 0.0013
Next Token :  =, Posbility: 0.0095
Next Token : ', Posbility: 0.0256
Next Token : ''', Posbility: 0.9609
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs''''''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token : ', Posbility: 0.0003
Next Token :  in, Posbility: 0.0004
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : 
, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : smallest, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ``, Posbility: 0.0002
Next Token : """, Posbility: 0.0003
Next Token : ’, Posbility: 0.0004
Next Token : ''', Posbility: 0.5000
Next Token : ', Posbility: 0.5000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0008
Next Token : """, Posbility: 0.0009
Next Token : ., Posbility: 0.0011
Next Token : ''', Posbility: 0.4043
Next Token : ', Posbility: 0.5859
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0018
Next Token : """, Posbility: 0.0029
Next Token : ., Posbility: 0.0061
Next Token : ', Posbility: 0.4316
Next Token : ''', Posbility: 0.5547
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [[, Posbility: 0.0000
Next Token : [, Posbility: 0.0002
Next Token : ', Posbility: 0.0007
Next Token : ''', Posbility: 0.0010
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1:, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 2., Posbility: 0.0002
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ''', Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : sv, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ``, Posbility: 0.0000
Next Token : $$, Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token : ', Posbility: 0.0059
Next Token : ''', Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ``, Posbility: 0.0001
Next Token : ‘, Posbility: 0.0001
Next Token : ’, Posbility: 0.0001
Next Token : ''', Posbility: 0.3203
Next Token : ', Posbility: 0.6797
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs''''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ’, Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token : ., Posbility: 0.0349
Next Token : ''', Posbility: 0.0649
Next Token : ', Posbility: 0.8984
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : .""", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : −, Posbility: 0.0000
Next Token : -3, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1)), Posbility: 0.0000
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 0.0002
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]", Posbility: 0.0000
Next Token : ]., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : smallest, Posbility: 0.0004
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  k, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0009
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ds, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ~~~, Posbility: 0.0001
Next Token : $$, Posbility: 0.0001
Next Token : ’, Posbility: 0.0001
Next Token : ', Posbility: 0.0052
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ’, Posbility: 0.0000
Next Token : ~~~, Posbility: 0.0000
Next Token :  '', Posbility: 0.0001
Next Token : ', Posbility: 0.0004
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =', Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 0.2949
Next Token : ', Posbility: 0.7070
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Y, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sz, Posbility: 0.0000
Next Token : sv, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ~~~, Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token : $$, Posbility: 0.0000
Next Token : ', Posbility: 0.0002
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ‘, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token : ''', Posbility: 0.0003
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : .""", Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1:, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _1., Posbility: 0.0000
Next Token : [1]., Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Y, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : sv, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ‘, Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token : $$, Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ‘, Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0004
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys''''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ’, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 。, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : .""", Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : LENGTH, Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : 长度, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  1)), Posbility: 0.0002
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ]", Posbility: 0.0000
Next Token : ]), Posbility: 0.0000
Next Token : ];, Posbility: 0.0000
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0007
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0474
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0005
Next Token :       , Posbility: 0.0007
Next Token :   , Posbility: 0.0007
Next Token :    , Posbility: 0.0052
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0186
Next Token : [, Posbility: 0.0210
Next Token : (, Posbility: 0.0393
Next Token : smallest, Posbility: 0.2559
Next Token : let, Posbility: 0.6133
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  result, Posbility: 0.0074
Next Token :  res, Posbility: 0.0121
Next Token :  k, Posbility: 0.0176
Next Token :  rec, Posbility: 0.0374
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0058
Next Token : s, Posbility: 0.0096
Next Token : n, Posbility: 0.0179
Next Token : smallest, Posbility: 0.0381
Next Token : x, Posbility: 0.8672
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0009
Next Token : _, Posbility: 0.0014
Next Token : ', Posbility: 0.0057
Next Token :  =, Posbility: 0.0327
Next Token : s, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0019
Next Token : """, Posbility: 0.0028
Next Token :  =, Posbility: 0.0096
Next Token : ''', Posbility: 0.1934
Next Token : ', Posbility: 0.7656
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0008
Next Token : $$, Posbility: 0.0008
Next Token : """, Posbility: 0.0017
Next Token : ''', Posbility: 0.4648
Next Token : ', Posbility: 0.5273
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : """, Posbility: 0.0015
Next Token :  '', Posbility: 0.0019
Next Token :  =, Posbility: 0.0126
Next Token : ''', Posbility: 0.2871
Next Token : ', Posbility: 0.6914
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ’, Posbility: 0.0003
Next Token : ~~~, Posbility: 0.0004
Next Token : """, Posbility: 0.0015
Next Token : ', Posbility: 0.1328
Next Token : ''', Posbility: 0.8633
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0006
Next Token : """, Posbility: 0.0006
Next Token : ", Posbility: 0.0010
Next Token : ', Posbility: 0.4668
Next Token : ''', Posbility: 0.5273
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : =, Posbility: 0.0004
Next Token :  in, Posbility: 0.0007
Next Token : ', Posbility: 0.0330
Next Token :  =, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : 
, Posbility: 0.0015
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : smallest, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ``, Posbility: 0.0001
Next Token : ’, Posbility: 0.0001
Next Token : """, Posbility: 0.0002
Next Token : ', Posbility: 0.0085
Next Token : ''', Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : """, Posbility: 0.0001
Next Token : ‘, Posbility: 0.0001
Next Token : ’, Posbility: 0.0002
Next Token : ', Posbility: 0.4062
Next Token : ''', Posbility: 0.5938
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ''', Posbility: 0.0005
Next Token : ., Posbility: 0.0125
Next Token : ', Posbility: 0.9883
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs'''''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : ''', Posbility: 0.0048
Next Token : ., Posbility: 0.4355
Next Token : ', Posbility: 0.5586
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 2., Posbility: 0.0001
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : sz, Posbility: 0.0000
Next Token : sv, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : """, Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token : $$, Posbility: 0.0001
Next Token : ', Posbility: 0.0009
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : '\, Posbility: 0.0000
Next Token : ‘, Posbility: 0.0000
Next Token :  '', Posbility: 0.0001
Next Token : ', Posbility: 0.0046
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs''''''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ’, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token : ''', Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ''', Posbility: 0.0002
Next Token : ', Posbility: 0.2695
Next Token : ., Posbility: 0.7305
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : )], Posbility: 0.0001
Next Token :  -1), Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : −, Posbility: 0.0000
Next Token : -3, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1)), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 0.0003
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]", Posbility: 0.0000
Next Token : ]., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0003
Next Token : 
, Posbility: 0.0012
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : smallest, Posbility: 0.0003
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  k, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0005
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let y
 score:False
Error type: noerr
---------------------------
Next Token : ''', Posbility: 0.0000
Next Token : ds, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys
 score:False
Error type: noerr
---------------------------
Next Token : ’, Posbility: 0.0001
Next Token : ~~~, Posbility: 0.0001
Next Token : $$, Posbility: 0.0002
Next Token : ', Posbility: 0.0004
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys'''
 score:False
Error type: noerr
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : $$, Posbility: 0.0000
Next Token : ~~~, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''
 score:False
Error type: noerr
---------------------------
Next Token : '\0', Posbility: 0.0001
Next Token : ~~~, Posbility: 0.0001
Next Token :  '', Posbility: 0.0002
Next Token : ', Posbility: 0.0028
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys'''''''''
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' =
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = 
 score:False
Error type: noerr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = y
 score:False
Error type: noerr
---------------------------
Next Token : sv, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys
 score:False
Error type: noerr
---------------------------
Next Token : ~~~, Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token : $$, Posbility: 0.0001
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys'''
 score:False
Error type: noerr
---------------------------
Next Token : $$, Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token :  '', Posbility: 0.0001
Next Token : ', Posbility: 0.0004
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''
 score:False
Error type: noerr
---------------------------
Next Token : `, Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys'''''''
 score:False
Error type: noerr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ., Posbility: 0.0003
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.
 score:False
Error type: noerr
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[
 score:False
Error type: noerr
---------------------------
Next Token : [1]., Posbility: 0.0000
Next Token : _1., Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1.
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..
 score:False
Error type: noerr
---------------------------
Next Token : ], Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(y
 score:False
Error type: noerr
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : sv, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys
 score:False
Error type: noerr
---------------------------
Next Token : ‘, Posbility: 0.0000
Next Token : ’, Posbility: 0.0001
Next Token : $$, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''
 score:False
Error type: noerr
---------------------------
Next Token : ’, Posbility: 0.0001
Next Token : ‘, Posbility: 0.0002
Next Token :  '', Posbility: 0.0002
Next Token : ', Posbility: 0.0008
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys''''''
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''
 score:False
Error type: noerr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : 1., Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ', Posbility: 0.0005
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.
 score:False
Error type: noerr
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token : LENGTH, Posbility: 0.0000
Next Token : 长度, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length
 score:False
Error type: noerr
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length 
 score:False
Error type: noerr
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length -
 score:False
Error type: noerr
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  1)), Posbility: 0.0001
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ]", Posbility: 0.0000
Next Token : ]), Posbility: 0.0000
Next Token : ];, Posbility: 0.0000
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)]
 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0012
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0474
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :       , Posbility: 0.0006
Next Token :   , Posbility: 0.0010
Next Token :    , Posbility: 0.0052
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0154
Next Token : [, Posbility: 0.0287
Next Token : (, Posbility: 0.0474
Next Token : smallest, Posbility: 0.2715
Next Token : let, Posbility: 0.5781
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  result, Posbility: 0.0102
Next Token :  res, Posbility: 0.0168
Next Token :  k, Posbility: 0.0216
Next Token :  rec, Posbility: 0.0403
Next Token :  , Posbility: 0.8086
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0051
Next Token : pairs, Posbility: 0.0058
Next Token : n, Posbility: 0.0177
Next Token : smallest, Posbility: 0.0481
Next Token : x, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let x
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0011
Next Token : _, Posbility: 0.0026
Next Token : ', Posbility: 0.0071
Next Token :  =, Posbility: 0.0464
Next Token : s, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0020
Next Token : _, Posbility: 0.0029
Next Token :  =, Posbility: 0.0349
Next Token : ''', Posbility: 0.2275
Next Token : ', Posbility: 0.6992
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'
 score:False
Error type: noerr
---------------------------
Next Token : """, Posbility: 0.0014
Next Token :  '', Posbility: 0.0019
Next Token :  =, Posbility: 0.0031
Next Token : ''', Posbility: 0.4004
Next Token : ', Posbility: 0.5820
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs''
 score:False
Error type: noerr
---------------------------
Next Token :  '', Posbility: 0.0016
Next Token : """, Posbility: 0.0019
Next Token :  =, Posbility: 0.0094
Next Token : ''', Posbility: 0.4004
Next Token : ', Posbility: 0.5820
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''
 score:False
Error type: noerr
---------------------------
Next Token : ’, Posbility: 0.0004
Next Token : ~~~, Posbility: 0.0004
Next Token : """, Posbility: 0.0009
Next Token : ', Posbility: 0.0420
Next Token : ''', Posbility: 0.9531
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs''''''
 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0000
Next Token : ~~~, Posbility: 0.0001
Next Token : """, Posbility: 0.0004
Next Token : ', Posbility: 0.0374
Next Token : ''', Posbility: 0.9609
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0010
Next Token : ’, Posbility: 0.0014
Next Token :  =, Posbility: 0.0034
Next Token : ''', Posbility: 0.0596
Next Token : ', Posbility: 0.9297
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs''''''''''
 score:False
Error type: noerr
---------------------------
Next Token :  '', Posbility: 0.0003
Next Token :  in, Posbility: 0.0008
Next Token : ''', Posbility: 0.0010
Next Token : ', Posbility: 0.1187
Next Token :  =, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = 
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : smallest, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs
 score:False
Error type: noerr
---------------------------
Next Token : ``, Posbility: 0.0001
Next Token : $$, Posbility: 0.0001
Next Token : ’, Posbility: 0.0001
Next Token : ', Posbility: 0.0036
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''
 score:False
Error type: noerr
---------------------------
Next Token : """, Posbility: 0.0000
Next Token : ~~~, Posbility: 0.0001
Next Token : ’, Posbility: 0.0001
Next Token : ', Posbility: 0.0067
Next Token : ''', Posbility: 0.9922
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs''''''
 score:False
Error type: noerr
---------------------------
Next Token : ", Posbility: 0.0003
Next Token : ’, Posbility: 0.0004
Next Token : '^, Posbility: 0.0004
Next Token : ', Posbility: 0.3203
Next Token : ''', Posbility: 0.6758
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''
 score:False
Error type: noerr
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : [, Posbility: 0.0005
Next Token : ', Posbility: 0.0025
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.
 score:False
Error type: noerr
---------------------------
Next Token : length, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 2., Posbility: 0.0001
Next Token : 1., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[1.
 score:False
Error type: noerr
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[1..
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[1..(
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[1..(x
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : sz, Posbility: 0.0000
Next Token : sv, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[1..(xs
 score:False
Error type: noerr
---------------------------
Next Token : ’, Posbility: 0.0001
Next Token : ``, Posbility: 0.0001
Next Token : $$, Posbility: 0.0002
Next Token : ', Posbility: 0.0003
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[1..(xs'''
 score:False
Error type: noerr
---------------------------
Next Token : $$, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ‘, Posbility: 0.0000
Next Token : ', Posbility: 0.0003
Next Token : ''', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[1..(xs''''''
 score:False
Error type: noerr
---------------------------
Next Token :  '', Posbility: 0.0001
Next Token : ’, Posbility: 0.0001
Next Token : ‘, Posbility: 0.0002
Next Token : ', Posbility: 0.0203
Next Token : ''', Posbility: 0.9805
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[1..(xs'''''''''
 score:False
Error type: noerr
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ', Posbility: 0.0025
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[1..(xs'''''''''.
 score:False
Error type: noerr
---------------------------
Next Token : len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[1..(xs'''''''''.length
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[1..(xs'''''''''.length 
 score:False
Error type: noerr
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[1..(xs'''''''''.length -
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1)), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0002
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[1..(xs'''''''''.length - 1)
 score:False
Error type: noerr
---------------------------
Next Token : ]), Posbility: 0.0000
Next Token : ]., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0000
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. *)
let rec smallest_pairs n xs ys =
  if n = 0 then
    []
  else
    let x = xs.[0] in
    let y = ys.[0] in
    let xs' = xs.[1..(xs.length - 1)] in
    let ys' = ys.[1..(ys.length - 1)] in
    let xs'' = xs'.[1..(xs'.length - 1)] in
    let ys'' = ys'.[1..(ys'.length - 1)] in
    let xs''' = xs''.[1..(xs''.length - 1)] in
    let ys''' = ys''.[1..(ys''.length - 1)] in
    let xs'''' = xs'''.[1..(xs''.length - 1)] in
    let ys'''' = ys''.[1..(ys''.length - 1)] in
    let xs''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs'''''' = xs'''''.[1..(xs''''.length - 1)] in
    let ys'''''' = ys'''''.[1..(ys''''.length - 1)] in
    let xs'''''''' = xs'''''.[1..(xs'''''.length - 1)] in
    let ys'''''''' = ys'''''.[1..(ys'''''.length - 1)] in
    let xs''''''''' = xs''''''''.[1..(xs'''''''.length - 1)] in
    let ys''''''''' = ys''''''''.[1..(ys'''''''.length - 1)] in
    let xs'''''''''' = xs'''''''''.[1..(xs'''''''''.length - 1)]
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>