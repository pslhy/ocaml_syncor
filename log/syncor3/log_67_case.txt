code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0233
Next Token :  float, Posbility: 0.0559
Next Token :  convert, Posbility: 0.0718
Next Token :  , Posbility: 0.1338
Next Token :  rec, Posbility: 0.6016
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0376
Next Token :  to, Posbility: 0.0425
Next Token :  float, Posbility: 0.0796
Next Token :  convert, Posbility: 0.2773
Next Token :  , Posbility: 0.3145
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0344
Next Token : flatten, Posbility: 0.0645
Next Token : conv, Posbility: 0.0732
Next Token : map, Posbility: 0.0938
Next Token : f, Posbility: 0.1064
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : st, Posbility: 0.0332
Next Token :  list, Posbility: 0.0332
Next Token :  [], Posbility: 0.0547
Next Token :  =, Posbility: 0.1318
Next Token :  , Posbility: 0.4590
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ls, Posbility: 0.0315
Next Token : :, Posbility: 0.0757
Next Token : lst, Posbility: 0.0972
Next Token : (, Posbility: 0.1099
Next Token : x, Posbility: 0.3828
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0052
Next Token :  i, Posbility: 0.0076
Next Token :  , Posbility: 0.0718
Next Token : s, Posbility: 0.2832
Next Token :  =, Posbility: 0.6016
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0019
Next Token :  function, Posbility: 0.0039
Next Token :  , Posbility: 0.0894
Next Token :  match, Posbility: 0.1475
Next Token : 
, Posbility: 0.7500
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0056
Next Token :    , Posbility: 0.0072
Next Token : 	, Posbility: 0.0105
Next Token :     , Posbility: 0.1279
Next Token :   , Posbility: 0.8359
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Match, Posbility: 0.0098
Next Token : List, Posbility: 0.0388
Next Token : let, Posbility: 0.0566
Next Token : if, Posbility: 0.0825
Next Token : match, Posbility: 0.7812
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token :  [, Posbility: 0.0005
Next Token :  String, Posbility: 0.0036
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Seq, Posbility: 0.0010
Next Token : Array, Posbility: 0.0011
Next Token : (, Posbility: 0.0063
Next Token : List, Posbility: 0.0464
Next Token : x, Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token :  @, Posbility: 0.0005
Next Token : [0], Posbility: 0.0005
Next Token :  , Posbility: 0.0009
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0027
Next Token :  , Posbility: 0.0045
Next Token :  [, Posbility: 0.0065
Next Token :  [], Posbility: 0.0122
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0006
Next Token :       , Posbility: 0.0014
Next Token :    , Posbility: 0.0023
Next Token :     , Posbility: 0.0752
Next Token :   , Posbility: 0.9180
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Nil, Posbility: 0.0007
Next Token : (, Posbility: 0.0011
Next Token : [], Posbility: 0.0447
Next Token : [, Posbility: 0.0508
Next Token : |, Posbility: 0.8984
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [[, Posbility: 0.0051
Next Token :  nil, Posbility: 0.0137
Next Token :  , Posbility: 0.0791
Next Token :  [, Posbility: 0.1299
Next Token :  [], Posbility: 0.7500
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0049
Next Token :    , Posbility: 0.0063
Next Token :  =>, Posbility: 0.0103
Next Token :  |, Posbility: 0.0219
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0002
Next Token : -, Posbility: 0.0003
Next Token : â†’, Posbility: 0.0005
Next Token : ::, Posbility: 0.0032
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0143
Next Token : 
, Posbility: 0.0162
Next Token :  0.0, Posbility: 0.0439
Next Token :  , Posbility: 0.1973
Next Token :  [], Posbility: 0.6875
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0060
Next Token : ., Posbility: 0.0208
Next Token :  , Posbility: 0.0303
Next Token :  |, Posbility: 0.0388
Next Token : 
, Posbility: 0.8828
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : ;, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0074
Next Token :  [], Posbility: 0.0122
Next Token :  [[, Posbility: 0.0201
Next Token :  [, Posbility: 0.4043
Next Token :  , Posbility: 0.5195
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : hd, Posbility: 0.0240
Next Token : h, Posbility: 0.0449
Next Token : (, Posbility: 0.0510
Next Token : _, Posbility: 0.1226
Next Token : x, Posbility: 0.6211
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0104
Next Token : :, Posbility: 0.0364
Next Token : s, Posbility: 0.0364
Next Token : ::, Posbility: 0.4434
Next Token :  , Posbility: 0.4434
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : if, Posbility: 0.0021
Next Token : :, Posbility: 0.0075
Next Token : ->, Posbility: 0.0109
Next Token : ::, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0043
Next Token :  l, Posbility: 0.0116
Next Token :  [], Posbility: 0.0149
Next Token :  rest, Posbility: 0.0315
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0107
Next Token : t, Posbility: 0.0376
Next Token : _, Posbility: 0.0425
Next Token : y, Posbility: 0.1157
Next Token : x, Posbility: 0.7539
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0023
Next Token :  , Posbility: 0.0038
Next Token : _, Posbility: 0.0038
Next Token : ', Posbility: 0.0464
Next Token : s, Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0023
Next Token :  @, Posbility: 0.0038
Next Token :  =>, Posbility: 0.0063
Next Token :  when, Posbility: 0.0464
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0002
Next Token : if, Posbility: 0.0016
Next Token : ::, Posbility: 0.0374
Next Token : ->, Posbility: 0.9609
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0028
Next Token :  match, Posbility: 0.0028
Next Token :  [, Posbility: 0.0923
Next Token : 
, Posbility: 0.2852
Next Token :  , Posbility: 0.6016
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0811
Next Token : List, Posbility: 0.0811
Next Token : let, Posbility: 0.1040
Next Token : f, Posbility: 0.1943
Next Token : x, Posbility: 0.4668
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0035
Next Token :  |, Posbility: 0.0035
Next Token : s, Posbility: 0.0615
Next Token : ::, Posbility: 0.0698
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0002
Next Token : @@, Posbility: 0.0003
Next Token : ^, Posbility: 0.0035
Next Token : :, Posbility: 0.0228
Next Token : ::, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0021
Next Token :  !, Posbility: 0.0027
Next Token : !, Posbility: 0.0040
Next Token :  [, Posbility: 0.0084
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0007
Next Token : List, Posbility: 0.0052
Next Token : x, Posbility: 0.0386
Next Token : (, Posbility: 0.1729
Next Token : f, Posbility: 0.7734
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  ((, Posbility: 0.0003
Next Token : (, Posbility: 0.0110
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0002
Next Token : (, Posbility: 0.0474
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f x
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0025
Next Token :  , Posbility: 0.0067
Next Token : ), Posbility: 0.0110
Next Token : 

, Posbility: 0.3652
Next Token : 
, Posbility: 0.6016
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0208
Next Token : (, Posbility: 0.0342
Next Token :   , Posbility: 0.1445
Next Token : in, Posbility: 0.1445
Next Token : let, Posbility: 0.4434
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  convert, Posbility: 0.0200
Next Token :  float, Posbility: 0.0330
Next Token :  main, Posbility: 0.0698
Next Token :  , Posbility: 0.1680
Next Token :  rec, Posbility: 0.5859
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  float, Posbility: 0.0220
Next Token :  loop, Posbility: 0.0249
Next Token :  rec, Posbility: 0.0320
Next Token :  convert, Posbility: 0.0679
Next Token :  , Posbility: 0.6406
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0152
Next Token : r, Posbility: 0.0172
Next Token : fold, Posbility: 0.0195
Next Token : g, Posbility: 0.1445
Next Token : f, Posbility: 0.5703
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0610
Next Token :  [], Posbility: 0.0781
Next Token :  =, Posbility: 0.0781
Next Token : _, Posbility: 0.1465
Next Token :  , Posbility: 0.3984
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0037
Next Token : ::, Posbility: 0.0061
Next Token : _, Posbility: 0.0145
Next Token : (, Posbility: 0.0396
Next Token : x, Posbility: 0.8984
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0006
Next Token :  i, Posbility: 0.0010
Next Token :  , Posbility: 0.0347
Next Token : s, Posbility: 0.2559
Next Token :  =, Posbility: 0.6953
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0014
Next Token :  [, Posbility: 0.0051
Next Token :  match, Posbility: 0.0374
Next Token :  , Posbility: 0.3555
Next Token : 
, Posbility: 0.5859
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token :    , Posbility: 0.0017
Next Token : let, Posbility: 0.0019
Next Token :     , Posbility: 0.0066
Next Token :   , Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0195
Next Token : if, Posbility: 0.0413
Next Token : f, Posbility: 0.0530
Next Token : let, Posbility: 0.1123
Next Token : match, Posbility: 0.7305
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  {, Posbility: 0.0002
Next Token :  String, Posbility: 0.0004
Next Token :  [, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0004
Next Token : (, Posbility: 0.0035
Next Token : f, Posbility: 0.0045
Next Token : List, Posbility: 0.0058
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1], Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token : [0], Posbility: 0.0017
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  [], Posbility: 0.0006
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : |[, Posbility: 0.0001
Next Token : [, Posbility: 0.0002
Next Token : {, Posbility: 0.0002
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0044
Next Token :  [[, Posbility: 0.0073
Next Token :  , Posbility: 0.1465
Next Token :  [, Posbility: 0.1465
Next Token :  [], Posbility: 0.6562
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0007
Next Token : 
, Posbility: 0.0013
Next Token :  as, Posbility: 0.0022
Next Token :  |, Posbility: 0.0059
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 0.0032
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0.0, Posbility: 0.0014
Next Token : 
, Posbility: 0.0023
Next Token :  [, Posbility: 0.0038
Next Token :  , Posbility: 0.0466
Next Token :  [], Posbility: 0.9375
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :  |, Posbility: 0.0008
Next Token :  , Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : |[, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0055
Next Token :  [[, Posbility: 0.0071
Next Token :  [], Posbility: 0.0248
Next Token :  [, Posbility: 0.1108
Next Token :  , Posbility: 0.8203
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Nil, Posbility: 0.0051
Next Token : Cons, Posbility: 0.0074
Next Token : _, Posbility: 0.0376
Next Token : (, Posbility: 0.0376
Next Token : x, Posbility: 0.8594
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0014
Next Token : :, Posbility: 0.0034
Next Token : s, Posbility: 0.0081
Next Token : ::, Posbility: 0.0364
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : ->, Posbility: 0.0008
Next Token : :, Posbility: 0.0059
Next Token : ::, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  a, Posbility: 0.0008
Next Token :  nil, Posbility: 0.0008
Next Token :  [, Posbility: 0.0107
Next Token :  [], Posbility: 0.0138
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : f, Posbility: 0.0013
Next Token : (, Posbility: 0.0027
Next Token : y, Posbility: 0.0058
Next Token : _, Posbility: 0.0156
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token :  , Posbility: 0.0015
Next Token : ', Posbility: 0.0017
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0015
Next Token : 
, Posbility: 0.0016
Next Token :  |, Posbility: 0.0016
Next Token :  when, Posbility: 0.0227
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : :, Posbility: 0.0002
Next Token : if, Posbility: 0.0040
Next Token : ::, Posbility: 0.0067
Next Token : ->, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1.0, Posbility: 0.0022
Next Token :  match, Posbility: 0.0033
Next Token :  [, Posbility: 0.0273
Next Token : 
, Posbility: 0.0510
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0147
Next Token : let, Posbility: 0.0215
Next Token : (, Posbility: 0.0276
Next Token : f, Posbility: 0.2969
Next Token : x, Posbility: 0.6250
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0007
Next Token :  +, Posbility: 0.0009
Next Token : ::, Posbility: 0.0013
Next Token : s, Posbility: 0.0041
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token : @@, Posbility: 0.0001
Next Token : ^, Posbility: 0.0007
Next Token : :, Posbility: 0.0036
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : !, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0005
Next Token :  [, Posbility: 0.0008
Next Token :  float, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0005
Next Token : x, Posbility: 0.0005
Next Token : List, Posbility: 0.0005
Next Token : (, Posbility: 0.0109
Next Token : f, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : ', Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : f, Posbility: 0.0003
Next Token : (, Posbility: 0.0052
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f x
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0029
Next Token :  in, Posbility: 0.0048
Next Token :  , Posbility: 0.0079
Next Token : 

, Posbility: 0.2598
Next Token : 
, Posbility: 0.7070
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0144
Next Token : in, Posbility: 0.0287
Next Token :   , Posbility: 0.0503
Next Token : (, Posbility: 0.0688
Next Token : let, Posbility: 0.6523
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  main, Posbility: 0.0097
Next Token :  convert, Posbility: 0.0125
Next Token :  float, Posbility: 0.0160
Next Token :  , Posbility: 0.1338
Next Token :  rec, Posbility: 0.7695
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  go, Posbility: 0.0074
Next Token :  loop, Posbility: 0.0107
Next Token :  rec, Posbility: 0.0137
Next Token :  convert, Posbility: 0.0330
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0046
Next Token : r, Posbility: 0.0052
Next Token : x, Posbility: 0.0076
Next Token : g, Posbility: 0.0236
Next Token : f, Posbility: 0.8828
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0045
Next Token :  l, Posbility: 0.0155
Next Token :  [], Posbility: 0.0176
Next Token :  =, Posbility: 0.0786
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0008
Next Token : lst, Posbility: 0.0010
Next Token : _, Posbility: 0.0040
Next Token : (, Posbility: 0.0084
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0002
Next Token :  i, Posbility: 0.0002
Next Token :  , Posbility: 0.0039
Next Token : s, Posbility: 0.0292
Next Token :  =, Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token :  function, Posbility: 0.0007
Next Token :  match, Posbility: 0.0216
Next Token :  , Posbility: 0.0520
Next Token : 
, Posbility: 0.9219
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : let, Posbility: 0.0009
Next Token :    , Posbility: 0.0010
Next Token :     , Posbility: 0.0032
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0026
Next Token : if, Posbility: 0.0081
Next Token : f, Posbility: 0.0081
Next Token : let, Posbility: 0.0361
Next Token : match, Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0001
Next Token : f, Posbility: 0.0003
Next Token : List, Posbility: 0.0008
Next Token : (, Posbility: 0.0010
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  WITH, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : [0], Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : case, Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : {, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0022
Next Token :  [[, Posbility: 0.0022
Next Token :  , Posbility: 0.0444
Next Token :  [, Posbility: 0.0444
Next Token :  [], Posbility: 0.8945
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  as, Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token :  |, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0007
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0.0, Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  [, Posbility: 0.0009
Next Token :  , Posbility: 0.0067
Next Token :  [], Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  |, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : |[, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0029
Next Token :  [[, Posbility: 0.0038
Next Token :  [], Posbility: 0.0103
Next Token :  [, Posbility: 0.0459
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Nil, Posbility: 0.0020
Next Token : Cons, Posbility: 0.0023
Next Token : _, Posbility: 0.0194
Next Token : (, Posbility: 0.0194
Next Token : x, Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0010
Next Token : :, Posbility: 0.0017
Next Token : s, Posbility: 0.0051
Next Token : ::, Posbility: 0.0075
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : ->, Posbility: 0.0005
Next Token : :, Posbility: 0.0025
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  nil, Posbility: 0.0004
Next Token :  {, Posbility: 0.0005
Next Token :  [], Posbility: 0.0075
Next Token :  [, Posbility: 0.0085
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : f, Posbility: 0.0003
Next Token : y, Posbility: 0.0010
Next Token : (, Posbility: 0.0019
Next Token : _, Posbility: 0.0075
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token : ', Posbility: 0.0006
Next Token :  , Posbility: 0.0008
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0008
Next Token : 
, Posbility: 0.0010
Next Token :  |, Posbility: 0.0010
Next Token :  when, Posbility: 0.0075
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : :, Posbility: 0.0001
Next Token : if, Posbility: 0.0022
Next Token : ::, Posbility: 0.0052
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0003
Next Token :  match, Posbility: 0.0013
Next Token :  [, Posbility: 0.0066
Next Token : 
, Posbility: 0.0139
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0020
Next Token : (, Posbility: 0.0048
Next Token : let, Posbility: 0.0048
Next Token : f, Posbility: 0.0747
Next Token : x, Posbility: 0.9102
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : s, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : @@, Posbility: 0.0001
Next Token : ^, Posbility: 0.0001
Next Token : :, Posbility: 0.0006
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  float, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : g, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 0.0017
Next Token : f, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0002
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f x
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0012
Next Token :  in, Posbility: 0.0020
Next Token :  , Posbility: 0.0020
Next Token : 

, Posbility: 0.1807
Next Token : 
, Posbility: 0.8086
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0145
Next Token :   , Posbility: 0.0164
Next Token : in, Posbility: 0.0369
Next Token : (, Posbility: 0.0830
Next Token : let, Posbility: 0.6953
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0028
Next Token :  float, Posbility: 0.0045
Next Token :  convert, Posbility: 0.0066
Next Token :  , Posbility: 0.0913
Next Token :  rec, Posbility: 0.8672
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0021
Next Token :  loop, Posbility: 0.0030
Next Token :  rec, Posbility: 0.0044
Next Token :  convert, Posbility: 0.0135
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0018
Next Token : conv, Posbility: 0.0018
Next Token : x, Posbility: 0.0044
Next Token : g, Posbility: 0.0120
Next Token : f, Posbility: 0.9492
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0020
Next Token :  [], Posbility: 0.0055
Next Token :  l, Posbility: 0.0080
Next Token :  =, Posbility: 0.0459
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0003
Next Token : y, Posbility: 0.0003
Next Token : _, Posbility: 0.0017
Next Token : (, Posbility: 0.0032
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0031
Next Token : s, Posbility: 0.0179
Next Token :  =, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  match, Posbility: 0.0096
Next Token :  , Posbility: 0.0139
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token : let, Posbility: 0.0004
Next Token :    , Posbility: 0.0005
Next Token :     , Posbility: 0.0017
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0010
Next Token : if, Posbility: 0.0024
Next Token : f, Posbility: 0.0031
Next Token : let, Posbility: 0.0139
Next Token : match, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : [0], Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : {, Posbility: 0.0001
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0014
Next Token :  [[, Posbility: 0.0014
Next Token :  , Posbility: 0.0282
Next Token :  [, Posbility: 0.0282
Next Token :  [], Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  as, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  |, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 0.0025
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : when, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [[, Posbility: 0.0013
Next Token :  {, Posbility: 0.0015
Next Token :  [], Posbility: 0.0051
Next Token :  [, Posbility: 0.0177
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0004
Next Token : f, Posbility: 0.0005
Next Token : _, Posbility: 0.0066
Next Token : (, Posbility: 0.0066
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token : ::, Posbility: 0.0013
Next Token : s, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0002
Next Token : :, Posbility: 0.0006
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  {, Posbility: 0.0002
Next Token :  [], Posbility: 0.0019
Next Token :  [, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : (, Posbility: 0.0007
Next Token : _, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ', Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0002
Next Token :  |, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  when, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : if, Posbility: 0.0003
Next Token : ::, Posbility: 0.0009
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  match, Posbility: 0.0003
Next Token :  [, Posbility: 0.0017
Next Token : 
, Posbility: 0.0036
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0003
Next Token : let, Posbility: 0.0006
Next Token : (, Posbility: 0.0015
Next Token : f, Posbility: 0.0203
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : :, Posbility: 0.0002
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0005
Next Token : , Posbility: 0.0012
Next Token :  , Posbility: 0.0012
Next Token : 

, Posbility: 0.1187
Next Token : 
, Posbility: 0.8750
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0076
Next Token : [, Posbility: 0.0076
Next Token : in, Posbility: 0.0265
Next Token : (, Posbility: 0.0527
Next Token : let, Posbility: 0.8242
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  float, Posbility: 0.0010
Next Token :  list, Posbility: 0.0011
Next Token :  convert, Posbility: 0.0027
Next Token :  , Posbility: 0.0415
Next Token :  rec, Posbility: 0.9414
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0005
Next Token :  loop, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0012
Next Token :  convert, Posbility: 0.0040
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : conv, Posbility: 0.0005
Next Token : map, Posbility: 0.0005
Next Token : x, Posbility: 0.0017
Next Token : g, Posbility: 0.0040
Next Token : f, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0011
Next Token :  [], Posbility: 0.0019
Next Token :  l, Posbility: 0.0035
Next Token :  =, Posbility: 0.0227
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : _, Posbility: 0.0012
Next Token : (, Posbility: 0.0015
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : s, Posbility: 0.0052
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  match, Posbility: 0.0036
Next Token :  , Posbility: 0.0052
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0008
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : if, Posbility: 0.0009
Next Token : f, Posbility: 0.0010
Next Token : let, Posbility: 0.0059
Next Token : match, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  avec, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0001
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0003
Next Token :  [[, Posbility: 0.0003
Next Token :  , Posbility: 0.0066
Next Token :  [, Posbility: 0.0066
Next Token :  [], Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  |, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : when, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [[, Posbility: 0.0003
Next Token :  {, Posbility: 0.0005
Next Token :  [], Posbility: 0.0017
Next Token :  [, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : f, Posbility: 0.0003
Next Token : (, Posbility: 0.0025
Next Token : _, Posbility: 0.0028
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : ::, Posbility: 0.0003
Next Token : s, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0001
Next Token : :, Posbility: 0.0003
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  {, Posbility: 0.0001
Next Token :  [, Posbility: 0.0007
Next Token :  [], Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  when, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : ::, Posbility: 0.0003
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  match, Posbility: 0.0001
Next Token :  [, Posbility: 0.0006
Next Token : 
, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : f, Posbility: 0.0067
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : Â·, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token : , Posbility: 0.0009
Next Token : 

, Posbility: 0.0947
Next Token : 
, Posbility: 0.9023
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0056
Next Token : ```, Posbility: 0.0063
Next Token : in, Posbility: 0.0208
Next Token : (, Posbility: 0.0342
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  float, Posbility: 0.0002
Next Token :  list, Posbility: 0.0005
Next Token :  convert, Posbility: 0.0009
Next Token :  , Posbility: 0.0201
Next Token :  rec, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0002
Next Token :  loop, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0003
Next Token :  convert, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : h, Posbility: 0.0002
Next Token : x, Posbility: 0.0009
Next Token : g, Posbility: 0.0015
Next Token : f, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0005
Next Token :  [], Posbility: 0.0005
Next Token :  l, Posbility: 0.0012
Next Token :  =, Posbility: 0.0096
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0006
Next Token : (, Posbility: 0.0007
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0008
Next Token : s, Posbility: 0.0028
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  match, Posbility: 0.0015
Next Token :  , Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : f, Posbility: 0.0003
Next Token : let, Posbility: 0.0025
Next Token : match, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  nil, Posbility: 0.0001
Next Token :  [, Posbility: 0.0025
Next Token :  , Posbility: 0.0041
Next Token :  [], Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : case, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : when, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [[, Posbility: 0.0001
Next Token :  {, Posbility: 0.0002
Next Token :  [], Posbility: 0.0007
Next Token :  [, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : _, Posbility: 0.0012
Next Token : (, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0001
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0003
Next Token :  [], Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0005
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  when, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : f, Posbility: 0.0032
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : Â·, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : , Posbility: 0.0008
Next Token : 

, Posbility: 0.0598
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs

 score:False
Error type: noerr
---------------------------
Next Token : and, Posbility: 0.0034
Next Token : ```, Posbility: 0.0049
Next Token : in, Posbility: 0.0104
Next Token : (, Posbility: 0.0193
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  list, Posbility: 0.0002
Next Token :  convert, Posbility: 0.0004
Next Token :  , Posbility: 0.0109
Next Token :  rec, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0001
Next Token :  loop, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  convert, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 0.0006
Next Token : g, Posbility: 0.0010
Next Token : f, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0003
Next Token :  a, Posbility: 0.0004
Next Token :  l, Posbility: 0.0007
Next Token :  =, Posbility: 0.0076
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : s, Posbility: 0.0010
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  match, Posbility: 0.0008
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : f, Posbility: 0.0002
Next Token : let, Posbility: 0.0015
Next Token : match, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  nil, Posbility: 0.0001
Next Token :  [, Posbility: 0.0015
Next Token :  , Posbility: 0.0025
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : when, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token :  [], Posbility: 0.0004
Next Token :  [, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : _, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : f, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : Â·, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f
 score:False
Error type: noerr
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f x
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : , Posbility: 0.0005
Next Token : 

, Posbility: 0.0420
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs

 score:False
Error type: noerr
---------------------------
Next Token : and, Posbility: 0.0030
Next Token : ```, Posbility: 0.0039
Next Token : in, Posbility: 0.0064
Next Token : (, Posbility: 0.0120
Next Token : let, Posbility: 0.9531
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  list, Posbility: 0.0001
Next Token :  convert, Posbility: 0.0001
Next Token :  , Posbility: 0.0067
Next Token :  rec, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  convert, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : g, Posbility: 0.0005
Next Token : f, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token :  a, Posbility: 0.0002
Next Token :  l, Posbility: 0.0003
Next Token :  =, Posbility: 0.0046
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token :  match, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : let, Posbility: 0.0007
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0009
Next Token :  , Posbility: 0.0015
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0000
Next Token : when, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  {, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :  [, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : f, Posbility: 0.0019
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : Â·, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f x
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : , Posbility: 0.0004
Next Token : 

, Posbility: 0.0259
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs

 score:False
Error type: noerr
---------------------------
Next Token : and, Posbility: 0.0024
Next Token : in, Posbility: 0.0027
Next Token : ```, Posbility: 0.0027
Next Token : (, Posbility: 0.0074
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0000
Next Token :  list, Posbility: 0.0001
Next Token :  convert, Posbility: 0.0001
Next Token :  , Posbility: 0.0046
Next Token :  rec, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  merge, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  convert, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : g, Posbility: 0.0003
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token :  a, Posbility: 0.0002
Next Token :  l, Posbility: 0.0002
Next Token :  =, Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token :  match, Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : let, Posbility: 0.0005
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0006
Next Token :  , Posbility: 0.0012
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : when, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  when, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : f, Posbility: 0.0013
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : Â·, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f x
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : , Posbility: 0.0003
Next Token : 

, Posbility: 0.0203
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs

 score:False
Error type: noerr
---------------------------
Next Token : and, Posbility: 0.0019
Next Token : in, Posbility: 0.0021
Next Token : ```, Posbility: 0.0024
Next Token : (, Posbility: 0.0066
Next Token : let, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  convert, Posbility: 0.0000
Next Token :  , Posbility: 0.0036
Next Token :  rec, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  merge, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  convert, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : g, Posbility: 0.0002
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  l, Posbility: 0.0001
Next Token :  =, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  match, Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : let, Posbility: 0.0003
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : when, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : f, Posbility: 0.0010
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : Â·, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f x
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : , Posbility: 0.0003
Next Token : 

, Posbility: 0.0179
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs

 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0013
Next Token : and, Posbility: 0.0015
Next Token : ```, Posbility: 0.0024
Next Token : (, Posbility: 0.0045
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token :  convert, Posbility: 0.0000
Next Token :  , Posbility: 0.0028
Next Token :  rec, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  convert, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : g, Posbility: 0.0001
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  l, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  =, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  match, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : let, Posbility: 0.0002
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 0.0005
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : Â·, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f x
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : , Posbility: 0.0003
Next Token : 

, Posbility: 0.0140
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs

 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0010
Next Token : and, Posbility: 0.0013
Next Token : ```, Posbility: 0.0019
Next Token : (, Posbility: 0.0040
Next Token : let, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  acc, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token :  , Posbility: 0.0022
Next Token :  rec, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  merge, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  convert, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : g, Posbility: 0.0001
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  =, Posbility: 0.0015
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  match, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : let, Posbility: 0.0002
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : Â·, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f x
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : , Posbility: 0.0003
Next Token : 

, Posbility: 0.0140
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs

 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0009
Next Token : and, Posbility: 0.0012
Next Token : ```, Posbility: 0.0017
Next Token : (, Posbility: 0.0031
Next Token : let, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  acc, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token :  , Posbility: 0.0017
Next Token :  rec, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  merge, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  convert, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : g, Posbility: 0.0001
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  =, Posbility: 0.0013
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  match, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : let, Posbility: 0.0002
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Â·, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : Â·, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f x
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : , Posbility: 0.0003
Next Token : 

, Posbility: 0.0110
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs

 score:False
Error type: noerr
---------------------------
Next Token : and, Posbility: 0.0007
Next Token : module, Posbility: 0.0007
Next Token : ```, Posbility: 0.0013
Next Token : (, Posbility: 0.0025
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  acc, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token :  , Posbility: 0.0015
Next Token :  rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token :  merge, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  convert, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : g, Posbility: 0.0001
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  =, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  match, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  |
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x 
 score:False
Error type: noerr
---------------------------
Next Token : Â·, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x ::
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs ->
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : Â·, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: noerr
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f 
 score:False
Error type: noerr
---------------------------
Next Token : xf, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f x
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : , Posbility: 0.0002
Next Token : 

, Posbility: 0.0097
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs

 score:False
Error type: noerr
---------------------------
Next Token : and, Posbility: 0.0008
Next Token : in, Posbility: 0.0010
Next Token : ```, Posbility: 0.0013
Next Token : (, Posbility: 0.0028
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let
 score:False
Error type: noerr
---------------------------
Next Token :  acc, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token :  , Posbility: 0.0012
Next Token :  rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  merge, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  convert, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  =, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  match, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =

 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert all possible convertible elements in a list of lists to floats. *)
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  match x with
  | [] -> []
  | x :: xs -> x :: f xs
let rec f x =
  
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>