code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0173
Next Token :  find, Posbility: 0.0251
Next Token :  count, Posbility: 0.0366
Next Token :  , Posbility: 0.2109
Next Token :  rec, Posbility: 0.5039
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fact, Posbility: 0.0184
Next Token :  loop, Posbility: 0.0344
Next Token :  find, Posbility: 0.0728
Next Token :  count, Posbility: 0.2246
Next Token :  , Posbility: 0.3711
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0532
Next Token : n, Posbility: 0.0776
Next Token : f, Posbility: 0.0879
Next Token : fi, Posbility: 0.1128
Next Token : seq, Posbility: 0.2109
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0168
Next Token :  =, Posbility: 0.0854
Next Token :  , Posbility: 0.1592
Next Token : s, Posbility: 0.2051
Next Token : _, Posbility: 0.3828
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sum, Posbility: 0.0203
Next Token : len, Posbility: 0.0625
Next Token : of, Posbility: 0.1030
Next Token : length, Posbility: 0.1924
Next Token : count, Posbility: 0.3594
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0210
Next Token :  l, Posbility: 0.0210
Next Token : _, Posbility: 0.1553
Next Token :  =, Posbility: 0.1553
Next Token :  , Posbility: 0.5430
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0047
Next Token : :, Posbility: 0.0099
Next Token : (, Posbility: 0.0571
Next Token : n, Posbility: 0.2002
Next Token : m, Posbility: 0.6953
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0011
Next Token :  k, Posbility: 0.0016
Next Token :  0, Posbility: 0.0016
Next Token :  =, Posbility: 0.0669
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0003
Next Token : :, Posbility: 0.0004
Next Token : _, Posbility: 0.0004
Next Token : (, Posbility: 0.0019
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0055
Next Token :  acc, Posbility: 0.0103
Next Token :  i, Posbility: 0.0248
Next Token :  , Posbility: 0.0864
Next Token :  =, Posbility: 0.8203
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0020
Next Token :  {, Posbility: 0.0054
Next Token :  match, Posbility: 0.0518
Next Token :  , Posbility: 0.1240
Next Token : 
, Posbility: 0.8086
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0057
Next Token :    , Posbility: 0.0064
Next Token : 	, Posbility: 0.0137
Next Token :     , Posbility: 0.1143
Next Token :   , Posbility: 0.8438
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0029
Next Token : (, Posbility: 0.0070
Next Token : let, Posbility: 0.0405
Next Token : match, Posbility: 0.2988
Next Token : if, Posbility: 0.6328
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0005
Next Token :  not, Posbility: 0.0005
Next Token :   , Posbility: 0.0007
Next Token : (, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : Int, Posbility: 0.0001
Next Token : (, Posbility: 0.0159
Next Token : m, Posbility: 0.1172
Next Token : n, Posbility: 0.8672
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  >=, Posbility: 0.0140
Next Token :  ==, Posbility: 0.1699
Next Token :  , Posbility: 0.1699
Next Token :  <=, Posbility: 0.1699
Next Token :  =, Posbility: 0.4629
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 0, Posbility: 0.0003
Next Token :  , Posbility: 0.0064
Next Token :  1, Posbility: 0.0471
Next Token :  0, Posbility: 0.9453
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0014
Next Token :  , Posbility: 0.0039
Next Token : 
, Posbility: 0.0107
Next Token :  ||, Posbility: 0.0176
Next Token :  then, Posbility: 0.9609
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1;, Posbility: 0.0041
Next Token :  , Posbility: 0.0815
Next Token :  0, Posbility: 0.0815
Next Token : 
, Posbility: 0.2217
Next Token :  1, Posbility: 0.6016
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0021
Next Token :   , Posbility: 0.0027
Next Token :  , Posbility: 0.0198
Next Token :  else, Posbility: 0.3105
Next Token : 
, Posbility: 0.6562
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :    , Posbility: 0.0004
Next Token :  , Posbility: 0.0008
Next Token :     , Posbility: 0.0028
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0005
Next Token : if, Posbility: 0.0009
Next Token : elif, Posbility: 0.0028
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0021
Next Token :  match, Posbility: 0.0093
Next Token :  {, Posbility: 0.0093
Next Token : 
, Posbility: 0.1289
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0334
Next Token : seq, Posbility: 0.0625
Next Token : (, Posbility: 0.0801
Next Token : m, Posbility: 0.0908
Next Token : if, Posbility: 0.6719
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0005
Next Token :  0, Posbility: 0.0007
Next Token :   , Posbility: 0.0007
Next Token :  not, Posbility: 0.0007
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0007
Next Token : 2, Posbility: 0.0018
Next Token : (, Posbility: 0.0131
Next Token : n, Posbility: 0.2637
Next Token : m, Posbility: 0.7188
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0322
Next Token :  <=, Posbility: 0.0530
Next Token :  >=, Posbility: 0.0530
Next Token :  , Posbility: 0.1855
Next Token :  =, Posbility: 0.6445
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  -1, Posbility: 0.0006
Next Token :  2*, Posbility: 0.0006
Next Token :  1, Posbility: 0.0349
Next Token :  , Posbility: 0.2578
Next Token :  0, Posbility: 0.7031
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0021
Next Token :  &&, Posbility: 0.0050
Next Token :  or, Posbility: 0.0093
Next Token :  ||, Posbility: 0.0286
Next Token :  then, Posbility: 0.9492
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  -1, Posbility: 0.0008
Next Token : 
, Posbility: 0.0151
Next Token :  1, Posbility: 0.0413
Next Token :  , Posbility: 0.1118
Next Token :  0, Posbility: 0.8281
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0007
Next Token :  *, Posbility: 0.0008
Next Token :  , Posbility: 0.0045
Next Token :  else, Posbility: 0.0157
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  
 score:False
Error type: noerr
---------------------------
Next Token : elif, Posbility: 0.0000
Next Token : |, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0032
Next Token :  {, Posbility: 0.0142
Next Token :  match, Posbility: 0.0206
Next Token : 
, Posbility: 0.1729
Next Token :  , Posbility: 0.7773
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0212
Next Token : n, Posbility: 0.0240
Next Token : (, Posbility: 0.0309
Next Token : seq, Posbility: 0.0742
Next Token : if, Posbility: 0.7969
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0004
Next Token :  2*, Posbility: 0.0005
Next Token :  1, Posbility: 0.0007
Next Token :  not, Posbility: 0.0007
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0012
Next Token : 2, Posbility: 0.0033
Next Token : (, Posbility: 0.0240
Next Token : n, Posbility: 0.4824
Next Token : m, Posbility: 0.4824
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0145
Next Token :  <=, Posbility: 0.0649
Next Token :  >=, Posbility: 0.1758
Next Token :  =, Posbility: 0.2266
Next Token :  , Posbility: 0.4785
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ≤, Posbility: 0.0012
Next Token : /, Posbility: 0.0026
Next Token : -, Posbility: 0.0070
Next Token : <, Posbility: 0.4316
Next Token : >, Posbility: 0.5547
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m >
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0009
Next Token :  1, Posbility: 0.0064
Next Token :  0, Posbility: 0.0175
Next Token :  2*, Posbility: 0.0175
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0010
Next Token : 3, Posbility: 0.0023
Next Token : (, Posbility: 0.0195
Next Token : 2, Posbility: 0.1445
Next Token : n, Posbility: 0.8281
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0038
Next Token :  +, Posbility: 0.0056
Next Token :  ||, Posbility: 0.0171
Next Token :  *, Posbility: 0.0220
Next Token :  then, Posbility: 0.9336
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  -1, Posbility: 0.0046
Next Token : 
, Posbility: 0.0126
Next Token :  1, Posbility: 0.0344
Next Token :  , Posbility: 0.2539
Next Token :  0, Posbility: 0.6914
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0009
Next Token :   , Posbility: 0.0013
Next Token :  , Posbility: 0.0075
Next Token :  else, Posbility: 0.0075
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0047
Next Token :  {, Posbility: 0.0112
Next Token :  1, Posbility: 0.0269
Next Token : 
, Posbility: 0.1543
Next Token :  , Posbility: 0.7852
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0625
Next Token : n, Posbility: 0.0708
Next Token : (, Posbility: 0.0913
Next Token : seq, Posbility: 0.2480
Next Token : if, Posbility: 0.4082
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0008
Next Token :  2*, Posbility: 0.0008
Next Token :  1, Posbility: 0.0010
Next Token :  not, Posbility: 0.0013
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0012
Next Token : 2, Posbility: 0.0033
Next Token : (, Posbility: 0.0240
Next Token : n, Posbility: 0.4824
Next Token : m, Posbility: 0.4824
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  <=, Posbility: 0.0386
Next Token :  ==, Posbility: 0.0496
Next Token :  >=, Posbility: 0.0635
Next Token :  , Posbility: 0.2852
Next Token :  =, Posbility: 0.4707
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0003
Next Token :  2*, Posbility: 0.0008
Next Token :  0, Posbility: 0.0159
Next Token :  1, Posbility: 0.1172
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0003
Next Token : seq, Posbility: 0.0003
Next Token : (, Posbility: 0.0019
Next Token : 2, Posbility: 0.0140
Next Token : n, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0015
Next Token :  , Posbility: 0.0015
Next Token :  ||, Posbility: 0.0024
Next Token :  +, Posbility: 0.0040
Next Token :  then, Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0008
Next Token : 
, Posbility: 0.0058
Next Token :  0, Posbility: 0.0157
Next Token :  , Posbility: 0.1162
Next Token :  1, Posbility: 0.8594
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0011
Next Token :  , Posbility: 0.0045
Next Token :  else, Posbility: 0.0095
Next Token :  +, Posbility: 0.0122
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : |, Posbility: 0.0002
Next Token : let, Posbility: 0.0004
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (1, Posbility: 0.0027
Next Token :  {, Posbility: 0.0066
Next Token :  1, Posbility: 0.0203
Next Token : 
, Posbility: 0.0908
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0515
Next Token : n, Posbility: 0.0752
Next Token : (, Posbility: 0.0850
Next Token : seq, Posbility: 0.2314
Next Token : if, Posbility: 0.4316
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2*, Posbility: 0.0005
Next Token :  ((, Posbility: 0.0007
Next Token :  1, Posbility: 0.0009
Next Token :  not, Posbility: 0.0012
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0007
Next Token : 2, Posbility: 0.0048
Next Token : (, Posbility: 0.0131
Next Token : n, Posbility: 0.2637
Next Token : m, Posbility: 0.7148
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  <=, Posbility: 0.0317
Next Token :  >=, Posbility: 0.0359
Next Token :  +, Posbility: 0.0593
Next Token :  =, Posbility: 0.3418
Next Token :  , Posbility: 0.4395
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ≤, Posbility: 0.0011
Next Token : /, Posbility: 0.0033
Next Token : -, Posbility: 0.0148
Next Token : >, Posbility: 0.2637
Next Token : <, Posbility: 0.7148
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >, Posbility: 0.0062
Next Token :  2*, Posbility: 0.0103
Next Token :  1, Posbility: 0.0103
Next Token :  0, Posbility: 0.0459
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0005
Next Token : 3, Posbility: 0.0040
Next Token : (, Posbility: 0.0139
Next Token : 2, Posbility: 0.2178
Next Token : n, Posbility: 0.7617
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  &&, Posbility: 0.0081
Next Token :  *, Posbility: 0.0104
Next Token :  , Posbility: 0.0134
Next Token :  +, Posbility: 0.0134
Next Token :  then, Posbility: 0.9414
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0126
Next Token :  0, Posbility: 0.0928
Next Token : 
, Posbility: 0.0928
Next Token :  1, Posbility: 0.0928
Next Token :  , Posbility: 0.6875
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0293
Next Token : n, Posbility: 0.0483
Next Token : (, Posbility: 0.0903
Next Token : 2, Posbility: 0.1162
Next Token : seq, Posbility: 0.6680
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_
 score:False
Error type: noerr
---------------------------
Next Token : add, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : sum, Posbility: 0.0001
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0014
Next Token :  ((, Posbility: 0.0038
Next Token :  (1, Posbility: 0.0063
Next Token : (, Posbility: 0.0466
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count 
 score:False
Error type: noerr
---------------------------
Next Token : min, Posbility: 0.0001
Next Token : 2, Posbility: 0.0010
Next Token : n, Posbility: 0.0898
Next Token : m, Posbility: 0.2441
Next Token : (, Posbility: 0.6641
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : max, Posbility: 0.0003
Next Token :  , Posbility: 0.0017
Next Token : 2, Posbility: 0.0166
Next Token : n, Posbility: 0.0742
Next Token : m, Posbility: 0.9062
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0114
Next Token : +1), Posbility: 0.0510
Next Token : -1), Posbility: 0.1387
Next Token :  , Posbility: 0.3770
Next Token :  +, Posbility: 0.3770
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3), Posbility: 0.0003
Next Token :  1, Posbility: 0.0021
Next Token :  2), Posbility: 0.0417
Next Token :  , Posbility: 0.1138
Next Token :  1), Posbility: 0.8398
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1)
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0009
Next Token :  (1, Posbility: 0.0024
Next Token :  ((, Posbility: 0.0024
Next Token :  0, Posbility: 0.0040
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) 
 score:False
Error type: noerr
---------------------------
Next Token : min, Posbility: 0.0001
Next Token : seq, Posbility: 0.0001
Next Token : m, Posbility: 0.0011
Next Token : n, Posbility: 0.2676
Next Token : (, Posbility: 0.7305
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : min, Posbility: 0.0003
Next Token : max, Posbility: 0.0005
Next Token : 2, Posbility: 0.0009
Next Token : m, Posbility: 0.0041
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0005
Next Token :  -1), Posbility: 0.0009
Next Token :  +, Posbility: 0.0041
Next Token : -1), Posbility: 0.0041
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : /, Posbility: 0.0002
Next Token : −, Posbility: 0.0012
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0009
Next Token :  1);, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  2), Posbility: 0.0067
Next Token :  1), Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0116
Next Token : 

, Posbility: 0.0190
Next Token :  else, Posbility: 0.0190
Next Token :  +, Posbility: 0.2988
Next Token : 
, Posbility: 0.6328
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)

 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0023
Next Token :     , Posbility: 0.0033
Next Token : end, Posbility: 0.0043
Next Token : let, Posbility: 0.0045
Next Token :   , Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0001
Next Token : ++, Posbility: 0.0002
Next Token : +, Posbility: 0.0002
Next Token : |, Posbility: 0.0012
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0058
Next Token :  1, Posbility: 0.0085
Next Token :  {, Posbility: 0.0085
Next Token : 
, Posbility: 0.0913
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0547
Next Token : let, Posbility: 0.0618
Next Token : (, Posbility: 0.1309
Next Token : if, Posbility: 0.1904
Next Token : seq, Posbility: 0.4570
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_
 score:False
Error type: noerr
---------------------------
Next Token : of, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : add, Posbility: 0.0000
Next Token : sum, Posbility: 0.0001
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0013
Next Token : (, Posbility: 0.0024
Next Token :  (1, Posbility: 0.0035
Next Token :  ((, Posbility: 0.0123
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count 
 score:False
Error type: noerr
---------------------------
Next Token : (1), Posbility: 0.0003
Next Token : 2, Posbility: 0.0005
Next Token : n, Posbility: 0.0059
Next Token : m, Posbility: 0.1182
Next Token : (, Posbility: 0.8750
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : max, Posbility: 0.0009
Next Token : 2, Posbility: 0.0176
Next Token : n, Posbility: 0.0176
Next Token : m, Posbility: 0.9609
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0018
Next Token : ), Posbility: 0.0049
Next Token :  *, Posbility: 0.0049
Next Token :  , Posbility: 0.2656
Next Token :  +, Posbility: 0.7227
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3), Posbility: 0.0003
Next Token :  1, Posbility: 0.0024
Next Token :  , Posbility: 0.0176
Next Token :  2), Posbility: 0.0176
Next Token :  1), Posbility: 0.9609
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1)
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0004
Next Token :  (1, Posbility: 0.0004
Next Token :  0, Posbility: 0.0010
Next Token :  ((, Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) 
 score:False
Error type: noerr
---------------------------
Next Token : min, Posbility: 0.0002
Next Token : seq, Posbility: 0.0007
Next Token : m, Posbility: 0.0030
Next Token : n, Posbility: 0.2676
Next Token : (, Posbility: 0.7266
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : seq, Posbility: 0.0009
Next Token : min, Posbility: 0.0009
Next Token : m, Posbility: 0.0067
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1), Posbility: 0.0008
Next Token : -1), Posbility: 0.0021
Next Token :  +, Posbility: 0.0417
Next Token : ), Posbility: 0.1138
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : +1), Posbility: 0.0000
Next Token : ^, Posbility: 0.0001
Next Token : −, Posbility: 0.0001
Next Token : /, Posbility: 0.0009
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0023
Next Token :  1, Posbility: 0.0023
Next Token :  1);, Posbility: 0.0063
Next Token :  2), Posbility: 0.0469
Next Token :  1), Posbility: 0.9414
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1)
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0081
Next Token : 

, Posbility: 0.0104
Next Token :  , Posbility: 0.0118
Next Token :  *, Posbility: 0.0250
Next Token :  +, Posbility: 0.9375
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1) +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0009
Next Token :  (1, Posbility: 0.0009
Next Token :  1, Posbility: 0.0019
Next Token : 
, Posbility: 0.0085
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1) + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0009
Next Token : 2, Posbility: 0.0024
Next Token : n, Posbility: 0.0024
Next Token : (, Posbility: 0.0067
Next Token : seq, Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1) + seq
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1) + seq_
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : co, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1) + seq_count
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0031
Next Token :  (1, Posbility: 0.0031
Next Token : (, Posbility: 0.0040
Next Token :  ((, Posbility: 0.0040
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1) + seq_count 
 score:False
Error type: noerr
---------------------------
Next Token : (0), Posbility: 0.0020
Next Token : (1), Posbility: 0.0033
Next Token : n, Posbility: 0.0148
Next Token : (, Posbility: 0.4883
Next Token : m, Posbility: 0.4883
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1) + seq_count m
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0007
Next Token :  (1, Posbility: 0.0007
Next Token :  0, Posbility: 0.0008
Next Token :  1, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1) + seq_count m 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : m, Posbility: 0.0005
Next Token : n, Posbility: 0.0757
Next Token : (, Posbility: 0.9219
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1) + seq_count m (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : min, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token : max, Posbility: 0.0001
Next Token : m, Posbility: 0.0041
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1) + seq_count m (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0003
Next Token :  -1), Posbility: 0.0005
Next Token :  +, Posbility: 0.0009
Next Token : -1), Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1) + seq_count m (n 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : −, Posbility: 0.0002
Next Token : /, Posbility: 0.0009
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1) + seq_count m (n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0023
Next Token :  , Posbility: 0.0167
Next Token :  2), Posbility: 0.0167
Next Token :  1);, Posbility: 0.0457
Next Token :  1), Posbility: 0.9141
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1) + seq_count m (n - 1)
 score:False
Error type: noerr
---------------------------
Next Token :  *), Posbility: 0.0031
Next Token :  *, Posbility: 0.0109
Next Token :  , Posbility: 0.0124
Next Token : 
, Posbility: 0.3633
Next Token : 

, Posbility: 0.5977
---------------------------
code:
 (* Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. *)
let rec seq_count m n =
  if n = 0 then 1
  else if m = 0 then 0
  else if m > n then 0
  else if m = n then 1
  else if m < n then seq_count (m + 1) (n - 1)
  else seq_count (m + 1) (n - 1) + seq_count m (n - 1)


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :49.15237879753113

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>