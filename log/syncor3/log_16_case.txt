code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0664
Next Token :  max, Posbility: 0.0854
Next Token :  large, Posbility: 0.1406
Next Token :  , Posbility: 0.1807
Next Token :  rec, Posbility: 0.3828
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0240
Next Token :  large, Posbility: 0.0654
Next Token :  max, Posbility: 0.1221
Next Token :  find, Posbility: 0.2285
Next Token :  , Posbility: 0.3320
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0354
Next Token : f, Posbility: 0.0583
Next Token : fi, Posbility: 0.0583
Next Token : digits, Posbility: 0.0659
Next Token : helper, Posbility: 0.1089
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0250
Next Token :  l, Posbility: 0.0364
Next Token : (, Posbility: 0.0413
Next Token :  =, Posbility: 0.1631
Next Token :  , Posbility: 0.5703
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0530
Next Token : :, Posbility: 0.0771
Next Token : (, Posbility: 0.1270
Next Token : n, Posbility: 0.1436
Next Token : digits, Posbility: 0.3047
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  left, Posbility: 0.0247
Next Token :  acc, Posbility: 0.0405
Next Token :  i, Posbility: 0.0591
Next Token :  , Posbility: 0.2637
Next Token :  =, Posbility: 0.3398
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0050
Next Token :  function, Posbility: 0.0050
Next Token :  match, Posbility: 0.0610
Next Token :  , Posbility: 0.0781
Next Token : 
, Posbility: 0.8398
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0054
Next Token :    , Posbility: 0.0114
Next Token : 	, Posbility: 0.0129
Next Token :     , Posbility: 0.1572
Next Token :   , Posbility: 0.7969
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0094
Next Token : List, Posbility: 0.0137
Next Token : let, Posbility: 0.1885
Next Token : if, Posbility: 0.3516
Next Token : match, Posbility: 0.3984
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0013
Next Token :  !, Posbility: 0.0018
Next Token :  [, Posbility: 0.0023
Next Token :  String, Posbility: 0.0366
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0040
Next Token : Int, Posbility: 0.0058
Next Token : Digit, Posbility: 0.0203
Next Token : List, Posbility: 0.0806
Next Token : digits, Posbility: 0.8633
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  @, Posbility: 0.0005
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 0.0009
Next Token :  =, Posbility: 0.0015
Next Token :  with, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0027
Next Token : 

, Posbility: 0.0035
Next Token :  [, Posbility: 0.0065
Next Token :  [], Posbility: 0.0122
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0005
Next Token :       , Posbility: 0.0016
Next Token :    , Posbility: 0.0016
Next Token :     , Posbility: 0.0674
Next Token :   , Posbility: 0.9297
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : [, Posbility: 0.0156
Next Token : [], Posbility: 0.0200
Next Token : |, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [],, Posbility: 0.0011
Next Token :  nil, Posbility: 0.0030
Next Token :  , Posbility: 0.0221
Next Token :  [, Posbility: 0.0284
Next Token :  [], Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0050
Next Token :  when, Posbility: 0.0064
Next Token :  |, Posbility: 0.0064
Next Token :  =>, Posbility: 0.0082
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0002
Next Token : â†’, Posbility: 0.0002
Next Token : -, Posbility: 0.0004
Next Token : ::, Posbility: 0.0025
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0967
Next Token :  1, Posbility: 0.0967
Next Token :  None, Posbility: 0.0967
Next Token :  , Posbility: 0.2637
Next Token :  0, Posbility: 0.2637
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0022
Next Token :   , Posbility: 0.0060
Next Token :  , Posbility: 0.0236
Next Token :  |, Posbility: 0.0640
Next Token : 
, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0054
Next Token :  a, Posbility: 0.0070
Next Token :  [], Posbility: 0.0214
Next Token :  [, Posbility: 0.2949
Next Token :  , Posbility: 0.6250
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0654
Next Token : hd, Posbility: 0.0952
Next Token : x, Posbility: 0.1572
Next Token : _, Posbility: 0.2285
Next Token : d, Posbility: 0.2930
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  when, Posbility: 0.0132
Next Token : 0, Posbility: 0.0361
Next Token : 1, Posbility: 0.0408
Next Token :  , Posbility: 0.2354
Next Token : ::, Posbility: 0.6406
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : l, Posbility: 0.0222
Next Token : x, Posbility: 0.0286
Next Token : _, Posbility: 0.0605
Next Token : ds, Posbility: 0.2715
Next Token : d, Posbility: 0.4473
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0464
Next Token : tail, Posbility: 0.0674
Next Token : 2, Posbility: 0.0767
Next Token : 1, Posbility: 0.0869
Next Token : ', Posbility: 0.5664
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0047
Next Token :  |, Posbility: 0.0087
Next Token :  as, Posbility: 0.0210
Next Token :  when, Posbility: 0.0569
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : :, Posbility: 0.0002
Next Token : if, Posbility: 0.0031
Next Token : ::, Posbility: 0.0292
Next Token : ->, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0124
Next Token :  match, Posbility: 0.0204
Next Token :  1, Posbility: 0.0913
Next Token : 
, Posbility: 0.4102
Next Token :  , Posbility: 0.4102
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0791
Next Token : helper, Posbility: 0.0791
Next Token : let, Posbility: 0.1152
Next Token : if, Posbility: 0.1484
Next Token : d, Posbility: 0.4023
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0518
Next Token :  , Posbility: 0.0664
Next Token :  *, Posbility: 0.1240
Next Token : ', Posbility: 0.1406
Next Token :  +, Posbility: 0.4336
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0058
Next Token :  match, Posbility: 0.0096
Next Token :  1, Posbility: 0.0261
Next Token :  max, Posbility: 0.0554
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0102
Next Token : Int, Posbility: 0.0131
Next Token : d, Posbility: 0.0356
Next Token : (, Posbility: 0.0854
Next Token : helper, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper
 score:False
Error type: noerr
---------------------------
Next Token :  (1, Posbility: 0.0012
Next Token :  [, Posbility: 0.0117
Next Token : (, Posbility: 0.0171
Next Token : ', Posbility: 0.0317
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper 
 score:False
Error type: noerr
---------------------------
Next Token : [0, Posbility: 0.0001
Next Token : ([, Posbility: 0.0002
Next Token : digits, Posbility: 0.0003
Next Token : (, Posbility: 0.0757
Next Token : d, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0017
Next Token : ';, Posbility: 0.0028
Next Token : ',, Posbility: 0.0035
Next Token : '), Posbility: 0.0066
Next Token : ', Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0021
Next Token :  +, Posbility: 0.0035
Next Token :  , Posbility: 0.0107
Next Token : 

, Posbility: 0.2158
Next Token : 
, Posbility: 0.7539
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0084
Next Token : (, Posbility: 0.0090
Next Token : in, Posbility: 0.0090
Next Token :   , Posbility: 0.2969
Next Token : let, Posbility: 0.5898
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  large, Posbility: 0.0496
Next Token :  max, Posbility: 0.0815
Next Token :  , Posbility: 0.1191
Next Token :  find, Posbility: 0.1191
Next Token :  rec, Posbility: 0.5312
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0386
Next Token :  large, Posbility: 0.0496
Next Token :  max, Posbility: 0.1050
Next Token :  find, Posbility: 0.1963
Next Token :  , Posbility: 0.3672
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0461
Next Token : digits, Posbility: 0.0593
Next Token : fi, Posbility: 0.0674
Next Token : solve, Posbility: 0.1108
Next Token : helper, Posbility: 0.1426
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0615
Next Token : 2, Posbility: 0.1016
Next Token :  , Posbility: 0.1152
Next Token : ', Posbility: 0.2441
Next Token : _, Posbility: 0.3125
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0317
Next Token : max, Posbility: 0.0317
Next Token : list, Posbility: 0.0359
Next Token : rec, Posbility: 0.0859
Next Token : opt, Posbility: 0.1250
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0018
Next Token : i, Posbility: 0.0023
Next Token :  =, Posbility: 0.0118
Next Token : _, Posbility: 0.0172
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0015
Next Token : n, Posbility: 0.0015
Next Token : (, Posbility: 0.0024
Next Token : d, Posbility: 0.0066
Next Token : digits, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0009
Next Token :  max, Posbility: 0.0009
Next Token :  i, Posbility: 0.0031
Next Token :  , Posbility: 0.0177
Next Token :  =, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0005
Next Token :   , Posbility: 0.0006
Next Token :  match, Posbility: 0.0195
Next Token :  , Posbility: 0.0322
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0005
Next Token : let, Posbility: 0.0012
Next Token :    , Posbility: 0.0015
Next Token :     , Posbility: 0.0059
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0212
Next Token : if, Posbility: 0.0272
Next Token : try, Posbility: 0.0398
Next Token : let, Posbility: 0.0952
Next Token : match, Posbility: 0.7969
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  !, Posbility: 0.0002
Next Token :  String, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Digit, Posbility: 0.0009
Next Token : List, Posbility: 0.0011
Next Token : (, Posbility: 0.0015
Next Token : helper, Posbility: 0.0178
Next Token : digits, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0001
Next Token : ., Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token : ..., Posbility: 0.0001
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0003
Next Token :  nil, Posbility: 0.0003
Next Token :  [, Posbility: 0.0066
Next Token :  , Posbility: 0.0178
Next Token :  [], Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token : 
, Posbility: 0.0005
Next Token :  =>, Posbility: 0.0010
Next Token :  |, Posbility: 0.0046
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  -1, Posbility: 0.0591
Next Token :  Some, Posbility: 0.0591
Next Token :  , Posbility: 0.1611
Next Token :  0, Posbility: 0.1611
Next Token :  None, Posbility: 0.4375
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0003
Next Token :   , Posbility: 0.0006
Next Token :  |, Posbility: 0.0007
Next Token :  , Posbility: 0.0028
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : else, Posbility: 0.0002
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0019
Next Token :  [], Posbility: 0.0045
Next Token :  0, Posbility: 0.0058
Next Token :  [, Posbility: 0.0084
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0027
Next Token : (, Posbility: 0.0031
Next Token : x, Posbility: 0.0035
Next Token : _, Posbility: 0.0121
Next Token : d, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0006
Next Token : 1, Posbility: 0.0010
Next Token : :, Posbility: 0.0027
Next Token :  , Posbility: 0.0201
Next Token : ::, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : [, Posbility: 0.0002
Next Token : ds, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0041
Next Token : d, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : ',, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 0.0017
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0003
Next Token :  |, Posbility: 0.0005
Next Token :  =>, Posbility: 0.0008
Next Token :  when, Posbility: 0.0085
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : if, Posbility: 0.0006
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0211
Next Token :  match, Posbility: 0.0347
Next Token :  , Posbility: 0.2559
Next Token :  Some, Posbility: 0.2559
Next Token : 
, Posbility: 0.4238
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0205
Next Token :      , Posbility: 0.0435
Next Token :    , Posbility: 0.0811
Next Token :       , Posbility: 0.1719
Next Token :     , Posbility: 0.6797
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0142
Next Token : d, Posbility: 0.0182
Next Token : match, Posbility: 0.1719
Next Token : if, Posbility: 0.2832
Next Token : let, Posbility: 0.4688
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0518
Next Token :  max, Posbility: 0.0664
Next Token :  res, Posbility: 0.0664
Next Token :  rec, Posbility: 0.0664
Next Token :  , Posbility: 0.4902
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0579
Next Token : x, Posbility: 0.0957
Next Token : opt, Posbility: 0.0957
Next Token : d, Posbility: 0.1226
Next Token : n, Posbility: 0.1787
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0016
Next Token : 0, Posbility: 0.0027
Next Token : _, Posbility: 0.0057
Next Token : 1, Posbility: 0.0288
Next Token :  =, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  match, Posbility: 0.0005
Next Token : 
, Posbility: 0.0015
Next Token :  1, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0006
Next Token : (, Posbility: 0.0017
Next Token : n, Posbility: 0.0347
Next Token : d, Posbility: 0.2559
Next Token : helper, Posbility: 0.6992
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0005
Next Token : (, Posbility: 0.0018
Next Token : _, Posbility: 0.0598
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0001
Next Token : n, Posbility: 0.0001
Next Token : (, Posbility: 0.0024
Next Token : digits, Posbility: 0.0179
Next Token : d, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0035
Next Token : ',, Posbility: 0.0035
Next Token : ';, Posbility: 0.0122
Next Token :  in, Posbility: 0.2158
Next Token : ', Posbility: 0.7539
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0009
Next Token :  , Posbility: 0.0015
Next Token :  +, Posbility: 0.0024
Next Token : 
, Posbility: 0.0109
Next Token :  in, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0002
Next Token :   , Posbility: 0.0004
Next Token : 

, Posbility: 0.0013
Next Token :  , Posbility: 0.0032
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :      , Posbility: 0.0010
Next Token :       , Posbility: 0.0018
Next Token :    , Posbility: 0.2676
Next Token :     , Posbility: 0.7266
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0123
Next Token : n, Posbility: 0.0203
Next Token : let, Posbility: 0.0334
Next Token : match, Posbility: 0.2471
Next Token : if, Posbility: 0.6719
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0027
Next Token :  String, Posbility: 0.0035
Next Token :  not, Posbility: 0.0051
Next Token :  Some, Posbility: 0.0057
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0023
Next Token : d, Posbility: 0.0117
Next Token : Int, Posbility: 0.0171
Next Token : (, Posbility: 0.0194
Next Token : n, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ==, Posbility: 0.0076
Next Token :  <=, Posbility: 0.0342
Next Token :  =, Posbility: 0.0928
Next Token :  >=, Posbility: 0.1533
Next Token :  , Posbility: 0.6875
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0001
Next Token : /, Posbility: 0.0002
Next Token : â‰¥, Posbility: 0.0004
Next Token : <, Posbility: 0.0374
Next Token : >, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n >
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  100, Posbility: 0.0020
Next Token :  10, Posbility: 0.0033
Next Token :  1, Posbility: 0.0089
Next Token :  , Posbility: 0.1787
Next Token :  0, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0011
Next Token : 
, Posbility: 0.0024
Next Token :  , Posbility: 0.0051
Next Token :  &&, Posbility: 0.0109
Next Token :  then, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0014
Next Token :  some, Posbility: 0.0022
Next Token :  , Posbility: 0.0166
Next Token : 
, Posbility: 0.0742
Next Token :  Some, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0004
Next Token :  [, Posbility: 0.0008
Next Token :  ((, Posbility: 0.0019
Next Token : (, Posbility: 0.1475
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0002
Next Token : digits, Posbility: 0.0017
Next Token : d, Posbility: 0.0349
Next Token : (, Posbility: 0.2578
Next Token : n, Posbility: 0.7031
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0113
Next Token :  , Posbility: 0.0128
Next Token :  |, Posbility: 0.0145
Next Token : 
, Posbility: 0.1377
Next Token :  else, Posbility: 0.7930
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token :  Some, Posbility: 0.0022
Next Token :  None, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : (, Posbility: 0.0009
Next Token : n, Posbility: 0.0015
Next Token : helper, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_
 score:False
Error type: noerr
---------------------------
Next Token : rec, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt 
 score:False
Error type: noerr
---------------------------
Next Token : ([, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : digits, Posbility: 0.0004
Next Token : (, Posbility: 0.0140
Next Token : d, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d
 score:False
Error type: noerr
---------------------------
Next Token : '), Posbility: 0.0036
Next Token : ';, Posbility: 0.0047
Next Token : 

, Posbility: 0.0237
Next Token : 
, Posbility: 0.1758
Next Token : ', Posbility: 0.7852
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0009
Next Token :  , Posbility: 0.0024
Next Token :  in, Posbility: 0.0075
Next Token : 

, Posbility: 0.2188
Next Token : 
, Posbility: 0.7656
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'

 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0097
Next Token : val, Posbility: 0.0317
Next Token : in, Posbility: 0.0493
Next Token :   , Posbility: 0.0525
Next Token : let, Posbility: 0.4980
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  large, Posbility: 0.0312
Next Token :  main, Posbility: 0.0518
Next Token :  , Posbility: 0.1240
Next Token :  find, Posbility: 0.1592
Next Token :  rec, Posbility: 0.5547
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0332
Next Token :  large, Posbility: 0.0376
Next Token :  max, Posbility: 0.0425
Next Token :  find, Posbility: 0.1021
Next Token :  , Posbility: 0.5859
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0160
Next Token : opt, Posbility: 0.0232
Next Token : recursive, Posbility: 0.0264
Next Token : solve, Posbility: 0.0299
Next Token : helper, Posbility: 0.6797
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0049
Next Token :  , Posbility: 0.0117
Next Token : ', Posbility: 0.0132
Next Token : 2, Posbility: 0.0317
Next Token : _, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0201
Next Token : iter, Posbility: 0.0258
Next Token : max, Posbility: 0.0376
Next Token : rec, Posbility: 0.0425
Next Token : opt, Posbility: 0.3555
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0137
Next Token :  , Posbility: 0.0330
Next Token : ', Posbility: 0.1016
Next Token : 2, Posbility: 0.1475
Next Token : _, Posbility: 0.6602
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0256
Next Token : memo, Posbility: 0.0291
Next Token : rev, Posbility: 0.0330
Next Token : rec, Posbility: 0.0542
Next Token : opt, Posbility: 0.2148
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0021
Next Token : n, Posbility: 0.0023
Next Token :  =, Posbility: 0.0030
Next Token : _, Posbility: 0.0222
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0005
Next Token : n, Posbility: 0.0005
Next Token : (, Posbility: 0.0009
Next Token : d, Posbility: 0.0017
Next Token : digits, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0004
Next Token :  a, Posbility: 0.0007
Next Token :  i, Posbility: 0.0008
Next Token :  , Posbility: 0.0046
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  match, Posbility: 0.0040
Next Token :  , Posbility: 0.0096
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0002
Next Token : let, Posbility: 0.0003
Next Token :    , Posbility: 0.0006
Next Token :     , Posbility: 0.0041
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0077
Next Token : try, Posbility: 0.0099
Next Token : helper, Posbility: 0.0270
Next Token : let, Posbility: 0.0569
Next Token : match, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Digit, Posbility: 0.0001
Next Token : helpers, Posbility: 0.0002
Next Token : (, Posbility: 0.0009
Next Token : helper, Posbility: 0.0293
Next Token : digits, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  avec, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  [, Posbility: 0.0015
Next Token :  , Posbility: 0.0041
Next Token :  [], Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  =>, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  |, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0023
Next Token :  , Posbility: 0.0172
Next Token : 
, Posbility: 0.0172
Next Token :  Some, Posbility: 0.0172
Next Token :  None, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token :  else, Posbility: 0.0001
Next Token : ., Posbility: 0.0002
Next Token :  |, Posbility: 0.0010
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0003
Next Token :  0, Posbility: 0.0008
Next Token :  [], Posbility: 0.0012
Next Token :  [, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0006
Next Token : n, Posbility: 0.0009
Next Token : x, Posbility: 0.0010
Next Token : _, Posbility: 0.0067
Next Token : d, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0002
Next Token : 1, Posbility: 0.0004
Next Token : :, Posbility: 0.0012
Next Token :  , Posbility: 0.0028
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : ds, Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0022
Next Token : d, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ',, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0001
Next Token :  |, Posbility: 0.0002
Next Token :  =>, Posbility: 0.0002
Next Token :  when, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0022
Next Token :  match, Posbility: 0.0076
Next Token :  Some, Posbility: 0.0161
Next Token :  , Posbility: 0.0928
Next Token : 
, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0002
Next Token :   , Posbility: 0.0004
Next Token :       , Posbility: 0.0005
Next Token :    , Posbility: 0.0041
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0052
Next Token : helper, Posbility: 0.0140
Next Token : if, Posbility: 0.1040
Next Token : match, Posbility: 0.1040
Next Token : let, Posbility: 0.7656
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nn, Posbility: 0.0017
Next Token :  res, Posbility: 0.0021
Next Token :  v, Posbility: 0.0035
Next Token :  rec, Posbility: 0.0051
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0015
Next Token : x, Posbility: 0.0040
Next Token : m, Posbility: 0.0040
Next Token : opt, Posbility: 0.0065
Next Token : n, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0013
Next Token : 0, Posbility: 0.0016
Next Token : _, Posbility: 0.0027
Next Token : 1, Posbility: 0.0228
Next Token :  =, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0003
Next Token :  match, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0004
Next Token : d, Posbility: 0.0005
Next Token : try, Posbility: 0.0005
Next Token : n, Posbility: 0.0010
Next Token : helper, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : Opt, Posbility: 0.0000
Next Token : (, Posbility: 0.0005
Next Token : _, Posbility: 0.1826
Next Token :  , Posbility: 0.8164
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',', Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : ';, Posbility: 0.0003
Next Token : ',, Posbility: 0.0003
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0001
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :    , Posbility: 0.0179
Next Token :     , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0023
Next Token : n, Posbility: 0.0063
Next Token : let, Posbility: 0.0063
Next Token : match, Posbility: 0.0466
Next Token : if, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0002
Next Token :  Some, Posbility: 0.0008
Next Token :  0, Posbility: 0.0010
Next Token :  not, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : d, Posbility: 0.0002
Next Token : let, Posbility: 0.0003
Next Token : helper, Posbility: 0.0003
Next Token : (, Posbility: 0.0012
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ==, Posbility: 0.0038
Next Token :  =, Posbility: 0.0168
Next Token :  >=, Posbility: 0.0278
Next Token :  <=, Posbility: 0.0278
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : gt, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : <, Posbility: 0.0067
Next Token : >, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n >
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0001
Next Token :  100, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token :  1, Posbility: 0.0009
Next Token :  0, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0018
Next Token :  , Posbility: 0.0030
Next Token :  ||, Posbility: 0.0082
Next Token :  &&, Posbility: 0.0288
Next Token :  then, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0056
Next Token :  None, Posbility: 0.0056
Next Token : 
, Posbility: 0.0413
Next Token :  , Posbility: 0.1123
Next Token :  Some, Posbility: 0.8281
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0039
Next Token :  Some, Posbility: 0.0105
Next Token :  [, Posbility: 0.0135
Next Token : (, Posbility: 0.0222
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0012
Next Token : d, Posbility: 0.0033
Next Token : helper, Posbility: 0.0033
Next Token : (, Posbility: 0.1797
Next Token : n, Posbility: 0.8086
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n
 score:False
Error type: noerr
---------------------------
Next Token :  or, Posbility: 0.0013
Next Token :  |, Posbility: 0.0047
Next Token : 
, Posbility: 0.0237
Next Token :  , Posbility: 0.0728
Next Token :  else, Posbility: 0.8867
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0074
Next Token :  match, Posbility: 0.0074
Next Token :  None, Posbility: 0.0486
Next Token :  Some, Posbility: 0.0708
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0023
Next Token : n, Posbility: 0.0063
Next Token : (, Posbility: 0.0172
Next Token : if, Posbility: 0.0172
Next Token : helper, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : ', Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : val, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token :  , Posbility: 0.0159
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0009
Next Token : (, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : digits, Posbility: 0.0001
Next Token : (, Posbility: 0.0025
Next Token : d, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0004
Next Token : '), Posbility: 0.0017
Next Token : ';, Posbility: 0.0019
Next Token : 
, Posbility: 0.0022
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0005
Next Token :  , Posbility: 0.0028
Next Token :  in, Posbility: 0.0087
Next Token : 

, Posbility: 0.3691
Next Token : 
, Posbility: 0.6094
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'

 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0078
Next Token : val, Posbility: 0.0082
Next Token : 

, Posbility: 0.0099
Next Token : in, Posbility: 0.0369
Next Token : let, Posbility: 0.8398
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0255
Next Token :  large, Posbility: 0.0420
Next Token :  find, Posbility: 0.0613
Next Token :  , Posbility: 0.1885
Next Token :  rec, Posbility: 0.5820
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  large, Posbility: 0.0206
Next Token :  max, Posbility: 0.0265
Next Token :  rec, Posbility: 0.0300
Next Token :  find, Posbility: 0.0718
Next Token :  , Posbility: 0.6836
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0117
Next Token : solve, Posbility: 0.0117
Next Token : recursive, Posbility: 0.0117
Next Token : opt, Posbility: 0.0133
Next Token : helper, Posbility: 0.8242
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0027
Next Token : ', Posbility: 0.0035
Next Token :  , Posbility: 0.0058
Next Token : 2, Posbility: 0.0122
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0240
Next Token : list, Posbility: 0.0273
Next Token : max, Posbility: 0.0273
Next Token : rec, Posbility: 0.0352
Next Token : opt, Posbility: 0.4277
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0018
Next Token : 3, Posbility: 0.0018
Next Token : 2, Posbility: 0.0277
Next Token :  , Posbility: 0.0356
Next Token : _, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : none, Posbility: 0.0136
Next Token : all, Posbility: 0.0198
Next Token : rec, Posbility: 0.0225
Next Token : list, Posbility: 0.0327
Next Token : opt, Posbility: 0.5781
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0070
Next Token : ', Posbility: 0.0103
Next Token :  , Posbility: 0.0317
Next Token : 2, Posbility: 0.1104
Next Token : _, Posbility: 0.8164
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0082
Next Token : 2, Posbility: 0.0120
Next Token : list, Posbility: 0.0120
Next Token : rec, Posbility: 0.0287
Next Token : opt, Posbility: 0.6523
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0013
Next Token : 2, Posbility: 0.0039
Next Token :  =, Posbility: 0.0039
Next Token : _, Posbility: 0.0325
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : (), Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : d, Posbility: 0.0004
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token :  i, Posbility: 0.0003
Next Token :  a, Posbility: 0.0003
Next Token :  , Posbility: 0.0017
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  match, Posbility: 0.0006
Next Token :  , Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0017
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0005
Next Token : try, Posbility: 0.0007
Next Token : helper, Posbility: 0.0022
Next Token : let, Posbility: 0.0059
Next Token : match, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : indices, Posbility: 0.0000
Next Token : Digit, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : helper, Posbility: 0.0001
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [],, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 0.0012
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  |, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0065
Next Token :  Some, Posbility: 0.0065
Next Token : 
, Posbility: 0.0065
Next Token :  0, Posbility: 0.0065
Next Token :  None, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token :  |, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0001
Next Token :  0, Posbility: 0.0003
Next Token :  [], Posbility: 0.0004
Next Token :  [, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : _, Posbility: 0.0019
Next Token : d, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : :, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : [], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : _, Posbility: 0.0006
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  when, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0005
Next Token :  match, Posbility: 0.0010
Next Token :  {, Posbility: 0.0010
Next Token :  , Posbility: 0.0097
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0008
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0009
Next Token : helper, Posbility: 0.0010
Next Token : if, Posbility: 0.0108
Next Token : match, Posbility: 0.0139
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0003
Next Token :  nn, Posbility: 0.0005
Next Token :  v, Posbility: 0.0006
Next Token :  rec, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : d, Posbility: 0.0005
Next Token : x, Posbility: 0.0008
Next Token : m, Posbility: 0.0015
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token : 0, Posbility: 0.0007
Next Token : 1, Posbility: 0.0085
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : d, Posbility: 0.0002
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0067
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â€™, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : ',, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0022
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0009
Next Token : n, Posbility: 0.0009
Next Token : let, Posbility: 0.0025
Next Token : match, Posbility: 0.0067
Next Token : if, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  not, Posbility: 0.0002
Next Token :  Some, Posbility: 0.0003
Next Token :  0, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : d, Posbility: 0.0001
Next Token : helper, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ==, Posbility: 0.0005
Next Token :  =, Posbility: 0.0031
Next Token :  <=, Posbility: 0.0031
Next Token :  >=, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : â‰¥, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : <, Posbility: 0.0013
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n >
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  100, Posbility: 0.0001
Next Token :  10, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token :  1, Posbility: 0.0009
Next Token :  0, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0010
Next Token :  and, Posbility: 0.0010
Next Token :  ||, Posbility: 0.0019
Next Token :  &&, Posbility: 0.0109
Next Token :  then, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token :  None, Posbility: 0.0009
Next Token : 
, Posbility: 0.0066
Next Token :  , Posbility: 0.0066
Next Token :  Some, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0002
Next Token :  Some, Posbility: 0.0005
Next Token : (, Posbility: 0.0015
Next Token :  [, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : d, Posbility: 0.0001
Next Token : helper, Posbility: 0.0002
Next Token : (, Posbility: 0.0067
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0002
Next Token :  +, Posbility: 0.0003
Next Token :  , Posbility: 0.0045
Next Token : 
, Posbility: 0.0109
Next Token :  else, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0064
Next Token : 
, Posbility: 0.0119
Next Token :  None, Posbility: 0.0135
Next Token :  Some, Posbility: 0.0197
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0011
Next Token : n, Posbility: 0.0011
Next Token : (, Posbility: 0.0084
Next Token : if, Posbility: 0.0095
Next Token : helper, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_
 score:False
Error type: noerr
---------------------------
Next Token : val, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_
 score:False
Error type: noerr
---------------------------
Next Token : val, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : obj, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : ([, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d
 score:False
Error type: noerr
---------------------------
Next Token : '), Posbility: 0.0005
Next Token : ';, Posbility: 0.0006
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 0.0010
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0002
Next Token :  in, Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'

 score:False
Error type: noerr
---------------------------
Next Token : val, Posbility: 0.0044
Next Token : 

, Posbility: 0.0073
Next Token : in, Posbility: 0.0120
Next Token : (, Posbility: 0.0127
Next Token : let, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  main, Posbility: 0.0131
Next Token :  large, Posbility: 0.0190
Next Token :  find, Posbility: 0.0356
Next Token :  , Posbility: 0.1592
Next Token :  rec, Posbility: 0.7148
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0142
Next Token :  max, Posbility: 0.0161
Next Token :  rec, Posbility: 0.0161
Next Token :  find, Posbility: 0.0439
Next Token :  , Posbility: 0.7773
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : recursive, Posbility: 0.0074
Next Token : solve, Posbility: 0.0084
Next Token : opt, Posbility: 0.0095
Next Token : f, Posbility: 0.0122
Next Token : helper, Posbility: 0.8555
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0019
Next Token : ', Posbility: 0.0019
Next Token :  , Posbility: 0.0051
Next Token : 2, Posbility: 0.0066
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : max, Posbility: 0.0090
Next Token : list, Posbility: 0.0116
Next Token : iter, Posbility: 0.0131
Next Token : rec, Posbility: 0.0217
Next Token : opt, Posbility: 0.7188
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0003
Next Token : 3, Posbility: 0.0006
Next Token : 2, Posbility: 0.0040
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0023
Next Token : all, Posbility: 0.0037
Next Token : list, Posbility: 0.0037
Next Token : none, Posbility: 0.0037
Next Token : opt, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0002
Next Token :  =, Posbility: 0.0003
Next Token : 2, Posbility: 0.0017
Next Token :  , Posbility: 0.0179
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0013
Next Token : all, Posbility: 0.0013
Next Token : int, Posbility: 0.0018
Next Token : none, Posbility: 0.0024
Next Token : opt, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0010
Next Token : 1, Posbility: 0.0018
Next Token : 2, Posbility: 0.0119
Next Token :  , Posbility: 0.0325
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0009
Next Token : list, Posbility: 0.0011
Next Token : rec, Posbility: 0.0018
Next Token : int, Posbility: 0.0021
Next Token : opt, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0008
Next Token : 
, Posbility: 0.0010
Next Token :  =, Posbility: 0.0036
Next Token : _, Posbility: 0.0067
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : (), Posbility: 0.0001
Next Token : d, Posbility: 0.0002
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  match, Posbility: 0.0004
Next Token :  , Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0010
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : if, Posbility: 0.0002
Next Token : helper, Posbility: 0.0004
Next Token : let, Posbility: 0.0015
Next Token : match, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : d, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : Digit, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [],, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  Some, Posbility: 0.0003
Next Token :  0, Posbility: 0.0009
Next Token :  None, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token :  else, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : _, Posbility: 0.0009
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : [], Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token :  , Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0010
Next Token : match, Posbility: 0.0017
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  nn, Posbility: 0.0000
Next Token :  v, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : m, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â€™, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : match, Posbility: 0.0003
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token :  <=, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  >=, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : gt, Posbility: 0.0000
Next Token : â‰¥, Posbility: 0.0000
Next Token : <, Posbility: 0.0001
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n >
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  100, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  &&, Posbility: 0.0001
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  some, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n
 score:False
Error type: noerr
---------------------------
Next Token :  otherwise, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0010
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  None, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0000
Next Token : (), Posbility: 0.0001
Next Token : if, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : obj, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : obj, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d
 score:False
Error type: noerr
---------------------------
Next Token : '), Posbility: 0.0002
Next Token : ';, Posbility: 0.0003
Next Token : 

, Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : , Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0042
Next Token : helper, Posbility: 0.0042
Next Token : in, Posbility: 0.0070
Next Token : (, Posbility: 0.0139
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  main, Posbility: 0.0090
Next Token :  large, Posbility: 0.0103
Next Token :  find, Posbility: 0.0192
Next Token :  , Posbility: 0.1104
Next Token :  rec, Posbility: 0.8164
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0084
Next Token :  rec, Posbility: 0.0095
Next Token :  loop, Posbility: 0.0095
Next Token :  find, Posbility: 0.0258
Next Token :  , Posbility: 0.8516
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : recursive, Posbility: 0.0042
Next Token : solve, Posbility: 0.0048
Next Token : opt, Posbility: 0.0061
Next Token : f, Posbility: 0.0079
Next Token : helper, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0013
Next Token : 1, Posbility: 0.0015
Next Token :  , Posbility: 0.0045
Next Token : 2, Posbility: 0.0045
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : max, Posbility: 0.0055
Next Token : list, Posbility: 0.0063
Next Token : all, Posbility: 0.0071
Next Token : rec, Posbility: 0.0103
Next Token : opt, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : 3, Posbility: 0.0002
Next Token : 2, Posbility: 0.0012
Next Token :  , Posbility: 0.0075
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0009
Next Token : none, Posbility: 0.0014
Next Token : all, Posbility: 0.0014
Next Token : optional, Posbility: 0.0014
Next Token : opt, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0002
Next Token : op, Posbility: 0.0002
Next Token : none, Posbility: 0.0002
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0008
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token : op, Posbility: 0.0002
Next Token : int, Posbility: 0.0002
Next Token : none, Posbility: 0.0002
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0005
Next Token :  =, Posbility: 0.0011
Next Token : 2, Posbility: 0.0021
Next Token :  , Posbility: 0.0471
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0002
Next Token : optional, Posbility: 0.0003
Next Token : op, Posbility: 0.0004
Next Token : int, Posbility: 0.0005
Next Token : opt, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0002
Next Token : 
, Posbility: 0.0008
Next Token :  =, Posbility: 0.0028
Next Token : _, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : d, Posbility: 0.0001
Next Token : (), Posbility: 0.0001
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  match, Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : helper, Posbility: 0.0002
Next Token : let, Posbility: 0.0006
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : dots, Posbility: 0.0000
Next Token : Digit, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  dengan, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  0, Posbility: 0.0003
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token :  else, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0005
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  , Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : match, Posbility: 0.0003
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  nn, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : dummy, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digit, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : â€™, Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : match, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token :  <=, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : gt, Posbility: 0.0000
Next Token : â‰¥, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n >
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  100, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  some, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some 
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  otherwise, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  None, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_
 score:False
Error type: noerr
---------------------------
Next Token : o, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : 

, Posbility: 0.0005
Next Token : _, Posbility: 0.0008
Next Token : 
, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d
 score:False
Error type: noerr
---------------------------
Next Token : '), Posbility: 0.0001
Next Token : ';, Posbility: 0.0002
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 0.0010
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : , Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.2695
Next Token : 
, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'

 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0017
Next Token : module, Posbility: 0.0027
Next Token : in, Posbility: 0.0064
Next Token : (, Posbility: 0.0093
Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  large, Posbility: 0.0028
Next Token :  main, Posbility: 0.0041
Next Token :  find, Posbility: 0.0067
Next Token :  , Posbility: 0.0820
Next Token :  rec, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0067
Next Token :  loop, Posbility: 0.0067
Next Token :  rec, Posbility: 0.0067
Next Token :  find, Posbility: 0.0183
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : solve, Posbility: 0.0030
Next Token : digits, Posbility: 0.0030
Next Token : opt, Posbility: 0.0038
Next Token : f, Posbility: 0.0071
Next Token : helper, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0009
Next Token : 1, Posbility: 0.0010
Next Token : 2, Posbility: 0.0028
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0026
Next Token : max, Posbility: 0.0029
Next Token : all, Posbility: 0.0038
Next Token : rec, Posbility: 0.0038
Next Token : opt, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0076
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0004
Next Token : optional, Posbility: 0.0004
Next Token : none, Posbility: 0.0004
Next Token : all, Posbility: 0.0005
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : 2, Posbility: 0.0005
Next Token :  =, Posbility: 0.0006
Next Token :  , Posbility: 0.0374
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : o, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : optional, Posbility: 0.0003
Next Token : op, Posbility: 0.0004
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  =, Posbility: 0.0022
Next Token : _, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : (), Posbility: 0.0001
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =

 score:False
Error type: noerr
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : helper, Posbility: 0.0001
Next Token : let, Posbility: 0.0003
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match
 score:False
Error type: noerr
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match 
 score:False
Error type: noerr
---------------------------
Next Token : digit, Posbility: 0.0000
Next Token : dots, Posbility: 0.0000
Next Token : Digit, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits
 score:False
Error type: noerr
---------------------------
Next Token :  dengan, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with

 score:False
Error type: noerr
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  |
 score:False
Error type: noerr
---------------------------
Next Token : [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | []
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] 
 score:False
Error type: noerr
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] ->
 score:False
Error type: noerr
---------------------------
Next Token :  Some, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  |
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d'
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
 score:False
Error type: noerr
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  , Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : match, Posbility: 0.0001
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  nn, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n =
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = 
 score:False
Error type: noerr
---------------------------
Next Token : dummy, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper
 score:False
Error type: noerr
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper 
 score:False
Error type: noerr
---------------------------
Next Token : digit, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d
 score:False
Error type: noerr
---------------------------
Next Token : ',', Posbility: 0.0000
Next Token : â€™, Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d'
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : match, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if 
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n
 score:False
Error type: noerr
---------------------------
Next Token :  <=, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n 
 score:False
Error type: noerr
---------------------------
Next Token : å¤§, Posbility: 0.0000
Next Token : gt, Posbility: 0.0000
Next Token : â‰¥, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n >
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then
 score:False
Error type: noerr
---------------------------
Next Token :  some, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some 
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  otherwise, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else
 score:False
Error type: noerr
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  None, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_
 score:False
Error type: noerr
---------------------------
Next Token : o, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0204
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : 

, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token : 
, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d
 score:False
Error type: noerr
---------------------------
Next Token : '), Posbility: 0.0001
Next Token : ';, Posbility: 0.0002
Next Token : 

, Posbility: 0.0007
Next Token : 
, Posbility: 0.0012
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : , Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'

 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0021
Next Token : module, Posbility: 0.0029
Next Token : in, Posbility: 0.0047
Next Token : (, Posbility: 0.0099
Next Token : let, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let
 score:False
Error type: noerr
---------------------------
Next Token :  large, Posbility: 0.0020
Next Token :  main, Posbility: 0.0042
Next Token :  find, Posbility: 0.0042
Next Token :  , Posbility: 0.0659
Next Token :  rec, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  max, Posbility: 0.0042
Next Token :  rec, Posbility: 0.0048
Next Token :  loop, Posbility: 0.0048
Next Token :  find, Posbility: 0.0115
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : solve, Posbility: 0.0018
Next Token : digits, Posbility: 0.0021
Next Token : opt, Posbility: 0.0030
Next Token : f, Posbility: 0.0044
Next Token : helper, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0008
Next Token : 1, Posbility: 0.0009
Next Token : 2, Posbility: 0.0017
Next Token :  , Posbility: 0.0040
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0014
Next Token : list, Posbility: 0.0014
Next Token : max, Posbility: 0.0021
Next Token : all, Posbility: 0.0030
Next Token : opt, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0002
Next Token : op, Posbility: 0.0002
Next Token : optional, Posbility: 0.0002
Next Token : all, Posbility: 0.0003
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : inf, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0229
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : o, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : op, Posbility: 0.0003
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0006
Next Token :  =, Posbility: 0.0022
Next Token : _, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : (), Posbility: 0.0001
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =

 score:False
Error type: noerr
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : helper, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match 
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : dots, Posbility: 0.0000
Next Token : Digit, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits
 score:False
Error type: noerr
---------------------------
Next Token :  dengan, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with

 score:False
Error type: noerr
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  |
 score:False
Error type: noerr
---------------------------
Next Token : [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | []
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] 
 score:False
Error type: noerr
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] ->
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : when, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  |
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::
 score:False
Error type: noerr
---------------------------
Next Token : [], Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d'
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
 score:False
Error type: noerr
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : match, Posbility: 0.0000
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  nn, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n =
 score:False
Error type: noerr
---------------------------
Next Token :  Helper, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = 
 score:False
Error type: noerr
---------------------------
Next Token : d, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : dummy, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : digit, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : â€™, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d'
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : match, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if 
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n
 score:False
Error type: noerr
---------------------------
Next Token :  <=, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n 
 score:False
Error type: noerr
---------------------------
Next Token : gt, Posbility: 0.0000
Next Token : å¤§, Posbility: 0.0000
Next Token : â‰¥, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n >
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then
 score:False
Error type: noerr
---------------------------
Next Token :  some, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n
 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  otherwise, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else
 score:False
Error type: noerr
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_
 score:False
Error type: noerr
---------------------------
Next Token : o, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.1484
Next Token : _, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ott, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : 
, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d
 score:False
Error type: noerr
---------------------------
Next Token : '), Posbility: 0.0001
Next Token : ';, Posbility: 0.0001
Next Token : 

, Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d'
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : , Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.2930
Next Token : 
, Posbility: 0.7031
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d'

 score:False
Error type: noerr
---------------------------
Next Token : module, Posbility: 0.0015
Next Token : in, Posbility: 0.0047
Next Token : (, Posbility: 0.0050
Next Token : helper, Posbility: 0.0061
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d'
let
 score:False
Error type: noerr
---------------------------
Next Token :  large, Posbility: 0.0006
Next Token :  main, Posbility: 0.0020
Next Token :  find, Posbility: 0.0023
Next Token :  , Posbility: 0.0525
Next Token :  rec, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d'
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  max, Posbility: 0.0027
Next Token :  rec, Posbility: 0.0027
Next Token :  loop, Posbility: 0.0030
Next Token :  find, Posbility: 0.0064
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d'
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : solve, Posbility: 0.0007
Next Token : recursive, Posbility: 0.0009
Next Token : opt, Posbility: 0.0015
Next Token : f, Posbility: 0.0022
Next Token : helper, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d'
let rec helper
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0005
Next Token :  =, Posbility: 0.0006
Next Token : 2, Posbility: 0.0010
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d'
let rec helper_
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0011
Next Token : list, Posbility: 0.0011
Next Token : max, Posbility: 0.0019
Next Token : all, Posbility: 0.0024
Next Token : opt, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d'
let rec helper_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : op, Posbility: 0.0002
Next Token : all, Posbility: 0.0003
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : optional, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the largest number that can be formed with the given list of digits. *)
let rec helper digits =
  match digits with
  | [] -> 0
  | d::d' -> d + helper d'
let rec helper_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt d'
let rec helper_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt d'
let rec helper_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt d'
let rec helper_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt_opt_opt_opt digits =
  match digits with
  | [] -> None
  | d::d' ->
    let n = helper d' in
    if n > 0 then Some n else helper_opt_opt_opt_opt_opt_opt_opt d'
let rec helper_opt_opt_opt_opt
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>