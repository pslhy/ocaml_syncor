code:
 (* Write a function to convert a tuple to a string. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0315
Next Token :  to, Posbility: 0.0854
Next Token :  rec, Posbility: 0.1240
Next Token :  tuple, Posbility: 0.1406
Next Token :  , Posbility: 0.4336
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0586
Next Token : f, Posbility: 0.0586
Next Token : tup, Posbility: 0.0664
Next Token : pp, Posbility: 0.0752
Next Token : print, Posbility: 0.2617
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : T, Posbility: 0.0046
Next Token : Tuple, Posbility: 0.0075
Next Token :  =, Posbility: 0.0491
Next Token :  , Posbility: 0.1040
Next Token : _, Posbility: 0.7695
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : string, Posbility: 0.0223
Next Token : list, Posbility: 0.0223
Next Token : t, Posbility: 0.0369
Next Token : tup, Posbility: 0.0688
Next Token : tuple, Posbility: 0.5742
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0120
Next Token :  a, Posbility: 0.0327
Next Token : _, Posbility: 0.0537
Next Token :  =, Posbility: 0.3086
Next Token :  , Posbility: 0.5117
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0227
Next Token : tup, Posbility: 0.0544
Next Token : x, Posbility: 0.1680
Next Token : (, Posbility: 0.2158
Next Token : t, Posbility: 0.4551
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0013
Next Token :  ~, Posbility: 0.0021
Next Token :  fmt, Posbility: 0.0040
Next Token :  , Posbility: 0.0122
Next Token :  =, Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0129
Next Token :  format, Posbility: 0.0212
Next Token :  String, Posbility: 0.0212
Next Token :  , Posbility: 0.2021
Next Token : 
, Posbility: 0.7031
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0048
Next Token : 	, Posbility: 0.0061
Next Token :    , Posbility: 0.0166
Next Token :     , Posbility: 0.1572
Next Token :   , Posbility: 0.8008
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : printf, Posbility: 0.0442
Next Token : match, Posbility: 0.0933
Next Token : Format, Posbility: 0.1201
Next Token : Printf, Posbility: 0.1973
Next Token : let, Posbility: 0.3262
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0182
Next Token :  str, Posbility: 0.0299
Next Token :  open, Posbility: 0.1338
Next Token :  rec, Posbility: 0.2207
Next Token :  , Posbility: 0.4121
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0405
Next Token : t, Posbility: 0.0591
Next Token : f, Posbility: 0.0762
Next Token : print, Posbility: 0.0762
Next Token : s, Posbility: 0.3008
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0043
Next Token : 1, Posbility: 0.0080
Next Token : ,, Posbility: 0.0091
Next Token : s, Posbility: 0.0280
Next Token :  =, Posbility: 0.9258
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0471
Next Token : 
, Posbility: 0.0776
Next Token :  "", Posbility: 0.0776
Next Token :  String, Posbility: 0.3477
Next Token :  , Posbility: 0.3477
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0356
Next Token : (, Posbility: 0.0356
Next Token : sprintf, Posbility: 0.0664
Next Token : Format, Posbility: 0.1094
Next Token : List, Posbility: 0.3828
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0015
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0337
Next Token : to, Posbility: 0.0488
Next Token : rev, Posbility: 0.0913
Next Token : fold, Posbility: 0.1035
Next Token : map, Posbility: 0.5938
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0200
Next Token :  i, Posbility: 0.0226
Next Token :  string, Posbility: 0.0479
Next Token : _, Posbility: 0.0791
Next Token :  , Posbility: 0.7500
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0176
Next Token : f, Posbility: 0.0176
Next Token : Format, Posbility: 0.0199
Next Token : print, Posbility: 0.1143
Next Token : (, Posbility: 0.7461
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : sprintf, Posbility: 0.0147
Next Token : Fun, Posbility: 0.0167
Next Token : String, Posbility: 0.0243
Next Token : function, Posbility: 0.0581
Next Token : fun, Posbility: 0.8047
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0093
Next Token :  a, Posbility: 0.0173
Next Token :  v, Posbility: 0.0471
Next Token :  i, Posbility: 0.0532
Next Token :  , Posbility: 0.8320
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0159
Next Token : t, Posbility: 0.0337
Next Token : e, Posbility: 0.0554
Next Token : (, Posbility: 0.1177
Next Token : x, Posbility: 0.6758
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0002
Next Token :  i, Posbility: 0.0004
Next Token :  =>, Posbility: 0.0010
Next Token : ->, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : â†’, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0305
Next Token :  format, Posbility: 0.0503
Next Token :  String, Posbility: 0.0830
Next Token :  string, Posbility: 0.1367
Next Token :  , Posbility: 0.6133
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0261
Next Token : Format, Posbility: 0.1172
Next Token : x, Posbility: 0.1699
Next Token : sprintf, Posbility: 0.2480
Next Token : Printf, Posbility: 0.3184
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : ("%, Posbility: 0.0003
Next Token :  ", Posbility: 0.0009
Next Token :  "%, Posbility: 0.0012
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fprintf, Posbility: 0.0055
Next Token : format, Posbility: 0.0102
Next Token : pr, Posbility: 0.0102
Next Token : printf, Posbility: 0.0315
Next Token : sprintf, Posbility: 0.9180
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ("%, Posbility: 0.0053
Next Token :  "$, Posbility: 0.0068
Next Token :  , Posbility: 0.0112
Next Token :  "%, Posbility: 0.4785
Next Token :  ", Posbility: 0.4785
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0305
Next Token : x, Posbility: 0.0305
Next Token : [%, Posbility: 0.0503
Next Token : (%, Posbility: 0.0732
Next Token :  %, Posbility: 0.6133
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0269
Next Token : ., Posbility: 0.0344
Next Token : a, Posbility: 0.1748
Next Token : d, Posbility: 0.3262
Next Token : s, Posbility: 0.3262
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0186
Next Token : ), Posbility: 0.0305
Next Token :  ", Posbility: 0.1367
Next Token : "), Posbility: 0.1367
Next Token : ", Posbility: 0.6133
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0004
Next Token :  String, Posbility: 0.0004
Next Token :   , Posbility: 0.0005
Next Token :  string, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : L, Posbility: 0.0007
Next Token : Print, Posbility: 0.0009
Next Token : Int, Posbility: 0.0011
Next Token : (, Posbility: 0.0227
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  |, Posbility: 0.0005
Next Token : ., Posbility: 0.0017
Next Token : ::, Posbility: 0.0045
Next Token :  , Posbility: 0.0139
Next Token : ), Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0010
Next Token :  ~, Posbility: 0.0012
Next Token :  String, Posbility: 0.0015
Next Token : 
, Posbility: 0.0017
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Tuple, Posbility: 0.0001
Next Token : List, Posbility: 0.0004
Next Token : s, Posbility: 0.0005
Next Token : (, Posbility: 0.0097
Next Token : t, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0027
Next Token :  >>, Posbility: 0.0034
Next Token :  |, Posbility: 0.0039
Next Token : 
, Posbility: 0.0415
Next Token :  in, Posbility: 0.9414
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0002
Next Token :   , Posbility: 0.0013
Next Token : 

, Posbility: 0.0013
Next Token :  , Posbility: 0.0085
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :       , Posbility: 0.0007
Next Token :  , Posbility: 0.0008
Next Token :     , Posbility: 0.0046
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0111
Next Token : let, Posbility: 0.0234
Next Token : print, Posbility: 0.0388
Next Token : printf, Posbility: 0.0640
Next Token : Printf, Posbility: 0.7773
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf
 score:False
Error type: noerr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : ("%, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : write, Posbility: 0.0393
Next Token : pr, Posbility: 0.0393
Next Token : fprintf, Posbility: 0.1768
Next Token : sprintf, Posbility: 0.1768
Next Token : printf, Posbility: 0.4785
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf
 score:False
Error type: noerr
---------------------------
Next Token :  "\, Posbility: 0.0067
Next Token :  "$, Posbility: 0.0067
Next Token :  , Posbility: 0.0110
Next Token :  "%, Posbility: 0.3652
Next Token :  ", Posbility: 0.6016
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : {%, Posbility: 0.0330
Next Token :  , Posbility: 0.0371
Next Token : (, Posbility: 0.0542
Next Token : [%, Posbility: 0.1147
Next Token : (%, Posbility: 0.6602
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : %%, Posbility: 0.0009
Next Token : ., Posbility: 0.0010
Next Token : S, Posbility: 0.0011
Next Token : a, Posbility: 0.1631
Next Token : s, Posbility: 0.8281
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : ,, Posbility: 0.0006
Next Token : ),, Posbility: 0.0007
Next Token : );, Posbility: 0.0015
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0005
Next Token :  ", Posbility: 0.0011
Next Token : %, Posbility: 0.0018
Next Token : \, Posbility: 0.0471
Next Token : ", Posbility: 0.9492
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)"
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0004
Next Token :  String, Posbility: 0.0005
Next Token : 
, Posbility: 0.0006
Next Token :  ~, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" 
 score:False
Error type: noerr
---------------------------
Next Token : ",, Posbility: 0.0002
Next Token : Join, Posbility: 0.0003
Next Token : List, Posbility: 0.0011
Next Token : (, Posbility: 0.0947
Next Token : s, Posbility: 0.9023
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0089
Next Token :  in, Posbility: 0.0145
Next Token : ;, Posbility: 0.1768
Next Token : 

, Posbility: 0.2930
Next Token : 
, Posbility: 0.4824
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0214
Next Token : (, Posbility: 0.0214
Next Token : let, Posbility: 0.0796
Next Token : ;, Posbility: 0.1396
Next Token : in, Posbility: 0.2158
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0003
Next Token : ;, Posbility: 0.0176
Next Token :  , Posbility: 0.0422
Next Token : 

, Posbility: 0.3535
Next Token : 
, Posbility: 0.5820
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : println, Posbility: 0.0330
Next Token : ;, Posbility: 0.0481
Next Token : (, Posbility: 0.1309
Next Token : print, Posbility: 0.1309
Next Token : let, Posbility: 0.4297
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  to, Posbility: 0.0239
Next Token :  rec, Posbility: 0.0942
Next Token :  tuple, Posbility: 0.1069
Next Token :  main, Posbility: 0.1211
Next Token :  , Posbility: 0.4805
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0181
Next Token : f, Posbility: 0.0339
Next Token : t, Posbility: 0.0630
Next Token : (), Posbility: 0.1514
Next Token : print, Posbility: 0.5312
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0012
Next Token :  a, Posbility: 0.0016
Next Token :  =, Posbility: 0.0151
Next Token :  , Posbility: 0.0361
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0277
Next Token : pair, Posbility: 0.0315
Next Token : string, Posbility: 0.0356
Next Token : list, Posbility: 0.0967
Next Token : tuple, Posbility: 0.4922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0806
Next Token : s, Posbility: 0.0806
Next Token : 2, Posbility: 0.1177
Next Token : ', Posbility: 0.1177
Next Token : _, Posbility: 0.5273
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0339
Next Token : ex, Posbility: 0.0339
Next Token : 2, Posbility: 0.0435
Next Token : string, Posbility: 0.0493
Next Token : list, Posbility: 0.0718
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0226
Next Token :  list, Posbility: 0.0479
Next Token :  =, Posbility: 0.1299
Next Token :  l, Posbility: 0.1299
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0654
Next Token : ls, Posbility: 0.0654
Next Token : tl, Posbility: 0.1377
Next Token : ts, Posbility: 0.2578
Next Token : t, Posbility: 0.2930
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0049
Next Token :  l, Posbility: 0.0071
Next Token : list, Posbility: 0.0193
Next Token : _, Posbility: 0.0248
Next Token :  =, Posbility: 0.9297
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0005
Next Token :  String, Posbility: 0.0008
Next Token :   , Posbility: 0.0010
Next Token :  , Posbility: 0.1475
Next Token : 
, Posbility: 0.8477
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token :    , Posbility: 0.0012
Next Token : let, Posbility: 0.0024
Next Token :     , Posbility: 0.0067
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : for, Posbility: 0.0054
Next Token : if, Posbility: 0.0146
Next Token : List, Posbility: 0.0398
Next Token : Printf, Posbility: 0.1079
Next Token : let, Posbility: 0.8008
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0023
Next Token :  open, Posbility: 0.0034
Next Token :  l, Posbility: 0.0071
Next Token :  rec, Posbility: 0.0320
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0027
Next Token : x, Posbility: 0.0030
Next Token : print, Posbility: 0.0050
Next Token : t, Posbility: 0.0073
Next Token : s, Posbility: 0.9531
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 0.0009
Next Token : 1, Posbility: 0.0012
Next Token : s, Posbility: 0.0046
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  [, Posbility: 0.0006
Next Token :  String, Posbility: 0.0101
Next Token : 
, Posbility: 0.0747
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0019
Next Token : t, Posbility: 0.0024
Next Token : Map, Posbility: 0.0024
Next Token : (, Posbility: 0.0040
Next Token : List, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.0014
Next Token : iter, Posbility: 0.0035
Next Token : rev, Posbility: 0.0057
Next Token : fold, Posbility: 0.0177
Next Token : map, Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0007
Next Token : _, Posbility: 0.0024
Next Token : 
, Posbility: 0.0031
Next Token : i, Posbility: 0.0139
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Printf, Posbility: 0.0004
Next Token : Print, Posbility: 0.0005
Next Token : List, Posbility: 0.0006
Next Token : print, Posbility: 0.0096
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Print, Posbility: 0.0002
Next Token : print, Posbility: 0.0003
Next Token : fn, Posbility: 0.0005
Next Token : function, Posbility: 0.0041
Next Token : fun, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0007
Next Token :  v, Posbility: 0.0027
Next Token :  l, Posbility: 0.0052
Next Token :  i, Posbility: 0.0058
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0009
Next Token : tup, Posbility: 0.0023
Next Token : (, Posbility: 0.0063
Next Token : t, Posbility: 0.0466
Next Token : x, Posbility: 0.9375
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  i, Posbility: 0.0001
Next Token : ->, Posbility: 0.0002
Next Token : s, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0004
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "%, Posbility: 0.0006
Next Token :  ", Posbility: 0.0010
Next Token : 
, Posbility: 0.0025
Next Token :  String, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0048
Next Token : (, Posbility: 0.0079
Next Token : sprintf, Posbility: 0.0167
Next Token : print, Posbility: 0.0277
Next Token : Printf, Posbility: 0.9180
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ("%, Posbility: 0.0000
Next Token : 1., Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : fprintf, Posbility: 0.0001
Next Token : printf, Posbility: 0.0005
Next Token : sprintf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  "<, Posbility: 0.0005
Next Token :  "\, Posbility: 0.0008
Next Token :  , Posbility: 0.0035
Next Token :  "%, Posbility: 0.0178
Next Token :  ", Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  |, Posbility: 0.0098
Next Token : [%, Posbility: 0.0162
Next Token : (%, Posbility: 0.0344
Next Token :  , Posbility: 0.0388
Next Token :  %, Posbility: 0.8867
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : A, Posbility: 0.0014
Next Token : ., Posbility: 0.0016
Next Token : d, Posbility: 0.0048
Next Token : a, Posbility: 0.0664
Next Token : s, Posbility: 0.9180
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ), Posbility: 0.0081
Next Token :  ", Posbility: 0.0133
Next Token : ,, Posbility: 0.0133
Next Token : "), Posbility: 0.0133
Next Token : ", Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  *), Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Print, Posbility: 0.0005
Next Token : print, Posbility: 0.0006
Next Token : ), Posbility: 0.0010
Next Token : (, Posbility: 0.0159
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token : ;, Posbility: 0.0002
Next Token :  , Posbility: 0.0025
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  @, Posbility: 0.0005
Next Token :  ~, Posbility: 0.0015
Next Token : 
, Posbility: 0.0040
Next Token :  [, Posbility: 0.0046
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : List, Posbility: 0.0024
Next Token : (, Posbility: 0.0292
Next Token : t, Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : ., Posbility: 0.0012
Next Token : 
, Posbility: 0.0022
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0024
Next Token : if, Posbility: 0.0039
Next Token : printf, Posbility: 0.0064
Next Token : let, Posbility: 0.0176
Next Token : Printf, Posbility: 0.9570
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0003
Next Token : write, Posbility: 0.0003
Next Token : fprintf, Posbility: 0.0009
Next Token : sprintf, Posbility: 0.0010
Next Token : printf, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0009
Next Token :  "\, Posbility: 0.0009
Next Token :  "<, Posbility: 0.0009
Next Token :  "%, Posbility: 0.0067
Next Token :  ", Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : {%, Posbility: 0.0240
Next Token : (, Posbility: 0.0349
Next Token : [, Posbility: 0.0510
Next Token : (%, Posbility: 0.3320
Next Token : [%, Posbility: 0.5469
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0001
Next Token : %%, Posbility: 0.0002
Next Token : S, Posbility: 0.0003
Next Token : a, Posbility: 0.0028
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : ", Posbility: 0.0002
Next Token : ];, Posbility: 0.0002
Next Token : ], Posbility: 0.0293
Next Token : ]", Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]"
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : Join, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0015
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0021
Next Token :  |, Posbility: 0.0021
Next Token :  in, Posbility: 0.0415
Next Token : 

, Posbility: 0.1128
Next Token : 
, Posbility: 0.8359
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0152
Next Token : (, Posbility: 0.0152
Next Token : ;, Posbility: 0.0322
Next Token : let, Posbility: 0.0322
Next Token : in, Posbility: 0.7344
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : , Posbility: 0.0004
Next Token :  , Posbility: 0.0020
Next Token : ;, Posbility: 0.0047
Next Token : 

, Posbility: 0.3750
Next Token : 
, Posbility: 0.6172
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0124
Next Token : print, Posbility: 0.0159
Next Token : 

, Posbility: 0.0192
Next Token : (, Posbility: 0.1035
Next Token : let, Posbility: 0.7656
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  to, Posbility: 0.0391
Next Token :  main, Posbility: 0.0569
Next Token :  rec, Posbility: 0.0569
Next Token :  tuple, Posbility: 0.0825
Next Token :  , Posbility: 0.6094
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0100
Next Token : t, Posbility: 0.0129
Next Token : f, Posbility: 0.0146
Next Token : (), Posbility: 0.0396
Next Token : print, Posbility: 0.7969
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token :  a, Posbility: 0.0007
Next Token :  =, Posbility: 0.0035
Next Token :  , Posbility: 0.0123
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0118
Next Token : string, Posbility: 0.0172
Next Token : pair, Posbility: 0.0322
Next Token : list, Posbility: 0.0603
Next Token : tuple, Posbility: 0.6484
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0092
Next Token : s, Posbility: 0.0282
Next Token :  , Posbility: 0.0410
Next Token : 2, Posbility: 0.0598
Next Token : _, Posbility: 0.8242
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : set, Posbility: 0.0449
Next Token : string, Posbility: 0.0449
Next Token : opt, Posbility: 0.0449
Next Token : array, Posbility: 0.0579
Next Token : list, Posbility: 0.2012
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0037
Next Token :  , Posbility: 0.0396
Next Token : ', Posbility: 0.0508
Next Token : 2, Posbility: 0.0835
Next Token : _, Posbility: 0.7930
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : com, Posbility: 0.0417
Next Token : of, Posbility: 0.0417
Next Token : with, Posbility: 0.0471
Next Token : sep, Posbility: 0.0776
Next Token : opt, Posbility: 0.1001
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0023
Next Token : s, Posbility: 0.0071
Next Token :  =, Posbility: 0.0117
Next Token : _, Posbility: 0.0317
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : o, Posbility: 0.0030
Next Token : opt, Posbility: 0.0030
Next Token : (, Posbility: 0.0106
Next Token : x, Posbility: 0.0136
Next Token : t, Posbility: 0.9570
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0004
Next Token :  ~, Posbility: 0.0007
Next Token :  list, Posbility: 0.0009
Next Token :  , Posbility: 0.0228
Next Token :  =, Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  match, Posbility: 0.0004
Next Token :  , Posbility: 0.0097
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :    , Posbility: 0.0005
Next Token : let, Posbility: 0.0008
Next Token :     , Posbility: 0.0015
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0078
Next Token : Printf, Posbility: 0.0211
Next Token : if, Posbility: 0.0947
Next Token : match, Posbility: 0.1562
Next Token : let, Posbility: 0.6992
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  empty, Posbility: 0.0009
Next Token :  v, Posbility: 0.0024
Next Token :  open, Posbility: 0.0035
Next Token :  rec, Posbility: 0.0121
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0024
Next Token : opt, Posbility: 0.0027
Next Token : x, Posbility: 0.0035
Next Token : t, Posbility: 0.0045
Next Token : s, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0005
Next Token : _, Posbility: 0.0009
Next Token : s, Posbility: 0.0010
Next Token :  , Posbility: 0.0015
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0005
Next Token :  String, Posbility: 0.0014
Next Token :  match, Posbility: 0.0037
Next Token : 
, Posbility: 0.0752
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0024
Next Token : (, Posbility: 0.0039
Next Token : if, Posbility: 0.0064
Next Token : Option, Posbility: 0.0176
Next Token : List, Posbility: 0.9570
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0004
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0009
Next Token : try, Posbility: 0.0015
Next Token : filter, Posbility: 0.0031
Next Token : fold, Posbility: 0.0040
Next Token : map, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0013
Next Token : 
, Posbility: 0.0024
Next Token : _, Posbility: 0.0045
Next Token : i, Posbility: 0.0045
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Print, Posbility: 0.0001
Next Token : Printf, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : print, Posbility: 0.0004
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token :  fun, Posbility: 0.0001
Next Token : fn, Posbility: 0.0002
Next Token : function, Posbility: 0.0028
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token :  ?, Posbility: 0.0001
Next Token :  i, Posbility: 0.0003
Next Token :  v, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : t, Posbility: 0.0003
Next Token : (, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0013
Next Token :  ", Posbility: 0.0017
Next Token :  match, Posbility: 0.0095
Next Token : 
, Posbility: 0.0122
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0062
Next Token : Option, Posbility: 0.0062
Next Token : x, Posbility: 0.0102
Next Token : if, Posbility: 0.0459
Next Token : Printf, Posbility: 0.9180
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : 1., Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : format, Posbility: 0.0000
Next Token : fprintf, Posbility: 0.0001
Next Token : printf, Posbility: 0.0013
Next Token : sprintf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  "\, Posbility: 0.0003
Next Token :  "@, Posbility: 0.0003
Next Token :  , Posbility: 0.0017
Next Token :  "%, Posbility: 0.0179
Next Token :  ", Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ?, Posbility: 0.0017
Next Token : [%, Posbility: 0.0031
Next Token :  |, Posbility: 0.0084
Next Token :  , Posbility: 0.0095
Next Token :  %, Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0005
Next Token : b, Posbility: 0.0005
Next Token : a, Posbility: 0.0122
Next Token : ?, Posbility: 0.0122
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0039
Next Token :  ", Posbility: 0.0044
Next Token :  , Posbility: 0.0050
Next Token : ?", Posbility: 0.0082
Next Token : ", Posbility: 0.9531
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  (*, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : Option, Posbility: 0.0001
Next Token : (, Posbility: 0.0041
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0001
Next Token : ;, Posbility: 0.0002
Next Token :  |, Posbility: 0.0006
Next Token :  , Posbility: 0.0022
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0001
Next Token : opt, Posbility: 0.0002
Next Token : Option, Posbility: 0.0005
Next Token : (, Posbility: 0.0085
Next Token : t, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0010
Next Token :  else, Posbility: 0.0019
Next Token :  |, Posbility: 0.0028
Next Token : 
, Posbility: 0.0031
Next Token :  in, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0090
Next Token : printf, Posbility: 0.0090
Next Token : match, Posbility: 0.0405
Next Token : if, Posbility: 0.1099
Next Token : Printf, Posbility: 0.8125
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0005
Next Token : sprintf, Posbility: 0.0005
Next Token : print, Posbility: 0.0013
Next Token : fprintf, Posbility: 0.0019
Next Token : printf, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "\, Posbility: 0.0004
Next Token :  "<, Posbility: 0.0011
Next Token :  , Posbility: 0.0027
Next Token :  "%, Posbility: 0.0201
Next Token :  ", Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0015
Next Token : {%, Posbility: 0.0058
Next Token : (%, Posbility: 0.0095
Next Token : [, Posbility: 0.0122
Next Token : [%, Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0010
Next Token : ?, Posbility: 0.0040
Next Token : S, Posbility: 0.0040
Next Token : a, Posbility: 0.0058
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : |, Posbility: 0.0027
Next Token :  |, Posbility: 0.0030
Next Token :  , Posbility: 0.0064
Next Token : ], Posbility: 0.0222
Next Token : ]", Posbility: 0.9453
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]"
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0003
Next Token :  [, Posbility: 0.0003
Next Token : 
, Posbility: 0.0059
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0003
Next Token : (", Posbility: 0.0004
Next Token : Option, Posbility: 0.0007
Next Token : (, Posbility: 0.0292
Next Token : s, Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0104
Next Token :  , Posbility: 0.0118
Next Token :  |, Posbility: 0.0361
Next Token : 

, Posbility: 0.0986
Next Token : 
, Posbility: 0.8242
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0053
Next Token : 

, Posbility: 0.0057
Next Token : (, Posbility: 0.0064
Next Token : let, Posbility: 0.0225
Next Token : in, Posbility: 0.8945
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : , Posbility: 0.0005
Next Token :  , Posbility: 0.0012
Next Token : ;, Posbility: 0.0028
Next Token : 

, Posbility: 0.3184
Next Token : 
, Posbility: 0.6758
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : module, Posbility: 0.0060
Next Token : *, Posbility: 0.0077
Next Token : 

, Posbility: 0.0223
Next Token : (, Posbility: 0.0776
Next Token : let, Posbility: 0.8359
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  to, Posbility: 0.0259
Next Token :  main, Posbility: 0.0259
Next Token :  tuple, Posbility: 0.0376
Next Token :  rec, Posbility: 0.0427
Next Token :  , Posbility: 0.7578
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0052
Next Token : t, Posbility: 0.0052
Next Token : f, Posbility: 0.0067
Next Token : (), Posbility: 0.0234
Next Token : print, Posbility: 0.8828
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token :  a, Posbility: 0.0003
Next Token :  =, Posbility: 0.0025
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0102
Next Token : string, Posbility: 0.0148
Next Token : pair, Posbility: 0.0168
Next Token : list, Posbility: 0.0518
Next Token : tuple, Posbility: 0.7148
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0087
Next Token : s, Posbility: 0.0099
Next Token :  , Posbility: 0.0269
Next Token : 2, Posbility: 0.0391
Next Token : _, Posbility: 0.8906
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : set, Posbility: 0.0210
Next Token : map, Posbility: 0.0238
Next Token : string, Posbility: 0.0305
Next Token : opt, Posbility: 0.1758
Next Token : list, Posbility: 0.3711
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0023
Next Token : 3, Posbility: 0.0023
Next Token :  , Posbility: 0.0151
Next Token : 2, Posbility: 0.0361
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0225
Next Token : of, Posbility: 0.0225
Next Token : list, Posbility: 0.0288
Next Token : sep, Posbility: 0.0781
Next Token : opt, Posbility: 0.1465
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0081
Next Token : s, Posbility: 0.0117
Next Token :  , Posbility: 0.0464
Next Token : 2, Posbility: 0.1621
Next Token : _, Posbility: 0.7266
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : com, Posbility: 0.0332
Next Token : ex, Posbility: 0.0427
Next Token : list, Posbility: 0.0483
Next Token : opt, Posbility: 0.0547
Next Token : sep, Posbility: 0.1021
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0130
Next Token : _, Posbility: 0.0167
Next Token :  =, Posbility: 0.0400
Next Token :  sep, Posbility: 0.0747
Next Token :  , Posbility: 0.8047
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : d, Posbility: 0.0061
Next Token : (, Posbility: 0.0079
Next Token : x, Posbility: 0.0101
Next Token : s, Posbility: 0.0275
Next Token : t, Posbility: 0.9102
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0131
Next Token :  list, Posbility: 0.0131
Next Token :  =, Posbility: 0.2051
Next Token :  , Posbility: 0.3379
Next Token :  sep, Posbility: 0.3828
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0013
Next Token :  a, Posbility: 0.0013
Next Token :  str, Posbility: 0.0013
Next Token :  , Posbility: 0.0288
Next Token :  =, Posbility: 0.9531
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0046
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :    , Posbility: 0.0004
Next Token : let, Posbility: 0.0006
Next Token :     , Posbility: 0.0019
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0024
Next Token : if, Posbility: 0.0051
Next Token : match, Posbility: 0.0051
Next Token : Printf, Posbility: 0.0084
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  open, Posbility: 0.0013
Next Token :  l, Posbility: 0.0014
Next Token :  rec, Posbility: 0.0057
Next Token :  sep, Posbility: 0.0156
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0009
Next Token : f, Posbility: 0.0009
Next Token : x, Posbility: 0.0012
Next Token : t, Posbility: 0.0019
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token : s, Posbility: 0.0013
Next Token : 1, Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0002
Next Token :  sep, Posbility: 0.0002
Next Token :  String, Posbility: 0.0010
Next Token : 
, Posbility: 0.0229
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token : (, Posbility: 0.0008
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rev, Posbility: 0.0001
Next Token : concat, Posbility: 0.0001
Next Token : filter, Posbility: 0.0003
Next Token : fold, Posbility: 0.0007
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token :  sep, Posbility: 0.0008
Next Token : i, Posbility: 0.0012
Next Token : 
, Posbility: 0.0017
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Printf, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : print, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  fun, Posbility: 0.0001
Next Token : fn, Posbility: 0.0001
Next Token : function, Posbility: 0.0019
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0000
Next Token :  sep, Posbility: 0.0000
Next Token :  v, Posbility: 0.0002
Next Token :  i, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : t, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "%, Posbility: 0.0001
Next Token :  String, Posbility: 0.0002
Next Token :  sep, Posbility: 0.0004
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : printf, Posbility: 0.0002
Next Token : sprintf, Posbility: 0.0003
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : ("%, Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : string, Posbility: 0.0000
Next Token : snprintf, Posbility: 0.0000
Next Token : fprintf, Posbility: 0.0000
Next Token : printf, Posbility: 0.0001
Next Token : sprintf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  "", Posbility: 0.0004
Next Token :  sep, Posbility: 0.0010
Next Token :  , Posbility: 0.0021
Next Token :  "%, Posbility: 0.1475
Next Token :  ", Posbility: 0.8477
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0004
Next Token : (%, Posbility: 0.0004
Next Token :  |, Posbility: 0.0007
Next Token :  , Posbility: 0.0010
Next Token :  %, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : d, Posbility: 0.0001
Next Token : %%, Posbility: 0.0001
Next Token : ., Posbility: 0.0002
Next Token : a, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  %, Posbility: 0.0018
Next Token :  ", Posbility: 0.0023
Next Token : "), Posbility: 0.0023
Next Token : %, Posbility: 0.0752
Next Token : ", Posbility: 0.9141
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  sep, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  sep, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  and, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 0.0017
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0005
Next Token : printf, Posbility: 0.0024
Next Token : if, Posbility: 0.0040
Next Token : let, Posbility: 0.0066
Next Token : Printf, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0001
Next Token : Printf, Posbility: 0.0001
Next Token : fprintf, Posbility: 0.0005
Next Token : sprintf, Posbility: 0.0009
Next Token : printf, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "\, Posbility: 0.0008
Next Token :  sep, Posbility: 0.0008
Next Token :  , Posbility: 0.0023
Next Token :  "%, Posbility: 0.0752
Next Token :  ", Posbility: 0.9180
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0033
Next Token : [, Posbility: 0.0054
Next Token : {%, Posbility: 0.0129
Next Token : (%, Posbility: 0.0742
Next Token : [%, Posbility: 0.9023
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : %%, Posbility: 0.0005
Next Token : S, Posbility: 0.0008
Next Token : a, Posbility: 0.0019
Next Token : <, Posbility: 0.0022
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0242
Next Token : ], Posbility: 0.0513
Next Token :  %, Posbility: 0.0747
Next Token : ]", Posbility: 0.1084
Next Token : %, Posbility: 0.7070
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : %%, Posbility: 0.0011
Next Token : !, Posbility: 0.0024
Next Token : c, Posbility: 0.0045
Next Token : a, Posbility: 0.0109
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : [%, Posbility: 0.0001
Next Token : ", Posbility: 0.0031
Next Token : ], Posbility: 0.0058
Next Token : %, Posbility: 0.0096
Next Token : ]", Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]"
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  se, Posbility: 0.0005
Next Token :  sep, Posbility: 0.0076
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : t, Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0046
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0066
Next Token :  ", Posbility: 0.0066
Next Token :  "", Posbility: 0.0139
Next Token :  , Posbility: 0.1699
Next Token :  sep, Posbility: 0.7617
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : , Posbility: 0.0008
Next Token : ., Posbility: 0.0009
Next Token :  , Posbility: 0.0064
Next Token : 

, Posbility: 0.0415
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0017
Next Token : end, Posbility: 0.0034
Next Token : (, Posbility: 0.0060
Next Token : let, Posbility: 0.0173
Next Token : in, Posbility: 0.9453
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : , Posbility: 0.0003
Next Token : ;, Posbility: 0.0003
Next Token : 

, Posbility: 0.2012
Next Token : 
, Posbility: 0.7969
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0050
Next Token : module, Posbility: 0.0053
Next Token : 

, Posbility: 0.0225
Next Token : (, Posbility: 0.0889
Next Token : let, Posbility: 0.8438
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0107
Next Token :  to, Posbility: 0.0156
Next Token :  tuple, Posbility: 0.0177
Next Token :  rec, Posbility: 0.0332
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : write, Posbility: 0.0026
Next Token : pp, Posbility: 0.0034
Next Token : (, Posbility: 0.0043
Next Token : (), Posbility: 0.0092
Next Token : print, Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0013
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0085
Next Token : string, Posbility: 0.0124
Next Token : pair, Posbility: 0.0124
Next Token : list, Posbility: 0.0432
Next Token : tuple, Posbility: 0.7656
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0063
Next Token : 3, Posbility: 0.0063
Next Token :  , Posbility: 0.0092
Next Token : 2, Posbility: 0.0221
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tuple, Posbility: 0.0071
Next Token : string, Posbility: 0.0134
Next Token : sep, Posbility: 0.0221
Next Token : opt, Posbility: 0.2373
Next Token : list, Posbility: 0.5703
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0011
Next Token : 3, Posbility: 0.0013
Next Token :  , Posbility: 0.0066
Next Token : 2, Posbility: 0.0108
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0062
Next Token : str, Posbility: 0.0103
Next Token : com, Posbility: 0.0217
Next Token : sep, Posbility: 0.3398
Next Token : opt, Posbility: 0.4375
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0010
Next Token : 3, Posbility: 0.0011
Next Token :  , Posbility: 0.0137
Next Token : 2, Posbility: 0.0199
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : str, Posbility: 0.0074
Next Token : join, Posbility: 0.0084
Next Token : par, Posbility: 0.0122
Next Token : com, Posbility: 0.0376
Next Token : sep, Posbility: 0.7578
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0059
Next Token : 1, Posbility: 0.0067
Next Token :  , Posbility: 0.0125
Next Token : 2, Posbility: 0.0811
Next Token : _, Posbility: 0.8711
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : str, Posbility: 0.0287
Next Token : par, Posbility: 0.0369
Next Token : com, Posbility: 0.0535
Next Token : sep, Posbility: 0.1455
Next Token : opt, Posbility: 0.2119
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0045
Next Token :  =, Posbility: 0.0157
Next Token :  sep, Posbility: 0.0293
Next Token : _, Posbility: 0.0332
Next Token :  , Posbility: 0.8594
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0015
Next Token : s, Posbility: 0.0019
Next Token : opt, Posbility: 0.0019
Next Token : (, Posbility: 0.0031
Next Token : t, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0022
Next Token : 1, Posbility: 0.0061
Next Token :  =, Posbility: 0.0079
Next Token :  , Posbility: 0.0579
Next Token :  sep, Posbility: 0.9062
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0103
Next Token :  sep, Posbility: 0.0359
Next Token : _, Posbility: 0.0408
Next Token :  =, Posbility: 0.2344
Next Token :  , Posbility: 0.6367
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0028
Next Token : end, Posbility: 0.0097
Next Token : _, Posbility: 0.0265
Next Token : o, Posbility: 0.0265
Next Token : opt, Posbility: 0.8750
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0010
Next Token :  sep, Posbility: 0.0021
Next Token : sep, Posbility: 0.0039
Next Token : _, Posbility: 0.0200
Next Token :  =, Posbility: 0.9609
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0013
Next Token : Printf, Posbility: 0.0030
Next Token : if, Posbility: 0.0175
Next Token : match, Posbility: 0.0175
Next Token : let, Posbility: 0.9570
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0003
Next Token :  open, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0006
Next Token :  sep, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0005
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.0008
Next Token : opt, Posbility: 0.0015
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token : 1, Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0001
Next Token :  fun, Posbility: 0.0001
Next Token :  match, Posbility: 0.0003
Next Token : 
, Posbility: 0.0046
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Option, Posbility: 0.0002
Next Token : opt, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : if, Posbility: 0.0005
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0000
Next Token : concat, Posbility: 0.0000
Next Token : fold, Posbility: 0.0000
Next Token : filter, Posbility: 0.0001
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Fun, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0003
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "%, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :  ", Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : sprintf, Posbility: 0.0000
Next Token : printf, Posbility: 0.0001
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : ("%, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : snprintf, Posbility: 0.0000
Next Token : fprintf, Posbility: 0.0000
Next Token : Sprintf, Posbility: 0.0000
Next Token : printf, Posbility: 0.0000
Next Token : sprintf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  "\, Posbility: 0.0000
Next Token :  "", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  "%, Posbility: 0.0025
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : [%, Posbility: 0.0000
Next Token : (%, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : c, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : \, Posbility: 0.0001
Next Token : "), Posbility: 0.0001
Next Token :  ", Posbility: 0.0002
Next Token : %, Posbility: 0.0004
Next Token : ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : opt, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  else, Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : printf, Posbility: 0.0023
Next Token : let, Posbility: 0.0063
Next Token : match, Posbility: 0.0063
Next Token : if, Posbility: 0.0464
Next Token : Printf, Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ("%, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0001
Next Token : format, Posbility: 0.0001
Next Token : sprintf, Posbility: 0.0001
Next Token : fprintf, Posbility: 0.0001
Next Token : printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "<, Posbility: 0.0001
Next Token : 
, Posbility: 0.0011
Next Token :  , Posbility: 0.0016
Next Token :  "%, Posbility: 0.0292
Next Token :  ", Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : [, Posbility: 0.0009
Next Token : {%, Posbility: 0.0009
Next Token : (%, Posbility: 0.0015
Next Token : [%, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : %%, Posbility: 0.0001
Next Token : ?, Posbility: 0.0001
Next Token : S, Posbility: 0.0002
Next Token : <, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0034
Next Token : ], Posbility: 0.0034
Next Token : ]", Posbility: 0.0034
Next Token :  %, Posbility: 0.0120
Next Token : %, Posbility: 0.9570
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0002
Next Token : <, Posbility: 0.0003
Next Token : !, Posbility: 0.0003
Next Token : %%, Posbility: 0.0007
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  %, Posbility: 0.0053
Next Token : ", Posbility: 0.0060
Next Token : ], Posbility: 0.0099
Next Token : ]", Posbility: 0.4219
Next Token : %, Posbility: 0.5430
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ], Posbility: 0.0002
Next Token : c, Posbility: 0.0003
Next Token : ]", Posbility: 0.0010
Next Token : a, Posbility: 0.0015
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ][, Posbility: 0.0000
Next Token : ", Posbility: 0.0005
Next Token : %, Posbility: 0.0006
Next Token : ], Posbility: 0.0010
Next Token : ]", Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]"
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  sep, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0009
Next Token : opt, Posbility: 0.0017
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  se, Posbility: 0.0024
Next Token :  , Posbility: 0.0291
Next Token :  sep, Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0002
Next Token : ;, Posbility: 0.0006
Next Token :  ?, Posbility: 0.0006
Next Token :  sep, Posbility: 0.0085
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : option, Posbility: 0.0003
Next Token : (, Posbility: 0.0067
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : , Posbility: 0.0005
Next Token :  in, Posbility: 0.0007
Next Token :  , Posbility: 0.0044
Next Token : 

, Posbility: 0.0327
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0010
Next Token : end, Posbility: 0.0017
Next Token : (, Posbility: 0.0040
Next Token : let, Posbility: 0.0048
Next Token : in, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token : , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.1328
Next Token : 
, Posbility: 0.8672
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0026
Next Token : module, Posbility: 0.0048
Next Token : 

, Posbility: 0.0123
Next Token : (, Posbility: 0.1025
Next Token : let, Posbility: 0.8594
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0087
Next Token :  to, Posbility: 0.0111
Next Token :  tuple, Posbility: 0.0126
Next Token :  rec, Posbility: 0.0267
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : write, Posbility: 0.0023
Next Token : pp, Posbility: 0.0023
Next Token : (, Posbility: 0.0030
Next Token : (), Posbility: 0.0056
Next Token : print, Posbility: 0.9492
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token :  =, Posbility: 0.0012
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0089
Next Token : pair, Posbility: 0.0089
Next Token : string, Posbility: 0.0101
Next Token : list, Posbility: 0.0311
Next Token : tuple, Posbility: 0.8008
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0056
Next Token : 3, Posbility: 0.0063
Next Token :  , Posbility: 0.0118
Next Token : 2, Posbility: 0.0195
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tuple, Posbility: 0.0077
Next Token : string, Posbility: 0.0099
Next Token : sep, Posbility: 0.0210
Next Token : opt, Posbility: 0.1367
Next Token : list, Posbility: 0.6953
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0007
Next Token : 3, Posbility: 0.0008
Next Token : 2, Posbility: 0.0058
Next Token :  , Posbility: 0.0075
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0089
Next Token : com, Posbility: 0.0101
Next Token : list, Posbility: 0.0130
Next Token : sep, Posbility: 0.3809
Next Token : opt, Posbility: 0.3809
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0005
Next Token : 3, Posbility: 0.0010
Next Token :  , Posbility: 0.0066
Next Token : 2, Posbility: 0.0109
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : str, Posbility: 0.0041
Next Token : list, Posbility: 0.0067
Next Token : com, Posbility: 0.0300
Next Token : opt, Posbility: 0.0635
Next Token : sep, Posbility: 0.7734
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0013
Next Token : 3, Posbility: 0.0015
Next Token :  , Posbility: 0.0051
Next Token : 2, Posbility: 0.0122
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : com, Posbility: 0.0073
Next Token : str, Posbility: 0.0073
Next Token : list, Posbility: 0.0154
Next Token : sep, Posbility: 0.1885
Next Token : opt, Posbility: 0.6562
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sep, Posbility: 0.0021
Next Token : 1, Posbility: 0.0023
Next Token :  , Posbility: 0.0195
Next Token : 2, Posbility: 0.0250
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : end, Posbility: 0.0178
Next Token : com, Posbility: 0.0293
Next Token : list, Posbility: 0.0620
Next Token : opt, Posbility: 0.0703
Next Token : sep, Posbility: 0.4590
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0024
Next Token :  list, Posbility: 0.0031
Next Token : _, Posbility: 0.0106
Next Token :  sep, Posbility: 0.0176
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token : tup, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : opt, Posbility: 0.0004
Next Token : t, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0037
Next Token :  a, Posbility: 0.0037
Next Token :  , Posbility: 0.0215
Next Token : 1, Posbility: 0.0454
Next Token :  sep, Posbility: 0.9141
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0073
Next Token : _, Posbility: 0.0121
Next Token :  sep, Posbility: 0.0542
Next Token : 1, Posbility: 0.2432
Next Token :  , Posbility: 0.6602
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0003
Next Token : _, Posbility: 0.0012
Next Token : s, Posbility: 0.0012
Next Token : o, Posbility: 0.0025
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0146
Next Token : 2, Posbility: 0.0146
Next Token :  , Posbility: 0.0396
Next Token : 1, Posbility: 0.1079
Next Token :  sep, Posbility: 0.7969
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0077
Next Token : 1, Posbility: 0.0112
Next Token : _, Posbility: 0.0347
Next Token : 2, Posbility: 0.1367
Next Token :  =, Posbility: 0.7852
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : let, Posbility: 0.0002
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : Printf, Posbility: 0.0003
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  sep, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : t, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Print, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reduce, Posbility: 0.0000
Next Token : filter, Posbility: 0.0000
Next Token : fold, Posbility: 0.0000
Next Token : concat, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : Printf, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Fun, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "%, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Print, Posbility: 0.0000
Next Token : Println, Posbility: 0.0000
Next Token : sprintf, Posbility: 0.0000
Next Token : printf, Posbility: 0.0000
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : ("%, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : snprintf, Posbility: 0.0000
Next Token : fprintf, Posbility: 0.0000
Next Token : Sprintf, Posbility: 0.0000
Next Token : printf, Posbility: 0.0000
Next Token : sprintf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  "%, Posbility: 0.0004
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : [%, Posbility: 0.0000
Next Token : (%, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : %, Posbility: 0.0000
Next Token : "), Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token : ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : q, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Println, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : printf, Posbility: 0.0001
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ã€‚, Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0000
Next Token : fprintf, Posbility: 0.0000
Next Token : Printf, Posbility: 0.0000
Next Token : sprintf, Posbility: 0.0000
Next Token : printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0005
Next Token :  "%, Posbility: 0.0007
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : [$, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {%, Posbility: 0.0001
Next Token : (%, Posbility: 0.0001
Next Token : [%, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : %%, Posbility: 0.0002
Next Token : [%, Posbility: 0.0005
Next Token : ,, Posbility: 0.0006
Next Token :  %, Posbility: 0.0013
Next Token : %, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ], Posbility: 0.0006
Next Token : ,, Posbility: 0.0008
Next Token :  %, Posbility: 0.0012
Next Token : [%, Posbility: 0.0012
Next Token : %, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : %%, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0015
Next Token : ][, Posbility: 0.0025
Next Token : ], Posbility: 0.0068
Next Token : ]", Posbility: 0.3730
Next Token : %, Posbility: 0.6133
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : ], Posbility: 0.0001
Next Token : ]", Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ][, Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token : ], Posbility: 0.0004
Next Token : %, Posbility: 0.0008
Next Token : ]", Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]"
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  sep, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  1, Posbility: 0.0004
Next Token : 1, Posbility: 0.0006
Next Token :  , Posbility: 0.0041
Next Token :  sep, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : 1, Posbility: 0.0003
Next Token :  sep, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : o, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : option, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  separate, Posbility: 0.0001
Next Token :  se, Posbility: 0.0009
Next Token :  , Posbility: 0.0229
Next Token :  sep, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : , Posbility: 0.0005
Next Token :  , Posbility: 0.0045
Next Token : 

, Posbility: 0.0330
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ```, Posbility: 0.0008
Next Token : end, Posbility: 0.0017
Next Token : (, Posbility: 0.0023
Next Token : let, Posbility: 0.0042
Next Token : in, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0002
Next Token : , Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.1641
Next Token : 
, Posbility: 0.8359
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0018
Next Token : module, Posbility: 0.0044
Next Token : 

, Posbility: 0.0082
Next Token : (, Posbility: 0.1289
Next Token : let, Posbility: 0.8398
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0069
Next Token :  to, Posbility: 0.0100
Next Token :  tuple, Posbility: 0.0100
Next Token :  rec, Posbility: 0.0212
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : write, Posbility: 0.0018
Next Token : pp, Posbility: 0.0021
Next Token : (, Posbility: 0.0027
Next Token : (), Posbility: 0.0057
Next Token : print, Posbility: 0.9531
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token :  =, Posbility: 0.0013
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0064
Next Token : option, Posbility: 0.0072
Next Token : string, Posbility: 0.0093
Next Token : list, Posbility: 0.0253
Next Token : tuple, Posbility: 0.8359
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0039
Next Token : 3, Posbility: 0.0056
Next Token :  , Posbility: 0.0093
Next Token : 2, Posbility: 0.0154
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tuple, Posbility: 0.0063
Next Token : string, Posbility: 0.0072
Next Token : sep, Posbility: 0.0153
Next Token : opt, Posbility: 0.1279
Next Token : list, Posbility: 0.7344
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0006
Next Token : 1, Posbility: 0.0006
Next Token : 2, Posbility: 0.0040
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : str, Posbility: 0.0070
Next Token : int, Posbility: 0.0080
Next Token : list, Posbility: 0.0131
Next Token : sep, Posbility: 0.2637
Next Token : opt, Posbility: 0.5586
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0003
Next Token : 3, Posbility: 0.0003
Next Token :  , Posbility: 0.0028
Next Token : 2, Posbility: 0.0036
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0017
Next Token : list, Posbility: 0.0036
Next Token : com, Posbility: 0.0126
Next Token : opt, Posbility: 0.0437
Next Token : sep, Posbility: 0.8789
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0007
Next Token : s, Posbility: 0.0008
Next Token :  , Posbility: 0.0024
Next Token : 2, Posbility: 0.0052
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : str, Posbility: 0.0021
Next Token : com, Posbility: 0.0034
Next Token : list, Posbility: 0.0034
Next Token : sep, Posbility: 0.1138
Next Token : opt, Posbility: 0.8398
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0003
Next Token :  sep, Posbility: 0.0004
Next Token : 2, Posbility: 0.0022
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0009
Next Token : com, Posbility: 0.0024
Next Token : list, Posbility: 0.0024
Next Token : opt, Posbility: 0.0107
Next Token : sep, Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0009
Next Token : 1, Posbility: 0.0010
Next Token :  , Posbility: 0.0066
Next Token : 2, Posbility: 0.0075
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : str, Posbility: 0.0052
Next Token : end, Posbility: 0.0067
Next Token : list, Posbility: 0.0298
Next Token : sep, Posbility: 0.0811
Next Token : opt, Posbility: 0.7695
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0019
Next Token : _, Posbility: 0.0031
Next Token :  =, Posbility: 0.0052
Next Token :  sep, Posbility: 0.0052
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : opt, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  se, Posbility: 0.0003
Next Token : 1, Posbility: 0.0005
Next Token :  , Posbility: 0.0007
Next Token :  sep, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  sep, Posbility: 0.0002
Next Token : 1, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : o, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token :  se, Posbility: 0.0007
Next Token :  , Posbility: 0.0031
Next Token : 1, Posbility: 0.0085
Next Token :  sep, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : 1, Posbility: 0.0005
Next Token :  sep, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : o, Posbility: 0.0004
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sep, Posbility: 0.0007
Next Token : sep, Posbility: 0.0012
Next Token : 2, Posbility: 0.0028
Next Token : _, Posbility: 0.0031
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token : let, Posbility: 0.0002
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : {, Posbility: 0.0000
Next Token : printf, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : Printf, Posbility: 0.0003
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  sep, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Print, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0000
Next Token : sort, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : concat, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : Printf, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Fun, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Print, Posbility: 0.0000
Next Token : Println, Posbility: 0.0000
Next Token : sprintf, Posbility: 0.0000
Next Token : printf, Posbility: 0.0000
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ("%, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : snprintf, Posbility: 0.0000
Next Token : fprintf, Posbility: 0.0000
Next Token : Sprintf, Posbility: 0.0000
Next Token : printf, Posbility: 0.0000
Next Token : sprintf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token :  "", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  "%, Posbility: 0.0003
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : [%, Posbility: 0.0000
Next Token : (%, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : %, Posbility: 0.0000
Next Token : "), Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token : ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : "), Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : q, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Println, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : printf, Posbility: 0.0001
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ã€‚, Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0000
Next Token : fprintf, Posbility: 0.0000
Next Token : Printf, Posbility: 0.0000
Next Token : sprintf, Posbility: 0.0000
Next Token : printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "\, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  "%, Posbility: 0.0005
Next Token : 
, Posbility: 0.0015
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : [$, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : (%, Posbility: 0.0000
Next Token : {%, Posbility: 0.0000
Next Token : [%, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : [%, Posbility: 0.0000
Next Token :  %, Posbility: 0.0001
Next Token : %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : c, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : [%, Posbility: 0.0000
Next Token :  %, Posbility: 0.0000
Next Token : %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : [%, Posbility: 0.0000
Next Token :  %, Posbility: 0.0001
Next Token : ], Posbility: 0.0001
Next Token : %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ][, Posbility: 0.0004
Next Token : ", Posbility: 0.0009
Next Token : ], Posbility: 0.0031
Next Token : ]", Posbility: 0.0179
Next Token : %, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ]", Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ][, Posbility: 0.0000
Next Token : ", Posbility: 0.0002
Next Token : ], Posbility: 0.0005
Next Token : %, Posbility: 0.0028
Next Token : ]", Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]"
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  sep, Posbility: 0.0001
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  se, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token :  sep, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  sep, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : o, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : option, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sep, Posbility: 0.0000
Next Token :  separate, Posbility: 0.0000
Next Token :  se, Posbility: 0.0002
Next Token :  , Posbility: 0.0019
Next Token :  sep, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  sep, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : val, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : o, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : , Posbility: 0.0003
Next Token :  sep, Posbility: 0.0020
Next Token :  , Posbility: 0.0171
Next Token : 

, Posbility: 0.0464
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0011
Next Token : ```, Posbility: 0.0011
Next Token : (, Posbility: 0.0033
Next Token : let, Posbility: 0.0051
Next Token : in, Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token : , Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.1641
Next Token : 
, Posbility: 0.8359
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : /*, Posbility: 0.0009
Next Token : *, Posbility: 0.0015
Next Token : module, Posbility: 0.0057
Next Token : (, Posbility: 0.1299
Next Token : let, Posbility: 0.8477
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0077
Next Token :  to, Posbility: 0.0112
Next Token :  tuple, Posbility: 0.0127
Next Token :  rec, Posbility: 0.0238
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0016
Next Token : write, Posbility: 0.0024
Next Token : (, Posbility: 0.0027
Next Token : (), Posbility: 0.0050
Next Token : print, Posbility: 0.9531
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 0, Posbility: 0.0002
Next Token :  =, Posbility: 0.0015
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0051
Next Token : option, Posbility: 0.0058
Next Token : string, Posbility: 0.0084
Next Token : list, Posbility: 0.0201
Next Token : tuple, Posbility: 0.8555
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0056
Next Token : 3, Posbility: 0.0063
Next Token :  , Posbility: 0.0104
Next Token : 2, Posbility: 0.0172
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : string, Posbility: 0.0064
Next Token : tuple, Posbility: 0.0073
Next Token : sep, Posbility: 0.0175
Next Token : opt, Posbility: 0.1138
Next Token : list, Posbility: 0.7422
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0008
Next Token :  =, Posbility: 0.0010
Next Token : 2, Posbility: 0.0045
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0079
Next Token : of, Posbility: 0.0079
Next Token : list, Posbility: 0.0167
Next Token : sep, Posbility: 0.2617
Next Token : opt, Posbility: 0.5547
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0003
Next Token :  =, Posbility: 0.0006
Next Token : 2, Posbility: 0.0025
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0014
Next Token : list, Posbility: 0.0029
Next Token : com, Posbility: 0.0079
Next Token : opt, Posbility: 0.0352
Next Token : sep, Posbility: 0.9102
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token : s, Posbility: 0.0006
Next Token :  , Posbility: 0.0017
Next Token : 2, Posbility: 0.0028
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : str, Posbility: 0.0013
Next Token : list, Posbility: 0.0028
Next Token : com, Posbility: 0.0036
Next Token : sep, Posbility: 0.0732
Next Token : opt, Posbility: 0.8906
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sep, Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token : 2, Posbility: 0.0006
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : com, Posbility: 0.0006
Next Token : seq, Posbility: 0.0006
Next Token : list, Posbility: 0.0010
Next Token : opt, Posbility: 0.0066
Next Token : sep, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token :  , Posbility: 0.0013
Next Token : 2, Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0013
Next Token : var, Posbility: 0.0013
Next Token : list, Posbility: 0.0027
Next Token : sep, Posbility: 0.0225
Next Token : opt, Posbility: 0.9531
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0004
Next Token :  sep, Posbility: 0.0015
Next Token : 2, Posbility: 0.0028
Next Token :  , Posbility: 0.0109
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : com, Posbility: 0.0044
Next Token : end, Posbility: 0.0064
Next Token : list, Posbility: 0.0175
Next Token : opt, Posbility: 0.1289
Next Token : sep, Posbility: 0.7422
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0017
Next Token :  sep, Posbility: 0.0179
Next Token :  =, Posbility: 0.0334
Next Token : _, Posbility: 0.0708
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token : opt, Posbility: 0.0005
Next Token : (), Posbility: 0.0007
Next Token : t, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  se, Posbility: 0.0004
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.0013
Next Token : 1, Posbility: 0.0015
Next Token :  sep, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token : 
, Posbility: 0.0009
Next Token :  sep, Posbility: 0.0009
Next Token : 1, Posbility: 0.0028
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : o, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token :  se, Posbility: 0.0009
Next Token : 1, Posbility: 0.0052
Next Token :  , Posbility: 0.0085
Next Token :  sep, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token :  sep, Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : o, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token : _, Posbility: 0.0010
Next Token :  se, Posbility: 0.0011
Next Token :  , Posbility: 0.0596
Next Token :  sep, Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0042
Next Token : 
, Posbility: 0.0060
Next Token :  sep, Posbility: 0.0649
Next Token :  , Posbility: 0.2910
Next Token :  =, Posbility: 0.6133
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :    , Posbility: 0.0003
Next Token : let, Posbility: 0.0005
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  
 score:False
Error type: noerr
---------------------------
Next Token : {, Posbility: 0.0000
Next Token : printf, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : Printf, Posbility: 0.0004
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  sep, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s =
 score:False
Error type: noerr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : Print, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.
 score:False
Error type: noerr
---------------------------
Next Token : reduce, Posbility: 0.0000
Next Token : sort, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : concat, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map 
 score:False
Error type: noerr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : Print, Posbility: 0.0000
Next Token : Printf, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (
 score:False
Error type: noerr
---------------------------
Next Token : Fun, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x ->
 score:False
Error type: noerr
---------------------------
Next Token :  String, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> 
 score:False
Error type: noerr
---------------------------
Next Token : Print, Posbility: 0.0000
Next Token : Println, Posbility: 0.0000
Next Token : sprintf, Posbility: 0.0000
Next Token : printf, Posbility: 0.0000
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.
 score:False
Error type: noerr
---------------------------
Next Token : snprintf, Posbility: 0.0000
Next Token : fprintf, Posbility: 0.0000
Next Token : Sprintf, Posbility: 0.0000
Next Token : printf, Posbility: 0.0000
Next Token : sprintf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf
 score:False
Error type: noerr
---------------------------
Next Token : (", Posbility: 0.0000
Next Token :  "", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  "%, Posbility: 0.0003
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : [%, Posbility: 0.0000
Next Token : (%, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : %, Posbility: 0.0000
Next Token : "), Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token : ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s"
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" 
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x
 score:False
Error type: noerr
---------------------------
Next Token : "), Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x)
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) 
 score:False
Error type: noerr
---------------------------
Next Token : opt, Posbility: 0.0000
Next Token : q, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in

 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  
 score:False
Error type: noerr
---------------------------
Next Token : sprintf, Posbility: 0.0000
Next Token : Println, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : printf, Posbility: 0.0001
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf
 score:False
Error type: noerr
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.
 score:False
Error type: noerr
---------------------------
Next Token : print, Posbility: 0.0000
Next Token : fprintf, Posbility: 0.0000
Next Token : Printf, Posbility: 0.0000
Next Token : sprintf, Posbility: 0.0000
Next Token : printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf
 score:False
Error type: noerr
---------------------------
Next Token :  "\, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  "%, Posbility: 0.0004
Next Token : 
, Posbility: 0.0012
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : [$, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {%, Posbility: 0.0000
Next Token : (%, Posbility: 0.0001
Next Token : [%, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : c, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : [%, Posbility: 0.0000
Next Token :  %, Posbility: 0.0001
Next Token : %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : c, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : [%, Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token :  %, Posbility: 0.0000
Next Token : %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : [^, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : %%, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : [%, Posbility: 0.0000
Next Token :  %, Posbility: 0.0000
Next Token : %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  %, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ]", Posbility: 0.0000
Next Token : ], Posbility: 0.0001
Next Token : %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ][, Posbility: 0.0004
Next Token : ", Posbility: 0.0005
Next Token : ], Posbility: 0.0021
Next Token : ]", Posbility: 0.0179
Next Token : %, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ]", Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ][, Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : ], Posbility: 0.0003
Next Token : %, Posbility: 0.0009
Next Token : ]", Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]"
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  sep, Posbility: 0.0001
Next Token : 
, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" 
 score:False
Error type: noerr
---------------------------
Next Token : opt, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s
 score:False
Error type: noerr
---------------------------
Next Token :  se, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token :  sep, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  sep, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep 
 score:False
Error type: noerr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : o, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : option, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt
 score:False
Error type: noerr
---------------------------
Next Token : SEP, Posbility: 0.0000
Next Token :  separate, Posbility: 0.0000
Next Token :  se, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  sep, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep
 score:False
Error type: noerr
---------------------------
Next Token : sep, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  sep, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep 
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : o, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt
 score:False
Error type: noerr
---------------------------
Next Token :  separate, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  se, Posbility: 0.0003
Next Token :  , Posbility: 0.0059
Next Token :  sep, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0003
Next Token :  sep, Posbility: 0.0210
Next Token :  , Posbility: 0.0393
Next Token : 

, Posbility: 0.0444
Next Token : 
, Posbility: 0.8945
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0011
Next Token : ), Posbility: 0.0014
Next Token : (, Posbility: 0.0027
Next Token : let, Posbility: 0.0035
Next Token : in, Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0002
Next Token : ;, Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.1641
Next Token : 
, Posbility: 0.8359
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0011
Next Token : *, Posbility: 0.0023
Next Token : module, Posbility: 0.0072
Next Token : (, Posbility: 0.1445
Next Token : let, Posbility: 0.8281
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let
 score:False
Error type: noerr
---------------------------
Next Token :  string, Posbility: 0.0062
Next Token :  tuple, Posbility: 0.0090
Next Token :  to, Posbility: 0.0101
Next Token :  rec, Posbility: 0.0189
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let 
 score:False
Error type: noerr
---------------------------
Next Token : map, Posbility: 0.0013
Next Token : write, Posbility: 0.0013
Next Token : (, Posbility: 0.0019
Next Token : (), Posbility: 0.0045
Next Token : print, Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 0, Posbility: 0.0002
Next Token :  =, Posbility: 0.0015
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0037
Next Token : opt, Posbility: 0.0037
Next Token : string, Posbility: 0.0048
Next Token : list, Posbility: 0.0166
Next Token : tuple, Posbility: 0.9062
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0039
Next Token : 3, Posbility: 0.0039
Next Token :  , Posbility: 0.0106
Next Token : 2, Posbility: 0.0106
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_
 score:False
Error type: noerr
---------------------------
Next Token : of, Posbility: 0.0047
Next Token : tuple, Posbility: 0.0060
Next Token : sep, Posbility: 0.0184
Next Token : opt, Posbility: 0.1060
Next Token : list, Posbility: 0.7852
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0005
Next Token :  =, Posbility: 0.0013
Next Token : 2, Posbility: 0.0028
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_
 score:False
Error type: noerr
---------------------------
Next Token : of, Posbility: 0.0057
Next Token : int, Posbility: 0.0064
Next Token : list, Posbility: 0.0136
Next Token : sep, Posbility: 0.1885
Next Token : opt, Posbility: 0.6562
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : 2, Posbility: 0.0013
Next Token :  =, Posbility: 0.0015
Next Token :  , Posbility: 0.0124
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_
 score:False
Error type: noerr
---------------------------
Next Token : separator, Posbility: 0.0011
Next Token : list, Posbility: 0.0018
Next Token : com, Posbility: 0.0063
Next Token : opt, Posbility: 0.0282
Next Token : sep, Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : s, Posbility: 0.0004
Next Token : 2, Posbility: 0.0015
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_
 score:False
Error type: noerr
---------------------------
Next Token : optional, Posbility: 0.0009
Next Token : com, Posbility: 0.0022
Next Token : list, Posbility: 0.0022
Next Token : sep, Posbility: 0.0737
Next Token : opt, Posbility: 0.8984
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt
 score:False
Error type: noerr
---------------------------
Next Token :  sep, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token :  =, Posbility: 0.0006
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0003
Next Token : com, Posbility: 0.0003
Next Token : list, Posbility: 0.0006
Next Token : opt, Posbility: 0.0067
Next Token : sep, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0006
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0006
Next Token : var, Posbility: 0.0007
Next Token : list, Posbility: 0.0010
Next Token : sep, Posbility: 0.0139
Next Token : opt, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt
 score:False
Error type: noerr
---------------------------
Next Token :  sep, Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token : 2, Posbility: 0.0005
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_
 score:False
Error type: noerr
---------------------------
Next Token : var, Posbility: 0.0004
Next Token : int, Posbility: 0.0004
Next Token : list, Posbility: 0.0005
Next Token : opt, Posbility: 0.0139
Next Token : sep, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0007
Next Token :  ..., Posbility: 0.0007
Next Token : 2, Posbility: 0.0013
Next Token :  , Posbility: 0.0140
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep_
 score:False
Error type: noerr
---------------------------
Next Token : str, Posbility: 0.0010
Next Token : etc, Posbility: 0.0010
Next Token : list, Posbility: 0.0028
Next Token : sep, Posbility: 0.0923
Next Token : opt, Posbility: 0.8789
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0024
Next Token :  sep, Posbility: 0.0058
Next Token : _, Posbility: 0.0074
Next Token :  =, Posbility: 0.0084
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep_opt 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : \, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep_opt t
 score:False
Error type: noerr
---------------------------
Next Token :  se, Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 0.0009
Next Token :  sep, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep_opt t sep
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  sep, Posbility: 0.0002
Next Token : 1, Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep_opt t sep 
 score:False
Error type: noerr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : o, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep_opt t sep opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  se, Posbility: 0.0002
Next Token : 1, Posbility: 0.0004
Next Token :  , Posbility: 0.0013
Next Token :  sep, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep_opt t sep opt sep
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  sep, Posbility: 0.0001
Next Token : 
, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep_opt t sep opt sep 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : o, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep_opt t sep opt sep opt
 score:False
Error type: noerr
---------------------------
Next Token :  separate, Posbility: 0.0001
Next Token :  se, Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 0.0052
Next Token :  sep, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep_opt t sep opt sep opt sep
 score:False
Error type: noerr
---------------------------
Next Token :  optional, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token :  sep, Posbility: 0.0010
Next Token : 
, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep_opt t sep opt sep opt sep 
 score:False
Error type: noerr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : o, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep_opt t sep opt sep opt sep opt
 score:False
Error type: noerr
---------------------------
Next Token : sep, Posbility: 0.0007
Next Token :  , Posbility: 0.0083
Next Token : 
, Posbility: 0.0121
Next Token :  sep, Posbility: 0.0121
Next Token :  =, Posbility: 0.9609
---------------------------
code:
 (* Write a function to convert a tuple to a string. *)
let print_tuple t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "(%s)" s
in
let print_tuple_list t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt t =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s]" s
in
let print_tuple_list_opt_sep t sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s]" s sep
in
let print_tuple_list_opt_sep_opt t sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s]" s sep opt
in
let print_tuple_list_opt_sep_opt_sep t sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s]" s sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt t sep opt sep opt =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s]" s sep opt sep opt
in
let print_tuple_list_opt_sep_opt_sep_opt_sep t sep opt sep opt sep =
  let s = List.map (fun x -> Printf.sprintf " %s" x) t in
  Printf.printf "[%s%s%s%s%s%s]" s sep opt sep opt sep
in
let print_tuple_list_opt_sep_opt_sep_opt_sep_opt t sep opt sep opt sep opt =
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>