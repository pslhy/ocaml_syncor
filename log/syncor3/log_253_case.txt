code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0214
Next Token :  sub, Posbility: 0.0273
Next Token :  max, Posbility: 0.0742
Next Token :  , Posbility: 0.0957
Next Token :  rec, Posbility: 0.7070
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0223
Next Token :  sub, Posbility: 0.0369
Next Token :  find, Posbility: 0.1650
Next Token :  max, Posbility: 0.2402
Next Token :  , Posbility: 0.3496
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0282
Next Token : helper, Posbility: 0.0464
Next Token : f, Posbility: 0.0679
Next Token : prod, Posbility: 0.0986
Next Token : product, Posbility: 0.1436
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0190
Next Token : -, Posbility: 0.0315
Next Token :  =, Posbility: 0.1602
Next Token :  , Posbility: 0.2051
Next Token : _, Posbility: 0.4922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0457
Next Token : sub, Posbility: 0.0518
Next Token : form, Posbility: 0.1592
Next Token : of, Posbility: 0.1592
Next Token : max, Posbility: 0.1807
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0104
Next Token : (, Posbility: 0.0172
Next Token :  =, Posbility: 0.2383
Next Token :  , Posbility: 0.3066
Next Token : _, Posbility: 0.3066
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0569
Next Token : of, Posbility: 0.0732
Next Token : sub, Posbility: 0.0938
Next Token : helper, Posbility: 0.1064
Next Token : form, Posbility: 0.2256
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_form
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0063
Next Token :  , Posbility: 0.0104
Next Token : (, Posbility: 0.0104
Next Token :  =, Posbility: 0.0172
Next Token : ed, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sub, Posbility: 0.0189
Next Token : (, Posbility: 0.0454
Next Token :  =, Posbility: 0.1797
Next Token : _, Posbility: 0.2305
Next Token :  , Posbility: 0.4316
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0889
Next Token : :, Posbility: 0.1011
Next Token : n, Posbility: 0.1011
Next Token : x, Posbility: 0.1143
Next Token : (, Posbility: 0.1660
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : i, Posbility: 0.0378
Next Token : n, Posbility: 0.0486
Next Token : seq, Posbility: 0.0625
Next Token : x, Posbility: 0.0708
Next Token : a, Posbility: 0.1030
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0107
Next Token : 0,, Posbility: 0.0176
Next Token : :, Posbility: 0.1299
Next Token : ,, Posbility: 0.2754
Next Token :  , Posbility: 0.5156
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : ,, Posbility: 0.0009
Next Token : b, Posbility: 0.0017
Next Token : ::, Posbility: 0.0203
Next Token : :, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a :
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  number, Posbility: 0.0167
Next Token :  ', Posbility: 0.0215
Next Token :  float, Posbility: 0.0752
Next Token :  , Posbility: 0.0962
Next Token :  int, Posbility: 0.7109
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0034
Next Token : ), Posbility: 0.0093
Next Token :  , Posbility: 0.0254
Next Token :  array, Posbility: 0.1138
Next Token :  list, Posbility: 0.8398
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ):, Posbility: 0.0009
Next Token :  *, Posbility: 0.0017
Next Token :  *), Posbility: 0.0022
Next Token :  , Posbility: 0.0059
Next Token : ), Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0044
Next Token :  a, Posbility: 0.0044
Next Token : 
, Posbility: 0.0063
Next Token :  =, Posbility: 0.4453
Next Token :  , Posbility: 0.5039
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0120
Next Token : (), Posbility: 0.0154
Next Token : n, Posbility: 0.0327
Next Token : (, Posbility: 0.2734
Next Token : :, Posbility: 0.5781
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) :
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  unit, Posbility: 0.0028
Next Token :  ?, Posbility: 0.0068
Next Token : 
, Posbility: 0.0099
Next Token :  , Posbility: 0.0732
Next Token :  int, Posbility: 0.8906
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0214
Next Token :  *, Posbility: 0.0581
Next Token :  , Posbility: 0.2021
Next Token :  =, Posbility: 0.2598
Next Token :  list, Posbility: 0.4297
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0143
Next Token :  list, Posbility: 0.0439
Next Token :  , Posbility: 0.1196
Next Token :  *, Posbility: 0.3242
Next Token :  =, Posbility: 0.4727
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0036
Next Token :  function, Posbility: 0.0184
Next Token :  , Posbility: 0.0391
Next Token :  match, Posbility: 0.0391
Next Token : 
, Posbility: 0.8867
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0040
Next Token :    , Posbility: 0.0075
Next Token : 	, Posbility: 0.0110
Next Token :     , Posbility: 0.0918
Next Token :   , Posbility: 0.8711
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0061
Next Token : List, Posbility: 0.0069
Next Token : let, Posbility: 0.1572
Next Token : if, Posbility: 0.1787
Next Token : match, Posbility: 0.6250
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  A, Posbility: 0.0019
Next Token :  [, Posbility: 0.0022
Next Token :  String, Posbility: 0.0097
Next Token :  , Posbility: 0.2832
Next Token :  a, Posbility: 0.6797
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0019
Next Token :  @, Posbility: 0.0021
Next Token :  , Posbility: 0.0031
Next Token :  |, Posbility: 0.0058
Next Token :  with, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0014
Next Token :  , Posbility: 0.0049
Next Token :  [, Posbility: 0.0055
Next Token :  [], Posbility: 0.0591
Next Token : 
, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0005
Next Token :       , Posbility: 0.0016
Next Token :    , Posbility: 0.0023
Next Token :     , Posbility: 0.0752
Next Token :   , Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : |[, Posbility: 0.0001
Next Token : [, Posbility: 0.0075
Next Token : [], Posbility: 0.0109
Next Token : |, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [],, Posbility: 0.0007
Next Token :  nil, Posbility: 0.0039
Next Token :  , Posbility: 0.0176
Next Token :  [, Posbility: 0.0176
Next Token :  [], Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0039
Next Token :    , Posbility: 0.0056
Next Token :  =>, Posbility: 0.0082
Next Token :  |, Posbility: 0.0172
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0002
Next Token : -, Posbility: 0.0003
Next Token : →, Posbility: 0.0003
Next Token : ::, Posbility: 0.0022
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0199
Next Token :  a, Posbility: 0.0199
Next Token :  0, Posbility: 0.0889
Next Token :  , Posbility: 0.1465
Next Token :  [], Posbility: 0.6562
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0023
Next Token :   , Posbility: 0.0063
Next Token :  |, Posbility: 0.0072
Next Token :  , Posbility: 0.0283
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : ||, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0178
Next Token :  [], Posbility: 0.0228
Next Token :  a, Posbility: 0.0620
Next Token :  [, Posbility: 0.2773
Next Token :  , Posbility: 0.5898
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0293
Next Token : head, Posbility: 0.0332
Next Token : h, Posbility: 0.0620
Next Token : _, Posbility: 0.2168
Next Token : x, Posbility: 0.5195
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0027
Next Token : :, Posbility: 0.0039
Next Token : s, Posbility: 0.0176
Next Token : ::, Posbility: 0.2139
Next Token :  , Posbility: 0.7461
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0007
Next Token : if, Posbility: 0.0011
Next Token : :, Posbility: 0.0027
Next Token : ->, Posbility: 0.0371
Next Token : ::, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  as, Posbility: 0.0092
Next Token :  [], Posbility: 0.0117
Next Token :  a, Posbility: 0.0464
Next Token :  rest, Posbility: 0.0869
Next Token :  , Posbility: 0.8242
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0190
Next Token : y, Posbility: 0.0277
Next Token : b, Posbility: 0.0403
Next Token : _, Posbility: 0.0586
Next Token : x, Posbility: 0.8086
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0009
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 0.0015
Next Token : ', Posbility: 0.0109
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0014
Next Token :   , Posbility: 0.0018
Next Token :  =>, Posbility: 0.0049
Next Token :  when, Posbility: 0.0591
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0003
Next Token :  =>, Posbility: 0.0004
Next Token : if, Posbility: 0.0045
Next Token : ::, Posbility: 0.0203
Next Token : ->, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0090
Next Token :  [, Posbility: 0.0090
Next Token :  match, Posbility: 0.0192
Next Token :  , Posbility: 0.2988
Next Token : 
, Posbility: 0.6328
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0045
Next Token :   , Posbility: 0.0057
Next Token :      , Posbility: 0.0107
Next Token :     , Posbility: 0.4570
Next Token :       , Posbility: 0.5156
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0153
Next Token : (, Posbility: 0.0197
Next Token : match, Posbility: 0.0605
Next Token : if, Posbility: 0.1133
Next Token : let, Posbility: 0.7383
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0162
Next Token :  res, Posbility: 0.0162
Next Token :  max, Posbility: 0.1357
Next Token :  rec, Posbility: 0.2246
Next Token :  , Posbility: 0.4746
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : product, Posbility: 0.0540
Next Token : y, Posbility: 0.0786
Next Token : prod, Posbility: 0.1143
Next Token : x, Posbility: 0.1660
Next Token : p, Posbility: 0.1885
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0232
Next Token : _, Posbility: 0.0337
Next Token : max, Posbility: 0.0383
Next Token : 1, Posbility: 0.0811
Next Token :  =, Posbility: 0.7695
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0057
Next Token :  max, Posbility: 0.0155
Next Token : 
, Posbility: 0.0422
Next Token :  a, Posbility: 0.0542
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0168
Next Token : ref, Posbility: 0.0192
Next Token : List, Posbility: 0.0520
Next Token : x, Posbility: 0.1250
Next Token : product, Posbility: 0.7188
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0006
Next Token :  [, Posbility: 0.0007
Next Token :  , Posbility: 0.0449
Next Token :  a, Posbility: 0.0449
Next Token : _, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sub, Posbility: 0.0015
Next Token : min, Posbility: 0.0024
Next Token : form, Posbility: 0.0040
Next Token : of, Posbility: 0.0065
Next Token : max, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  a, Posbility: 0.0003
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : part, Posbility: 0.0001
Next Token : from, Posbility: 0.0001
Next Token : rest, Posbility: 0.0002
Next Token : sub, Posbility: 0.0004
Next Token : form, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_form
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ing, Posbility: 0.0000
Next Token : ed, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0040
Next Token :  ~, Posbility: 0.0040
Next Token : _, Posbility: 0.0045
Next Token :  a, Posbility: 0.0058
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : ([, Posbility: 0.0001
Next Token : y, Posbility: 0.0008
Next Token : (, Posbility: 0.1191
Next Token : x, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0030
Next Token : ;, Posbility: 0.0039
Next Token :  |, Posbility: 0.0050
Next Token : 
, Posbility: 0.0287
Next Token :  in, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0003
Next Token :   , Posbility: 0.0004
Next Token : 

, Posbility: 0.0015
Next Token :  , Posbility: 0.0067
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0004
Next Token :     , Posbility: 0.0009
Next Token :         , Posbility: 0.0015
Next Token :      , Posbility: 0.0109
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0261
Next Token : p, Posbility: 0.0297
Next Token : match, Posbility: 0.1172
Next Token : let, Posbility: 0.3184
Next Token : if, Posbility: 0.4102
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0062
Next Token :  a, Posbility: 0.0090
Next Token :  int, Posbility: 0.0090
Next Token :  not, Posbility: 0.0192
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0280
Next Token : product, Posbility: 0.0522
Next Token : (, Posbility: 0.0669
Next Token : x, Posbility: 0.2061
Next Token : p, Posbility: 0.5625
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0197
Next Token :  is, Posbility: 0.0251
Next Token :  ==, Posbility: 0.0322
Next Token :  , Posbility: 0.1855
Next Token :  =, Posbility: 0.6484
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0058
Next Token :  a, Posbility: 0.0157
Next Token :  0, Posbility: 0.0427
Next Token :  , Posbility: 0.0703
Next Token :  [], Posbility: 0.8555
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0031
Next Token :  or, Posbility: 0.0039
Next Token : 
, Posbility: 0.0107
Next Token :  ||, Posbility: 0.0176
Next Token :  then, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0162
Next Token :  a, Posbility: 0.0344
Next Token :  [], Posbility: 0.0728
Next Token : 
, Posbility: 0.1543
Next Token :  , Posbility: 0.6914
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0120
Next Token : (, Posbility: 0.0120
Next Token : product, Posbility: 0.0417
Next Token : p, Posbility: 0.1650
Next Token : x, Posbility: 0.7383
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0084
Next Token :  , Posbility: 0.0229
Next Token :  *, Posbility: 0.0229
Next Token :  else, Posbility: 0.4062
Next Token : 
, Posbility: 0.5195
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0006
Next Token :   , Posbility: 0.0024
Next Token :     , Posbility: 0.0045
Next Token :      , Posbility: 0.0258
Next Token :       , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : |, Posbility: 0.0001
Next Token : elif, Posbility: 0.0003
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0058
Next Token :  max, Posbility: 0.0124
Next Token :  match, Posbility: 0.0231
Next Token : 
, Posbility: 0.1709
Next Token :  , Posbility: 0.7656
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0579
Next Token : let, Posbility: 0.0654
Next Token : List, Posbility: 0.0742
Next Token : x, Posbility: 0.1572
Next Token : if, Posbility: 0.4844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  not, Posbility: 0.0089
Next Token :  max, Posbility: 0.0089
Next Token :  int, Posbility: 0.0129
Next Token :  a, Posbility: 0.0240
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0298
Next Token : (, Posbility: 0.0713
Next Token : product, Posbility: 0.1719
Next Token : x, Posbility: 0.2832
Next Token : p, Posbility: 0.3203
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0059
Next Token : ., Posbility: 0.0109
Next Token : [0], Posbility: 0.0554
Next Token :  , Posbility: 0.1934
Next Token :  =, Posbility: 0.6758
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [[, Posbility: 0.0028
Next Token :  a, Posbility: 0.0339
Next Token :  [], Posbility: 0.1187
Next Token :  [, Posbility: 0.4141
Next Token :  , Posbility: 0.4141
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : product, Posbility: 0.0168
Next Token : [1], Posbility: 0.0245
Next Token : [0], Posbility: 0.0245
Next Token : (, Posbility: 0.0278
Next Token : x, Posbility: 0.8125
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0286
Next Token :  ||, Posbility: 0.0415
Next Token :  , Posbility: 0.1445
Next Token :  then, Posbility: 0.3066
Next Token : s, Posbility: 0.3945
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ||, Posbility: 0.0098
Next Token :  , Posbility: 0.0126
Next Token : 
, Posbility: 0.0237
Next Token :  &&, Posbility: 0.0304
Next Token :  then, Posbility: 0.8867
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0130
Next Token :  a, Posbility: 0.0215
Next Token : 
, Posbility: 0.0215
Next Token :  [], Posbility: 0.0215
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0016
Next Token : (, Posbility: 0.0119
Next Token : product, Posbility: 0.0879
Next Token : p, Posbility: 0.2393
Next Token : x, Posbility: 0.6484
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then x
 score:False
Error type: noerr
---------------------------
Next Token :  else, Posbility: 0.0114
Next Token :  *, Posbility: 0.0275
Next Token :  , Posbility: 0.1787
Next Token : 
, Posbility: 0.3340
Next Token : s, Posbility: 0.4297
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0017
Next Token :  |, Posbility: 0.0029
Next Token :  , Posbility: 0.0114
Next Token :  else, Posbility: 0.0742
Next Token : 
, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0008
Next Token :          , Posbility: 0.0013
Next Token :         , Posbility: 0.0013
Next Token :           , Posbility: 0.0015
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : |, Posbility: 0.0006
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0049
Next Token :  match, Posbility: 0.0132
Next Token :  max, Posbility: 0.0248
Next Token : 
, Posbility: 0.1108
Next Token :  , Posbility: 0.8203
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : product, Posbility: 0.0684
Next Token : List, Posbility: 0.0879
Next Token : let, Posbility: 0.1445
Next Token : x, Posbility: 0.1855
Next Token : if, Posbility: 0.3066
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  not, Posbility: 0.0055
Next Token :  int, Posbility: 0.0090
Next Token :  max, Posbility: 0.0103
Next Token :  a, Posbility: 0.0149
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0403
Next Token : (, Posbility: 0.0757
Next Token : x, Posbility: 0.2051
Next Token : product, Posbility: 0.2051
Next Token : p, Posbility: 0.3379
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1], Posbility: 0.0075
Next Token :  *, Posbility: 0.0109
Next Token : [0], Posbility: 0.0630
Next Token :  =, Posbility: 0.2812
Next Token :  , Posbility: 0.5977
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : /, Posbility: 0.0003
Next Token : ::, Posbility: 0.0006
Next Token : x, Posbility: 0.0006
Next Token : <, Posbility: 0.2930
Next Token : >, Posbility: 0.7031
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p >
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0020
Next Token :  0, Posbility: 0.0131
Next Token :  a, Posbility: 0.0245
Next Token :  [], Posbility: 0.0356
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0011
Next Token : y, Posbility: 0.0016
Next Token : (, Posbility: 0.0045
Next Token : product, Posbility: 0.0289
Next Token : x, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0049
Next Token :  , Posbility: 0.0055
Next Token :  &&, Posbility: 0.0132
Next Token : s, Posbility: 0.0281
Next Token :  then, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0014
Next Token :  a, Posbility: 0.0055
Next Token :  [, Posbility: 0.0219
Next Token : 
, Posbility: 0.0361
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0010
Next Token : (, Posbility: 0.0204
Next Token : product, Posbility: 0.1504
Next Token : p, Posbility: 0.4102
Next Token : x, Posbility: 0.4102
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0164
Next Token :  *, Posbility: 0.0270
Next Token : 
, Posbility: 0.2559
Next Token :  , Posbility: 0.2559
Next Token : s, Posbility: 0.4219
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0110
Next Token :  |, Posbility: 0.0125
Next Token :  , Posbility: 0.0386
Next Token :  else, Posbility: 0.1348
Next Token : 
, Posbility: 0.7734
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :      , Posbility: 0.0005
Next Token :     , Posbility: 0.0022
Next Token :   , Posbility: 0.0025
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : elif, Posbility: 0.0001
Next Token : |, Posbility: 0.0005
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0039
Next Token :  max, Posbility: 0.0050
Next Token :  a, Posbility: 0.0135
Next Token : 
, Posbility: 0.0153
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0294
Next Token : if, Posbility: 0.0801
Next Token : product, Posbility: 0.1318
Next Token : p, Posbility: 0.3594
Next Token : x, Posbility: 0.3594
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else x
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0923
Next Token :  , Posbility: 0.1348
Next Token :  *, Posbility: 0.1523
Next Token : 
, Posbility: 0.2217
Next Token : s, Posbility: 0.3652
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0085
Next Token :  , Posbility: 0.0232
Next Token :  *, Posbility: 0.0339
Next Token : 

, Posbility: 0.3633
Next Token : 
, Posbility: 0.5273
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs

 score:False
Error type: noerr
---------------------------
Next Token : In, Posbility: 0.0187
Next Token : 

, Posbility: 0.0211
Next Token : let, Posbility: 0.0447
Next Token :   , Posbility: 0.2275
Next Token : in, Posbility: 0.4805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  main, Posbility: 0.0017
Next Token : fix, Posbility: 0.0036
Next Token :  , Posbility: 0.0386
Next Token : 

, Posbility: 0.0635
Next Token : 
, Posbility: 0.8750
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Product, Posbility: 0.0200
Next Token : (, Posbility: 0.0273
Next Token :   , Posbility: 0.0481
Next Token : product, Posbility: 0.1904
Next Token : let, Posbility: 0.5156
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0105
Next Token :  max, Posbility: 0.0776
Next Token :  main, Posbility: 0.0996
Next Token :  , Posbility: 0.1641
Next Token :  rec, Posbility: 0.5742
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0209
Next Token :  rec, Posbility: 0.0388
Next Token :  find, Posbility: 0.0728
Next Token :  max, Posbility: 0.1543
Next Token :  , Posbility: 0.5352
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0074
Next Token : solve, Posbility: 0.0085
Next Token : f, Posbility: 0.0179
Next Token : prod, Posbility: 0.0378
Next Token : product, Posbility: 0.7617
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : 2, Posbility: 0.0007
Next Token :  =, Posbility: 0.0011
Next Token :  , Posbility: 0.0159
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0028
Next Token : form, Posbility: 0.0098
Next Token : of, Posbility: 0.0098
Next Token : sub, Posbility: 0.0126
Next Token : max, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token :  a, Posbility: 0.0033
Next Token :  =, Posbility: 0.0079
Next Token :  , Posbility: 0.0747
Next Token : _, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0032
Next Token : length, Posbility: 0.0037
Next Token : incr, Posbility: 0.0042
Next Token : sub, Posbility: 0.0145
Next Token : form, Posbility: 0.8945
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_form
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ing, Posbility: 0.0019
Next Token : ed, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0127
Next Token : 2, Posbility: 0.0569
Next Token :  , Posbility: 0.0728
Next Token : ', Posbility: 0.0938
Next Token : _, Posbility: 0.6914
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0371
Next Token : iter, Posbility: 0.0476
Next Token : helper, Posbility: 0.0476
Next Token : aux, Posbility: 0.0540
Next Token : rec, Posbility: 0.1006
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0134
Next Token :  =, Posbility: 0.0221
Next Token :  a, Posbility: 0.0364
Next Token : urse, Posbility: 0.2373
Next Token :  , Posbility: 0.6445
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0087
Next Token : n, Posbility: 0.0099
Next Token : x, Posbility: 0.0237
Next Token : :, Posbility: 0.0344
Next Token : (, Posbility: 0.8906
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : p, Posbility: 0.0056
Next Token : n, Posbility: 0.0056
Next Token : x, Posbility: 0.0071
Next Token : i, Posbility: 0.0081
Next Token : a, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0, Posbility: 0.0012
Next Token : 1, Posbility: 0.0012
Next Token : ,, Posbility: 0.0031
Next Token : :, Posbility: 0.0067
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a :
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0005
Next Token : int, Posbility: 0.0005
Next Token :  list, Posbility: 0.0005
Next Token :  , Posbility: 0.0013
Next Token :  int, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token :  array, Posbility: 0.0031
Next Token : ), Posbility: 0.0041
Next Token :  list, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0004
Next Token : ):, Posbility: 0.0007
Next Token :  , Posbility: 0.0019
Next Token : ,, Posbility: 0.0025
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  ~, Posbility: 0.0006
Next Token : 
, Posbility: 0.0012
Next Token :  =, Posbility: 0.0947
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0004
Next Token : (), Posbility: 0.0007
Next Token : ->, Posbility: 0.0017
Next Token : (, Posbility: 0.0085
Next Token : :, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) :
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  unit, Posbility: 0.0003
Next Token : int, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 0.0052
Next Token :  int, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  array, Posbility: 0.0010
Next Token :  *, Posbility: 0.0014
Next Token :  , Posbility: 0.0093
Next Token :  =, Posbility: 0.0369
Next Token :  list, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0013
Next Token :  list, Posbility: 0.0019
Next Token : 
, Posbility: 0.0035
Next Token :  , Posbility: 0.0066
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0005
Next Token :  match, Posbility: 0.0039
Next Token :  a, Posbility: 0.0106
Next Token :  , Posbility: 0.0325
Next Token : 
, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0014
Next Token :    , Posbility: 0.0035
Next Token : let, Posbility: 0.0045
Next Token :     , Posbility: 0.0256
Next Token :   , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0049
Next Token : product, Posbility: 0.0366
Next Token : if, Posbility: 0.0991
Next Token : let, Posbility: 0.0991
Next Token : match, Posbility: 0.7344
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  len, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 0.0076
Next Token :  a, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  WITH, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token :  [], Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0013
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0003
Next Token :  a, Posbility: 0.0003
Next Token :  [, Posbility: 0.0025
Next Token :  , Posbility: 0.0067
Next Token :  [], Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  when, Posbility: 0.0004
Next Token :  |, Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0024
Next Token : 
, Posbility: 0.0065
Next Token :  0, Posbility: 0.0065
Next Token :  , Posbility: 0.0176
Next Token :  [], Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  as, Posbility: 0.0002
Next Token :  |, Posbility: 0.0005
Next Token :  , Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0065
Next Token :  i, Posbility: 0.0065
Next Token :  [], Posbility: 0.0065
Next Token :  [, Posbility: 0.0107
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0016
Next Token : n, Posbility: 0.0016
Next Token : head, Posbility: 0.0016
Next Token : _, Posbility: 0.0227
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0006
Next Token :  |, Posbility: 0.0006
Next Token : s, Posbility: 0.0024
Next Token : ::, Posbility: 0.0109
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : ->, Posbility: 0.0006
Next Token : :, Posbility: 0.0012
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0004
Next Token :  rest, Posbility: 0.0010
Next Token :  [], Posbility: 0.0015
Next Token :  a, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : p, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0017
Next Token : _, Posbility: 0.0085
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token :  =>, Posbility: 0.0005
Next Token :  |, Posbility: 0.0006
Next Token :  when, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 0.0005
Next Token : if, Posbility: 0.0006
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0005
Next Token :  {, Posbility: 0.0008
Next Token :  match, Posbility: 0.0027
Next Token :  , Posbility: 0.0330
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0005
Next Token :   , Posbility: 0.0008
Next Token :      , Posbility: 0.0015
Next Token :     , Posbility: 0.0075
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0021
Next Token : product, Posbility: 0.0058
Next Token : match, Posbility: 0.0156
Next Token : if, Posbility: 0.1157
Next Token : let, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0030
Next Token :  a, Posbility: 0.0038
Next Token :  max, Posbility: 0.0117
Next Token :  rec, Posbility: 0.0317
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0049
Next Token : product, Posbility: 0.0062
Next Token : prod, Posbility: 0.0080
Next Token : x, Posbility: 0.0170
Next Token : p, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0017
Next Token : max, Posbility: 0.0017
Next Token : _, Posbility: 0.0035
Next Token : 1, Posbility: 0.0085
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0003
Next Token :  [, Posbility: 0.0003
Next Token :  a, Posbility: 0.0022
Next Token : 
, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0010
Next Token : if, Posbility: 0.0013
Next Token : (, Posbility: 0.0019
Next Token : x, Posbility: 0.0096
Next Token : product, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : min, Posbility: 0.0001
Next Token : max, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : recursive, Posbility: 0.0000
Next Token : sub, Posbility: 0.0000
Next Token : from, Posbility: 0.0001
Next Token : rec, Posbility: 0.0001
Next Token : form, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_form
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ED, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ed, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0004
Next Token :  ~, Posbility: 0.0004
Next Token :  a, Posbility: 0.0147
Next Token :  , Posbility: 0.1797
Next Token : _, Posbility: 0.8047
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rev, Posbility: 0.0000
Next Token : re, Posbility: 0.0000
Next Token : iter, Posbility: 0.0001
Next Token : recursive, Posbility: 0.0001
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0004
Next Token :  [, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token :  a, Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : product, Posbility: 0.0002
Next Token : (, Posbility: 0.0067
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  in, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token : ,, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0006
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0015
Next Token : product, Posbility: 0.0015
Next Token : match, Posbility: 0.0040
Next Token : let, Posbility: 0.0109
Next Token : if, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0001
Next Token :  len, Posbility: 0.0001
Next Token :  a, Posbility: 0.0002
Next Token :  not, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0012
Next Token : product, Posbility: 0.0012
Next Token : x, Posbility: 0.0032
Next Token : p, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :  <=, Posbility: 0.0002
Next Token :  ==, Posbility: 0.0003
Next Token :  , Posbility: 0.0032
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  a, Posbility: 0.0003
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 0.0067
Next Token :  [], Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  or, Posbility: 0.0002
Next Token :  ||, Posbility: 0.0006
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0024
Next Token : 
, Posbility: 0.0031
Next Token :  [], Posbility: 0.0040
Next Token :  [, Posbility: 0.0052
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token : p, Posbility: 0.0008
Next Token : (, Posbility: 0.0012
Next Token : product, Posbility: 0.0046
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token :  *, Posbility: 0.0006
Next Token :  , Posbility: 0.0009
Next Token :  else, Posbility: 0.0012
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : product, Posbility: 0.0002
Next Token : let, Posbility: 0.0003
Next Token : x, Posbility: 0.0004
Next Token : p, Posbility: 0.0006
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  not, Posbility: 0.0002
Next Token :  a, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : prod, Posbility: 0.0001
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 0.0013
Next Token : product, Posbility: 0.0032
Next Token : p, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  >=, Posbility: 0.0001
Next Token :  <=, Posbility: 0.0001
Next Token :  ==, Posbility: 0.0002
Next Token :  , Posbility: 0.0046
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  [, Posbility: 0.0015
Next Token :  [], Posbility: 0.0025
Next Token :  a, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : product, Posbility: 0.0008
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  then, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  &&, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  ||, Posbility: 0.0002
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  a, Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Product, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : product, Posbility: 0.0013
Next Token : p, Posbility: 0.0036
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0067
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  {, Posbility: 0.0002
Next Token :  match, Posbility: 0.0005
Next Token : 
, Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : product, Posbility: 0.0017
Next Token : x, Posbility: 0.0019
Next Token : p, Posbility: 0.0022
Next Token : let, Posbility: 0.0031
Next Token : if, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0003
Next Token :  P, Posbility: 0.0003
Next Token :  int, Posbility: 0.0003
Next Token :  not, Posbility: 0.0004
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : prod, Posbility: 0.0006
Next Token : (, Posbility: 0.0040
Next Token : x, Posbility: 0.0051
Next Token : product, Posbility: 0.0178
Next Token : p, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0003
Next Token : ., Posbility: 0.0003
Next Token :  >=, Posbility: 0.0005
Next Token :  =, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : <, Posbility: 0.0019
Next Token : >, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p >
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  max, Posbility: 0.0000
Next Token :  0, Posbility: 0.0002
Next Token :  a, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : prod, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : product, Posbility: 0.0012
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token :  ||, Posbility: 0.0003
Next Token : s, Posbility: 0.0003
Next Token :  &&, Posbility: 0.0004
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  a, Posbility: 0.0006
Next Token :  [, Posbility: 0.0008
Next Token : 
, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : product, Posbility: 0.0024
Next Token : p, Posbility: 0.0179
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 0.0085
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token :  else, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0003
Next Token :  match, Posbility: 0.0006
Next Token :  a, Posbility: 0.0019
Next Token : 
, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0015
Next Token : p, Posbility: 0.0065
Next Token : if, Posbility: 0.0107
Next Token : product, Posbility: 0.0107
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token : 

, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0009
Next Token :  , Posbility: 0.0012
Next Token :  in, Posbility: 0.0220
Next Token : 

, Posbility: 0.0361
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0052
Next Token :   , Posbility: 0.0124
Next Token : (, Posbility: 0.0132
Next Token : let, Posbility: 0.0432
Next Token : in, Posbility: 0.8711
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : duction, Posbility: 0.0001
Next Token : ;, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : 

, Posbility: 0.1328
Next Token : 
, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : module, Posbility: 0.0125
Next Token : Printf, Posbility: 0.0125
Next Token : product, Posbility: 0.0466
Next Token : (, Posbility: 0.0635
Next Token : let, Posbility: 0.7266
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0117
Next Token :  main, Posbility: 0.0359
Next Token :  max, Posbility: 0.0977
Next Token :  , Posbility: 0.2656
Next Token :  rec, Posbility: 0.4961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0162
Next Token :  rec, Posbility: 0.0237
Next Token :  find, Posbility: 0.0566
Next Token :  max, Posbility: 0.1201
Next Token :  , Posbility: 0.6094
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : solve, Posbility: 0.0031
Next Token : recursive, Posbility: 0.0040
Next Token : f, Posbility: 0.0059
Next Token : prod, Posbility: 0.0204
Next Token : product, Posbility: 0.8711
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : 2, Posbility: 0.0004
Next Token :  =, Posbility: 0.0009
Next Token :  , Posbility: 0.0076
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0023
Next Token : form, Posbility: 0.0038
Next Token : min, Posbility: 0.0038
Next Token : of, Posbility: 0.0063
Next Token : max, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token :  =, Posbility: 0.0035
Next Token :  , Posbility: 0.0140
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : from, Posbility: 0.0010
Next Token : rec, Posbility: 0.0010
Next Token : sub, Posbility: 0.0011
Next Token : recursive, Posbility: 0.0011
Next Token : form, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_form
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ing, Posbility: 0.0001
Next Token : ed, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0060
Next Token : ', Posbility: 0.0127
Next Token : 2, Posbility: 0.0164
Next Token :  , Posbility: 0.0569
Next Token : _, Posbility: 0.8906
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0271
Next Token : tail, Posbility: 0.0306
Next Token : opt, Posbility: 0.0505
Next Token : rec, Posbility: 0.0835
Next Token : iter, Posbility: 0.3730
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0083
Next Token : i, Posbility: 0.0137
Next Token : _, Posbility: 0.0225
Next Token : ative, Posbility: 0.0540
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : arr, Posbility: 0.0017
Next Token : n, Posbility: 0.0024
Next Token : x, Posbility: 0.0074
Next Token : :, Posbility: 0.0095
Next Token : (, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : p, Posbility: 0.0010
Next Token : n, Posbility: 0.0017
Next Token : x, Posbility: 0.0019
Next Token : i, Posbility: 0.0027
Next Token : a, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 0, Posbility: 0.0003
Next Token : ,, Posbility: 0.0003
Next Token : :, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a :
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  list, Posbility: 0.0001
Next Token :  float, Posbility: 0.0001
Next Token : int, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : ), Posbility: 0.0015
Next Token :  array, Posbility: 0.0019
Next Token :  list, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0001
Next Token : ,, Posbility: 0.0004
Next Token : ):, Posbility: 0.0009
Next Token :  , Posbility: 0.0010
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token :  =, Posbility: 0.0420
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : (, Posbility: 0.0005
Next Token : ->, Posbility: 0.0085
Next Token : :, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) :
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : int, Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token :  int, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  array, Posbility: 0.0003
Next Token :  *, Posbility: 0.0005
Next Token :  , Posbility: 0.0044
Next Token :  =, Posbility: 0.0371
Next Token :  list, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  *, Posbility: 0.0004
Next Token : 
, Posbility: 0.0022
Next Token :  , Posbility: 0.0036
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0004
Next Token :  match, Posbility: 0.0010
Next Token :  a, Posbility: 0.0036
Next Token :  , Posbility: 0.0075
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0006
Next Token :    , Posbility: 0.0024
Next Token : let, Posbility: 0.0040
Next Token :     , Posbility: 0.0123
Next Token :   , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : product, Posbility: 0.0073
Next Token : List, Posbility: 0.0094
Next Token : if, Posbility: 0.0476
Next Token : match, Posbility: 0.4512
Next Token : let, Posbility: 0.4512
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0269
Next Token :  a, Posbility: 0.0344
Next Token :  max, Posbility: 0.0344
Next Token :  , Posbility: 0.3262
Next Token :  rec, Posbility: 0.4199
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0400
Next Token :  go, Posbility: 0.0454
Next Token :  rec, Posbility: 0.0454
Next Token :  loop, Posbility: 0.2949
Next Token :  , Posbility: 0.4297
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0874
Next Token : helper, Posbility: 0.0874
Next Token : aux, Posbility: 0.1123
Next Token : f, Posbility: 0.1270
Next Token : product, Posbility: 0.2373
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0016
Next Token :  a, Posbility: 0.0018
Next Token :  =, Posbility: 0.0120
Next Token :  , Posbility: 0.0199
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0093
Next Token : aux, Posbility: 0.0093
Next Token : iter, Posbility: 0.0254
Next Token : helper, Posbility: 0.0254
Next Token : max, Posbility: 0.8398
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token :  a, Posbility: 0.0002
Next Token :  =, Posbility: 0.0032
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : aux, Posbility: 0.0024
Next Token : rec, Posbility: 0.0039
Next Token : iter, Posbility: 0.0051
Next Token : helper, Posbility: 0.0084
Next Token : form, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_form
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ed, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0060
Next Token :  i, Posbility: 0.0060
Next Token :  a, Posbility: 0.0128
Next Token :  , Posbility: 0.0574
Next Token : _, Posbility: 0.8984
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0095
Next Token : helper, Posbility: 0.0801
Next Token : aux, Posbility: 0.0801
Next Token : rec, Posbility: 0.1318
Next Token : iter, Posbility: 0.5898
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0143
Next Token :  a, Posbility: 0.0500
Next Token :  i, Posbility: 0.0645
Next Token :  , Posbility: 0.2891
Next Token : _, Posbility: 0.4746
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : core, Posbility: 0.0250
Next Token : iter, Posbility: 0.0771
Next Token : helper, Posbility: 0.1270
Next Token : rec, Posbility: 0.2373
Next Token : aux, Posbility: 0.3457
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0167
Next Token :  =, Posbility: 0.0214
Next Token :  i, Posbility: 0.0243
Next Token :  a, Posbility: 0.1797
Next Token :  , Posbility: 0.7070
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0255
Next Token : x, Posbility: 0.0693
Next Token : p, Posbility: 0.0786
Next Token : (), Posbility: 0.1143
Next Token : (, Posbility: 0.5781
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0356
Next Token : acc, Posbility: 0.0403
Next Token : i, Posbility: 0.0752
Next Token : p, Posbility: 0.0854
Next Token : a, Posbility: 0.6289
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0048
Next Token : :, Posbility: 0.0061
Next Token : 0, Posbility: 0.0079
Next Token : ,, Posbility: 0.0452
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0004
Next Token : x, Posbility: 0.0012
Next Token : b, Posbility: 0.0028
Next Token : p, Posbility: 0.0059
Next Token : :, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a :
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token :  list, Posbility: 0.0004
Next Token :  , Posbility: 0.0009
Next Token : int, Posbility: 0.0009
Next Token :  int, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0006
Next Token :  array, Posbility: 0.0008
Next Token :  , Posbility: 0.0040
Next Token : ), Posbility: 0.0085
Next Token :  list, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ):, Posbility: 0.0009
Next Token : ;, Posbility: 0.0064
Next Token :  , Posbility: 0.0106
Next Token : ,, Posbility: 0.0287
Next Token : ), Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0056
Next Token :  i, Posbility: 0.0093
Next Token :  acc, Posbility: 0.0135
Next Token :  =, Posbility: 0.0996
Next Token :  , Posbility: 0.8359
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0080
Next Token : x, Posbility: 0.0103
Next Token : p, Posbility: 0.0591
Next Token : (, Posbility: 0.1250
Next Token : :, Posbility: 0.7188
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) :
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0011
Next Token :  bool, Posbility: 0.0015
Next Token : 
, Posbility: 0.0019
Next Token :  , Posbility: 0.0227
Next Token :  int, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  array, Posbility: 0.0009
Next Token :  *, Posbility: 0.0016
Next Token :  , Posbility: 0.0222
Next Token :  =, Posbility: 0.0284
Next Token :  list, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0033
Next Token :  list, Posbility: 0.0071
Next Token : 
, Posbility: 0.0080
Next Token :  , Posbility: 0.0461
Next Token :  =, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0023
Next Token :  match, Posbility: 0.0038
Next Token :  , Posbility: 0.0116
Next Token :  function, Posbility: 0.0588
Next Token : 
, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0018
Next Token :    , Posbility: 0.0048
Next Token :   , Posbility: 0.0070
Next Token :       , Posbility: 0.0747
Next Token :     , Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0034
Next Token : product, Posbility: 0.0056
Next Token : let, Posbility: 0.0410
Next Token : if, Posbility: 0.1118
Next Token : match, Posbility: 0.8242
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0076
Next Token :  a, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :   , Posbility: 0.0004
Next Token :       , Posbility: 0.0059
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [], Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0003
Next Token :  i, Posbility: 0.0009
Next Token :  [, Posbility: 0.0066
Next Token :  , Posbility: 0.0178
Next Token :  [], Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0004
Next Token :   , Posbility: 0.0004
Next Token :  when, Posbility: 0.0013
Next Token :  |, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : :, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0003
Next Token :  , Posbility: 0.0066
Next Token : 
, Posbility: 0.0066
Next Token :  a, Posbility: 0.0066
Next Token :  [], Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  |, Posbility: 0.0005
Next Token :  , Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : 	, Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0031
Next Token :  [, Posbility: 0.0040
Next Token :  0, Posbility: 0.0051
Next Token :  i, Posbility: 0.0084
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0013
Next Token : head, Posbility: 0.0017
Next Token : (, Posbility: 0.0019
Next Token : _, Posbility: 0.0139
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0004
Next Token : i, Posbility: 0.0005
Next Token : s, Posbility: 0.0024
Next Token : ::, Posbility: 0.0075
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 0.0005
Next Token : :, Posbility: 0.0012
Next Token : ->, Posbility: 0.0013
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  acc, Posbility: 0.0002
Next Token :  [], Posbility: 0.0012
Next Token :  rest, Posbility: 0.0019
Next Token :  a, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : xa, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0019
Next Token : _, Posbility: 0.0109
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : ', Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token :  =>, Posbility: 0.0003
Next Token :  when, Posbility: 0.0140
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token : if, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token :  a, Posbility: 0.0006
Next Token :  match, Posbility: 0.0015
Next Token :  , Posbility: 0.0259
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0007
Next Token :        , Posbility: 0.0027
Next Token : 	, Posbility: 0.0057
Next Token :       , Posbility: 0.0227
Next Token :         , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0055
Next Token : product, Posbility: 0.0150
Next Token : match, Posbility: 0.0405
Next Token : if, Posbility: 0.1104
Next Token : let, Posbility: 0.8164
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0033
Next Token :  a, Posbility: 0.0042
Next Token :  max, Posbility: 0.0061
Next Token :  rec, Posbility: 0.0513
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0063
Next Token : prod, Posbility: 0.0080
Next Token : x, Posbility: 0.0132
Next Token : product, Posbility: 0.0132
Next Token : p, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0009
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 0.0028
Next Token : 1, Posbility: 0.0046
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0004
Next Token :  match, Posbility: 0.0007
Next Token :  a, Posbility: 0.0017
Next Token : 
, Posbility: 0.0109
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0015
Next Token : (, Posbility: 0.0024
Next Token : List, Posbility: 0.0040
Next Token : x, Posbility: 0.0108
Next Token : product, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  a, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : min, Posbility: 0.0001
Next Token : iter, Posbility: 0.0002
Next Token : max, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : from, Posbility: 0.0000
Next Token : form, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_form
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : d, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : ED, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ed, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  a, Posbility: 0.0107
Next Token :  , Posbility: 0.0289
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iterator, Posbility: 0.0003
Next Token : recursive, Posbility: 0.0003
Next Token : aux, Posbility: 0.0159
Next Token : rec, Posbility: 0.1172
Next Token : iter, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  a, Posbility: 0.0010
Next Token :  , Posbility: 0.0124
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : recursive, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : iter, Posbility: 0.0001
Next Token : rec, Posbility: 0.0002
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token :  ~, Posbility: 0.0005
Next Token : _, Posbility: 0.0028
Next Token :  a, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : product, Posbility: 0.0001
Next Token : (, Posbility: 0.0067
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0002
Next Token : 	, Posbility: 0.0003
Next Token :       , Posbility: 0.0003
Next Token :        , Posbility: 0.0012
Next Token :         , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0015
Next Token : product, Posbility: 0.0015
Next Token : match, Posbility: 0.0040
Next Token : let, Posbility: 0.0066
Next Token : if, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  P, Posbility: 0.0001
Next Token :  not, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.0005
Next Token : product, Posbility: 0.0007
Next Token : p, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  <=, Posbility: 0.0000
Next Token :  is, Posbility: 0.0001
Next Token :  ==, Posbility: 0.0002
Next Token :  , Posbility: 0.0013
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  a, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  or, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  ||, Posbility: 0.0003
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0008
Next Token :  a, Posbility: 0.0013
Next Token :  [, Posbility: 0.0022
Next Token : 
, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : p, Posbility: 0.0005
Next Token : (, Posbility: 0.0008
Next Token : product, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token :  else, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :        , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : product, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : p, Posbility: 0.0003
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0000
Next Token :  P, Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  not, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : prod, Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : product, Posbility: 0.0028
Next Token : p, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  >=, Posbility: 0.0000
Next Token :  !=, Posbility: 0.0000
Next Token :  ==, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0007
Next Token :  [], Posbility: 0.0015
Next Token :  a, Posbility: 0.0085
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : product, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  &&, Posbility: 0.0001
Next Token :  ||, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  a, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Product, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : product, Posbility: 0.0004
Next Token : p, Posbility: 0.0015
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  else, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :        , Posbility: 0.0001
Next Token : 	, Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  {, Posbility: 0.0001
Next Token :  match, Posbility: 0.0002
Next Token : 
, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : product, Posbility: 0.0004
Next Token : p, Posbility: 0.0009
Next Token : x, Posbility: 0.0010
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  not, Posbility: 0.0001
Next Token :  int, Posbility: 0.0001
Next Token :  P, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Product, Posbility: 0.0002
Next Token : x, Posbility: 0.0009
Next Token : (, Posbility: 0.0012
Next Token : product, Posbility: 0.0097
Next Token : p, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0], Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token :  >=, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : gt, Posbility: 0.0000
Next Token : <, Posbility: 0.0003
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p >
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  a, Posbility: 0.0013
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : prod, Posbility: 0.0000
Next Token : head, Posbility: 0.0000
Next Token : product, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  &&, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token :  a, Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : product, Posbility: 0.0007
Next Token : p, Posbility: 0.0110
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  else, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0000
Next Token : 	, Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 
, Posbility: 0.0006
Next Token :  a, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : if, Posbility: 0.0009
Next Token : product, Posbility: 0.0012
Next Token : p, Posbility: 0.0032
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0010
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0040
Next Token :  in, Posbility: 0.0201
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0033
Next Token :      , Posbility: 0.0070
Next Token :     , Posbility: 0.0116
Next Token :    , Posbility: 0.0520
Next Token :   , Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 0.0001
Next Token : let, Posbility: 0.0009
Next Token :  in, Posbility: 0.0012
Next Token : in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0002
Next Token :  function, Posbility: 0.0003
Next Token : 

, Posbility: 0.0028
Next Token :  , Posbility: 0.0067
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0006
Next Token : product, Posbility: 0.0012
Next Token : let, Posbility: 0.0012
Next Token :     , Posbility: 0.0036
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0126
Next Token : if, Posbility: 0.0269
Next Token : match, Posbility: 0.0938
Next Token : let, Posbility: 0.1543
Next Token : product, Posbility: 0.6914
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  max, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : min, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : max, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0000
Next Token : formula, Posbility: 0.0000
Next Token : from, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : form, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_form
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : ED, Posbility: 0.0000
Next Token : ed, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iteration, Posbility: 0.0000
Next Token : iterator, Posbility: 0.0001
Next Token : aux, Posbility: 0.0025
Next Token : rec, Posbility: 0.0067
Next Token : iter, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : recursive, Posbility: 0.0000
Next Token : algo, Posbility: 0.0000
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0029
Next Token : 
, Posbility: 0.0049
Next Token :  [], Posbility: 0.0062
Next Token :  , Posbility: 0.0588
Next Token :  a, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0032
Next Token :  , Posbility: 0.0068
Next Token :  =, Posbility: 0.0143
Next Token : 

, Posbility: 0.0728
Next Token : 
, Posbility: 0.8906
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : val, Posbility: 0.0118
Next Token : (, Posbility: 0.0195
Next Token : [, Posbility: 0.0250
Next Token : let, Posbility: 0.0991
Next Token : in, Posbility: 0.6875
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.1328
Next Token : 
, Posbility: 0.8672
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : product, Posbility: 0.0115
Next Token : printf, Posbility: 0.0123
Next Token : module, Posbility: 0.0378
Next Token : (, Posbility: 0.0549
Next Token : let, Posbility: 0.7617
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0075
Next Token :  main, Posbility: 0.0109
Next Token :  max, Posbility: 0.0713
Next Token :  , Posbility: 0.1709
Next Token :  rec, Posbility: 0.6758
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0056
Next Token :  rec, Posbility: 0.0092
Next Token :  find, Posbility: 0.0221
Next Token :  max, Posbility: 0.0413
Next Token :  , Posbility: 0.8320
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fi, Posbility: 0.0014
Next Token : multiply, Posbility: 0.0014
Next Token : f, Posbility: 0.0021
Next Token : prod, Posbility: 0.0082
Next Token : product, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0004
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0009
Next Token : of, Posbility: 0.0015
Next Token : min, Posbility: 0.0015
Next Token : iter, Posbility: 0.0015
Next Token : max, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0013
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : product, Posbility: 0.0005
Next Token : recursive, Posbility: 0.0005
Next Token : from, Posbility: 0.0007
Next Token : iter, Posbility: 0.0009
Next Token : form, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_form
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ing, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ed, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0016
Next Token :  a, Posbility: 0.0021
Next Token : 2, Posbility: 0.0050
Next Token :  , Posbility: 0.0226
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0121
Next Token : opt, Posbility: 0.0121
Next Token : tail, Posbility: 0.0121
Next Token : rec, Posbility: 0.0698
Next Token : iter, Posbility: 0.6641
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0113
Next Token : ', Posbility: 0.0164
Next Token :  , Posbility: 0.0347
Next Token : 2, Posbility: 0.2910
Next Token : _, Posbility: 0.6133
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0481
Next Token : iter, Posbility: 0.0791
Next Token : aux, Posbility: 0.0898
Next Token : opt, Posbility: 0.1152
Next Token : rec, Posbility: 0.1680
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0055
Next Token : urs, Posbility: 0.0090
Next Token : _, Posbility: 0.0167
Next Token : urse, Posbility: 0.0403
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : (), Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : :, Posbility: 0.0010
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : l, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : n, Posbility: 0.0003
Next Token : a, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : :, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a :
 score:False
Error type: noerr
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  float, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : int, Posbility: 0.0001
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  array, Posbility: 0.0004
Next Token : ), Posbility: 0.0006
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : ):, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  :=, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  =, Posbility: 0.0041
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0001
Next Token : ?:, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0003
Next Token : ->, Posbility: 0.0046
Next Token : :, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) :
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : int, Posbility: 0.0001
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  array, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 0.0032
Next Token :  list, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 0.0008
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :    , Posbility: 0.0008
Next Token : let, Posbility: 0.0010
Next Token :     , Posbility: 0.0052
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0015
Next Token : if, Posbility: 0.0041
Next Token : product, Posbility: 0.0111
Next Token : match, Posbility: 0.3672
Next Token : let, Posbility: 0.6055
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let
 score:False
Error type: noerr
---------------------------
Next Token :  mut, Posbility: 0.0001
Next Token :  iter, Posbility: 0.0007
Next Token :  a, Posbility: 0.0009
Next Token :  , Posbility: 0.0085
Next Token :  rec, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec
 score:False
Error type: noerr
---------------------------
Next Token :  max, Posbility: 0.0003
Next Token :  loop, Posbility: 0.0004
Next Token :  iter, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec 
 score:False
Error type: noerr
---------------------------
Next Token : aux, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : p, Posbility: 0.0002
Next Token : prod, Posbility: 0.0005
Next Token : product, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  max, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_
 score:False
Error type: noerr
---------------------------
Next Token : recursive, Posbility: 0.0000
Next Token : aux, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token : iter, Posbility: 0.0001
Next Token : max, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_
 score:False
Error type: noerr
---------------------------
Next Token : rec, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : from, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : form, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_form
 score:False
Error type: noerr
---------------------------
Next Token : en, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : ed, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_
 score:False
Error type: noerr
---------------------------
Next Token : iterate, Posbility: 0.0001
Next Token : it, Posbility: 0.0001
Next Token : aux, Posbility: 0.0003
Next Token : rec, Posbility: 0.0085
Next Token : iter, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_
 score:False
Error type: noerr
---------------------------
Next Token : res, Posbility: 0.0001
Next Token : recursive, Posbility: 0.0002
Next Token : iter, Posbility: 0.0009
Next Token : aux, Posbility: 0.0598
Next Token : rec, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_
 score:False
Error type: noerr
---------------------------
Next Token : core, Posbility: 0.0001
Next Token : iter, Posbility: 0.0003
Next Token : inner, Posbility: 0.0003
Next Token : helper, Posbility: 0.0006
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token :  a, Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux 
 score:False
Error type: noerr
---------------------------
Next Token : p, Posbility: 0.0006
Next Token : (), Posbility: 0.0008
Next Token : x, Posbility: 0.0009
Next Token : :, Posbility: 0.0036
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0009
Next Token : acc, Posbility: 0.0010
Next Token : i, Posbility: 0.0017
Next Token : p, Posbility: 0.0022
Next Token : a, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : :, Posbility: 0.0003
Next Token : ,, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a 
 score:False
Error type: noerr
---------------------------
Next Token : p, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a :
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : int, Posbility: 0.0001
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int
 score:False
Error type: noerr
---------------------------
Next Token :  *), Posbility: 0.0000
Next Token :  array, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ), Posbility: 0.0009
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ):, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : ,, Posbility: 0.0017
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  =, Posbility: 0.0059
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : p, Posbility: 0.0001
Next Token : ->, Posbility: 0.0005
Next Token : (, Posbility: 0.0015
Next Token : :, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) :
 score:False
Error type: noerr
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : int, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  array, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token :  =, Posbility: 0.0013
Next Token :  list, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  function, Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :       , Posbility: 0.0013
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : product, Posbility: 0.0005
Next Token : if, Posbility: 0.0019
Next Token : let, Posbility: 0.0025
Next Token : match, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token :  a, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0005
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    |
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | []
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] 
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] ->
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :  as, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    |
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token :  0, Posbility: 0.0004
Next Token :  i, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0012
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ->, Posbility: 0.0002
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x ::
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  rest, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: 
 score:False
Error type: noerr
---------------------------
Next Token : xa, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0013
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  when, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->

 score:False
Error type: noerr
---------------------------
Next Token :          , Posbility: 0.0000
Next Token : 	, Posbility: 0.0002
Next Token :        , Posbility: 0.0003
Next Token :       , Posbility: 0.0010
Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        
 score:False
Error type: noerr
---------------------------
Next Token : product, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : match, Posbility: 0.0024
Next Token : if, Posbility: 0.0097
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0002
Next Token :  v, Posbility: 0.0003
Next Token :  a, Posbility: 0.0007
Next Token :  rec, Posbility: 0.0036
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : r, Posbility: 0.0003
Next Token : product, Posbility: 0.0004
Next Token : x, Posbility: 0.0006
Next Token : p, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : 1, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p =
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token : 
, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = 
 score:False
Error type: noerr
---------------------------
Next Token : Product, Posbility: 0.0001
Next Token : prod, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0005
Next Token : product, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  max, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_
 score:False
Error type: noerr
---------------------------
Next Token : sum, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token : min, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : max, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_
 score:False
Error type: noerr
---------------------------
Next Token : rec, Posbility: 0.0000
Next Token : from, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : form, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_form
 score:False
Error type: noerr
---------------------------
Next Token : d, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : ED, Posbility: 0.0000
Next Token : ed, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed
 score:False
Error type: noerr
---------------------------
Next Token :  rec, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  a, Posbility: 0.0002
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_
 score:False
Error type: noerr
---------------------------
Next Token : iterator, Posbility: 0.0001
Next Token : iterate, Posbility: 0.0001
Next Token : aux, Posbility: 0.0003
Next Token : rec, Posbility: 0.0474
Next Token : iter, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_
 score:False
Error type: noerr
---------------------------
Next Token : rc, Posbility: 0.0001
Next Token : res, Posbility: 0.0002
Next Token : recursive, Posbility: 0.0002
Next Token : aux, Posbility: 0.2676
Next Token : rec, Posbility: 0.7305
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_
 score:False
Error type: noerr
---------------------------
Next Token : helper, Posbility: 0.0000
Next Token : ax, Posbility: 0.0000
Next Token : recursive, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token :  a, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : product, Posbility: 0.0000
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux x
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in

 score:False
Error type: noerr
---------------------------
Next Token :          , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : 	, Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        
 score:False
Error type: noerr
---------------------------
Next Token : product, Posbility: 0.0001
Next Token : match, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : let, Posbility: 0.0004
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if
 score:False
Error type: noerr
---------------------------
Next Token :  !, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  P, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if 
 score:False
Error type: noerr
---------------------------
Next Token : prod, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : product, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : p, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  ==, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p =
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  "", Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = []
 score:False
Error type: noerr
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ||, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then 
 score:False
Error type: noerr
---------------------------
Next Token : Product, Posbility: 0.0000
Next Token : p, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : product, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  else, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : 	, Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else 
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : p, Posbility: 0.0000
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if
 score:False
Error type: noerr
---------------------------
Next Token :  !, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if 
 score:False
Error type: noerr
---------------------------
Next Token : prod, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : product, Posbility: 0.0001
Next Token : p, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p
 score:False
Error type: noerr
---------------------------
Next Token :  !=, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  ==, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p =
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  a, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : product, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = x
 score:False
Error type: noerr
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ||, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : product, Posbility: 0.0000
Next Token : p, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then x
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token : 	, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else 
 score:False
Error type: noerr
---------------------------
Next Token : product, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : p, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  P, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if 
 score:False
Error type: noerr
---------------------------
Next Token : prod, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : product, Posbility: 0.0006
Next Token : p, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  >=, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p 
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : ≥, Posbility: 0.0000
Next Token : gt, Posbility: 0.0000
Next Token : <, Posbility: 0.0001
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p >
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > 
 score:False
Error type: noerr
---------------------------
Next Token : prod, Posbility: 0.0000
Next Token : product, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x
 score:False
Error type: noerr
---------------------------
Next Token :  ||, Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : product, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : p, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs

 score:False
Error type: noerr
---------------------------
Next Token :        , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : 	, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : Else, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : product, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : p, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0003
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0003
Next Token : in, Posbility: 0.0003
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  
 score:False
Error type: noerr
---------------------------
Next Token : not, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : product, Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : if, Posbility: 0.0004
Next Token : match, Posbility: 0.0004
Next Token : let, Posbility: 0.0025
Next Token : product, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  max, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_
 score:False
Error type: noerr
---------------------------
Next Token : maximum, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : min, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : max, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_
 score:False
Error type: noerr
---------------------------
Next Token : formula, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : from, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : form, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_form
 score:False
Error type: noerr
---------------------------
Next Token : d, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : ED, Posbility: 0.0000
Next Token : ed, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_
 score:False
Error type: noerr
---------------------------
Next Token : aux, Posbility: 0.0000
Next Token : iterator, Posbility: 0.0000
Next Token : iterate, Posbility: 0.0000
Next Token : rec, Posbility: 0.0041
Next Token : iter, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_
 score:False
Error type: noerr
---------------------------
Next Token : recursive, Posbility: 0.0000
Next Token : res, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : aux, Posbility: 0.0179
Next Token : rec, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_
 score:False
Error type: noerr
---------------------------
Next Token : au, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : AUX, Posbility: 0.0000
Next Token : ax, Posbility: 0.0000
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token :  a, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0005
Next Token :  , Posbility: 0.0006
Next Token :  =, Posbility: 0.0008
Next Token : 

, Posbility: 0.0330
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0052
Next Token : val, Posbility: 0.0059
Next Token : (, Posbility: 0.0132
Next Token : let, Posbility: 0.0461
Next Token : in, Posbility: 0.8711
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0757
Next Token : 
, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in

 score:False
Error type: noerr
---------------------------
Next Token : Printf, Posbility: 0.0073
Next Token : open, Posbility: 0.0093
Next Token : module, Posbility: 0.0474
Next Token : (, Posbility: 0.0884
Next Token : let, Posbility: 0.7422
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let
 score:False
Error type: noerr
---------------------------
Next Token :  iter, Posbility: 0.0079
Next Token :  main, Posbility: 0.0090
Next Token :  max, Posbility: 0.0518
Next Token :  , Posbility: 0.1592
Next Token :  rec, Posbility: 0.7148
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  iter, Posbility: 0.0041
Next Token :  rec, Posbility: 0.0041
Next Token :  find, Posbility: 0.0143
Next Token :  max, Posbility: 0.0266
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : map, Posbility: 0.0009
Next Token : fi, Posbility: 0.0009
Next Token : f, Posbility: 0.0016
Next Token : prod, Posbility: 0.0045
Next Token : product, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_
 score:False
Error type: noerr
---------------------------
Next Token : form, Posbility: 0.0009
Next Token : min, Posbility: 0.0009
Next Token : of, Posbility: 0.0009
Next Token : iter, Posbility: 0.0015
Next Token : max, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max
 score:False
Error type: noerr
---------------------------
Next Token : i, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0009
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_
 score:False
Error type: noerr
---------------------------
Next Token : product, Posbility: 0.0002
Next Token : recursive, Posbility: 0.0003
Next Token : from, Posbility: 0.0003
Next Token : iter, Posbility: 0.0005
Next Token : form, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_form
 score:False
Error type: noerr
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : ing, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ed, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0009
Next Token :  a, Posbility: 0.0013
Next Token : 2, Posbility: 0.0021
Next Token :  , Posbility: 0.0139
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_
 score:False
Error type: noerr
---------------------------
Next Token : loop, Posbility: 0.0040
Next Token : tail, Posbility: 0.0040
Next Token : list, Posbility: 0.0052
Next Token : rec, Posbility: 0.0159
Next Token : iter, Posbility: 0.8672
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0020
Next Token : i, Posbility: 0.0020
Next Token :  , Posbility: 0.0277
Next Token : 2, Posbility: 0.0356
Next Token : _, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_
 score:False
Error type: noerr
---------------------------
Next Token : loop, Posbility: 0.0258
Next Token : tail, Posbility: 0.0374
Next Token : rec, Posbility: 0.0481
Next Token : opt, Posbility: 0.1016
Next Token : iter, Posbility: 0.4023
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0023
Next Token : a, Posbility: 0.0030
Next Token : _, Posbility: 0.0104
Next Token : f, Posbility: 0.0118
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : f, Posbility: 0.0002
Next Token : x, Posbility: 0.0004
Next Token : :, Posbility: 0.0019
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token : l, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : n, Posbility: 0.0003
Next Token : a, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : :, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a 
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a :
 score:False
Error type: noerr
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  float, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : int, Posbility: 0.0001
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a : int
 score:False
Error type: noerr
---------------------------
Next Token :  *), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0003
Next Token :  array, Posbility: 0.0003
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a : int list
 score:False
Error type: noerr
---------------------------
Next Token :  *), Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : ):, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a : int list)
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  =, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a : int list) 
 score:False
Error type: noerr
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : ?:, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0002
Next Token : ->, Posbility: 0.0022
Next Token : :, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a : int list) :
 score:False
Error type: noerr
---------------------------
Next Token :  float, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : int, Posbility: 0.0001
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a : int list) : int
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  array, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 0.0017
Next Token :  list, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a : int list) : int list
 score:False
Error type: noerr
---------------------------
Next Token : =, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 0.0009
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a : int list) : int list =
 score:False
Error type: noerr
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token :  function, Posbility: 0.0002
Next Token :  a, Posbility: 0.0002
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a : int list) : int list =

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :    , Posbility: 0.0008
Next Token : let, Posbility: 0.0019
Next Token :     , Posbility: 0.0036
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a : int list) : int list =
  
 score:False
Error type: noerr
---------------------------
Next Token : function, Posbility: 0.0033
Next Token : (, Posbility: 0.0042
Next Token : product, Posbility: 0.0089
Next Token : match, Posbility: 0.0583
Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a : int list) : int list =
  let
 score:False
Error type: noerr
---------------------------
Next Token :  fun, Posbility: 0.0004
Next Token :  a, Posbility: 0.0024
Next Token :  iter, Posbility: 0.0107
Next Token :  , Posbility: 0.0226
Next Token :  rec, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. *)
let rec product_max_formed (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_rec (a : int list) : int list =
  match a with
  | [] -> []
  | x :: xs ->
      let p = product_max_formed_rec xs in
      if p = [] then x
      else if p = xs then xs
      else if p > x then xs
      else xs
in
let rec product_max_formed_iter (a : int list) : int list =
  let rec product_max_formed_iter_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_aux a
in
let rec product_max_formed_iter_rec (a : int list) : int list =
  let rec product_max_formed_iter_rec_aux (a : int list) : int list =
    match a with
    | [] -> []
    | x :: xs ->
        let p = product_max_formed_iter_rec_aux xs in
        if p = [] then x
        else if p = xs then xs
        else if p > x then xs
        else xs
  in
  product_max_formed_iter_rec_aux a
in
let rec product_max_formed_iter_iter (a : int list) : int list =
  let rec
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>