code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  bit, Posbility: 0.0525
Next Token :  is, Posbility: 0.1260
Next Token :  check, Posbility: 0.1260
Next Token :  rec, Posbility: 0.2354
Next Token :  , Posbility: 0.2354
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0187
Next Token : ident, Posbility: 0.0239
Next Token : f, Posbility: 0.0349
Next Token : x, Posbility: 0.0737
Next Token : diff, Posbility: 0.5430
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0300
Next Token :  , Posbility: 0.0437
Next Token : s, Posbility: 0.0562
Next Token :  =, Posbility: 0.1187
Next Token : _, Posbility: 0.6016
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : check, Posbility: 0.0302
Next Token : bits, Posbility: 0.0723
Next Token : one, Posbility: 0.0820
Next Token : at, Posbility: 0.0928
Next Token : bit, Posbility: 0.4707
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0178
Next Token : wise, Posbility: 0.0376
Next Token :  , Posbility: 0.1318
Next Token :  =, Posbility: 0.3145
Next Token : _, Posbility: 0.4043
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : at, Posbility: 0.0378
Next Token : positions, Posbility: 0.0427
Next Token : only, Posbility: 0.0623
Next Token : position, Posbility: 0.3164
Next Token : pos, Posbility: 0.3594
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0111
Next Token : n, Posbility: 0.0342
Next Token : _, Posbility: 0.1533
Next Token :  , Posbility: 0.2520
Next Token :  =, Posbility: 0.4707
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fn, Posbility: 0.0269
Next Token :  fun, Posbility: 0.0830
Next Token :  , Posbility: 0.1992
Next Token : 
, Posbility: 0.2891
Next Token :  function, Posbility: 0.3711
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0057
Next Token :  bit, Posbility: 0.0074
Next Token : (, Posbility: 0.0227
Next Token :  , Posbility: 0.2432
Next Token : 
, Posbility: 0.6641
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0157
Next Token : 	, Posbility: 0.0157
Next Token : |, Posbility: 0.0427
Next Token :     , Posbility: 0.1162
Next Token :   , Posbility: 0.7578
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0086
Next Token : [, Posbility: 0.0086
Next Token : {, Posbility: 0.0098
Next Token : (, Posbility: 0.0640
Next Token : |, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0211
Next Token :  Some, Posbility: 0.0211
Next Token :  true, Posbility: 0.0239
Next Token :  0, Posbility: 0.2002
Next Token :  , Posbility: 0.5430
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Diff, Posbility: 0.0271
Next Token : _, Posbility: 0.0347
Next Token : n, Posbility: 0.0347
Next Token : (, Posbility: 0.2578
Next Token : x, Posbility: 0.2910
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ==, Posbility: 0.0439
Next Token : ::, Posbility: 0.0564
Next Token : ,, Posbility: 0.1357
Next Token :  =, Posbility: 0.1533
Next Token :  , Posbility: 0.4160
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0596
Next Token : ->, Posbility: 0.1426
Next Token : y, Posbility: 0.1426
Next Token : <, Posbility: 0.1621
Next Token : ::, Posbility: 0.3438
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0053
Next Token :  0, Posbility: 0.0100
Next Token :  [], Posbility: 0.0165
Next Token :  rest, Posbility: 0.0187
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : n, Posbility: 0.0096
Next Token : (, Posbility: 0.0157
Next Token : _, Posbility: 0.2793
Next Token : y, Posbility: 0.3164
Next Token : x, Posbility: 0.3164
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0023
Next Token :  , Posbility: 0.0038
Next Token : 1, Posbility: 0.0038
Next Token : ', Posbility: 0.0464
Next Token : s, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0400
Next Token :   , Posbility: 0.0659
Next Token : 
, Posbility: 0.0659
Next Token :  when, Posbility: 0.1797
Next Token :  , Posbility: 0.4883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0013
Next Token :  =>, Posbility: 0.0019
Next Token : if, Posbility: 0.0074
Next Token : ::, Posbility: 0.0156
Next Token : ->, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0090
Next Token :  false, Posbility: 0.0115
Next Token :  function, Posbility: 0.0148
Next Token : 
, Posbility: 0.2041
Next Token :  , Posbility: 0.7148
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0347
Next Token : let, Posbility: 0.0393
Next Token : diff, Posbility: 0.0505
Next Token : x, Posbility: 0.3730
Next Token : y, Posbility: 0.4238
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0012
Next Token : ::, Posbility: 0.0019
Next Token :  =, Posbility: 0.0019
Next Token : s, Posbility: 0.0025
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y 
 score:False
Error type: noerr
---------------------------
Next Token : ^, Posbility: 0.0001
Next Token : <, Posbility: 0.0002
Next Token : :, Posbility: 0.0003
Next Token : ->, Posbility: 0.0179
Next Token : ::, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : z, Posbility: 0.0006
Next Token : x, Posbility: 0.0008
Next Token : _, Posbility: 0.0009
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: y
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0022
Next Token :  |, Posbility: 0.0060
Next Token :   , Posbility: 0.0099
Next Token : 
, Posbility: 0.0732
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token : 
, Posbility: 0.0012
Next Token : -, Posbility: 0.0019
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  true, Posbility: 0.0134
Next Token :  false, Posbility: 0.0172
Next Token :  not, Posbility: 0.0172
Next Token : 
, Posbility: 0.2090
Next Token :  , Posbility: 0.6445
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys ->

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> not
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> false
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> true
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0393
Next Token :  1, Posbility: 0.0503
Next Token :  ⁇ , Posbility: 0.0830
Next Token : >, Posbility: 0.2256
Next Token :  , Posbility: 0.3730
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : diff, Posbility: 0.0240
Next Token : y, Posbility: 0.0449
Next Token : (, Posbility: 0.0508
Next Token : >, Posbility: 0.1221
Next Token : x, Posbility: 0.6211
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0089
Next Token : 
, Posbility: 0.0242
Next Token :  =, Posbility: 0.0352
Next Token : s, Posbility: 0.0845
Next Token :  , Posbility: 0.8008
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x 
 score:False
Error type: noerr
---------------------------
Next Token : <, Posbility: 0.0035
Next Token : >, Posbility: 0.0051
Next Token : ->, Posbility: 0.0058
Next Token : x, Posbility: 0.0074
Next Token : ::, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  new, Posbility: 0.0004
Next Token :  0, Posbility: 0.0013
Next Token :  [], Posbility: 0.0015
Next Token :  [, Posbility: 0.0085
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0024
Next Token : diff, Posbility: 0.0066
Next Token : (, Posbility: 0.0181
Next Token : y, Posbility: 0.3613
Next Token : x, Posbility: 0.5977
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0211
Next Token :   , Posbility: 0.0349
Next Token :  =, Posbility: 0.0349
Next Token :  , Posbility: 0.4238
Next Token : 
, Posbility: 0.4238
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0023
Next Token :       , Posbility: 0.0044
Next Token :  , Posbility: 0.0175
Next Token :     , Posbility: 0.0197
Next Token :   , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  
 score:False
Error type: noerr
---------------------------
Next Token : where, Posbility: 0.0003
Next Token : =, Posbility: 0.0010
Next Token : when, Posbility: 0.0017
Next Token : ->, Posbility: 0.0046
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0009
Next Token :  otherwise, Posbility: 0.0012
Next Token :  0, Posbility: 0.0016
Next Token :  [], Posbility: 0.1807
Next Token :  , Posbility: 0.8086
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Nil, Posbility: 0.0027
Next Token : (), Posbility: 0.0039
Next Token : y, Posbility: 0.0156
Next Token : x, Posbility: 0.1157
Next Token : _, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0044
Next Token :  =, Posbility: 0.0050
Next Token :   , Posbility: 0.0072
Next Token : ,, Posbility: 0.0093
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0005
Next Token : _, Posbility: 0.0011
Next Token : x, Posbility: 0.0025
Next Token : ::, Posbility: 0.0947
Next Token : ->, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.1128
Next Token :  false, Posbility: 0.1128
Next Token :  error, Posbility: 0.1128
Next Token :  fail, Posbility: 0.1865
Next Token :  , Posbility: 0.3066
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0713
Next Token : (), Posbility: 0.0713
Next Token : y, Posbility: 0.0713
Next Token : assert, Posbility: 0.2490
Next Token : raise, Posbility: 0.3203
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0114
Next Token : _, Posbility: 0.0272
Next Token :  ", Posbility: 0.0835
Next Token :  , Posbility: 0.2930
Next Token :  Not, Posbility: 0.5469
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0013
Next Token : ., Posbility: 0.0021
Next Token : (, Posbility: 0.0030
Next Token : Defined, Posbility: 0.0039
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_
 score:False
Error type: noerr
---------------------------
Next Token : compare, Posbility: 0.0471
Next Token : a, Posbility: 0.0535
Next Token : reached, Posbility: 0.0605
Next Token : implement, Posbility: 0.0879
Next Token : found, Posbility: 0.2393
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0256
Next Token : _, Posbility: 0.0479
Next Token :  , Posbility: 0.0698
Next Token : 

, Posbility: 0.2754
Next Token : 
, Posbility: 0.5156
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0400
Next Token : let, Posbility: 0.0452
Next Token :   , Posbility: 0.0747
Next Token : end, Posbility: 0.1021
Next Token : (, Posbility: 0.1484
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : ^, Posbility: 0.0027
Next Token : ***, Posbility: 0.0053
Next Token : *************, Posbility: 0.0088
Next Token : **, Posbility: 0.0649
Next Token : *, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  We, Posbility: 0.0205
Next Token :  Check, Posbility: 0.0264
Next Token :  The, Posbility: 0.0557
Next Token :  [, Posbility: 0.1338
Next Token :  , Posbility: 0.4668
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : end, Posbility: 0.0161
Next Token : ), Posbility: 0.0182
Next Token : End, Posbility: 0.0300
Next Token : Test, Posbility: 0.0437
Next Token : Write, Posbility: 0.4707
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0038
Next Token :  an, Posbility: 0.0063
Next Token :  another, Posbility: 0.0133
Next Token :  the, Posbility: 0.0219
Next Token :  a, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  test, Posbility: 0.0039
Next Token :  version, Posbility: 0.0083
Next Token :  , Posbility: 0.0176
Next Token :   , Posbility: 0.3516
Next Token :  function, Posbility: 0.5820
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0056
Next Token :  , Posbility: 0.0151
Next Token :  which, Posbility: 0.0151
Next Token :  that, Posbility: 0.1113
Next Token :  to, Posbility: 0.8242
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  get, Posbility: 0.0134
Next Token :  count, Posbility: 0.0134
Next Token :  find, Posbility: 0.0364
Next Token :  , Posbility: 0.0991
Next Token :  check, Posbility: 0.7344
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0060
Next Token :  the, Posbility: 0.0164
Next Token :  that, Posbility: 0.0164
Next Token :  , Posbility: 0.0444
Next Token :  whether, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0153
Next Token :  a, Posbility: 0.0153
Next Token :  all, Posbility: 0.0153
Next Token :  two, Posbility: 0.0417
Next Token :  the, Posbility: 0.8359
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  number, Posbility: 0.0061
Next Token :  first, Posbility: 0.0061
Next Token :  , Posbility: 0.0166
Next Token :  numbers, Posbility: 0.0166
Next Token :  two, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  array, Posbility: 0.0137
Next Token :  values, Posbility: 0.0137
Next Token :  strings, Posbility: 0.0374
Next Token :  , Posbility: 0.1016
Next Token :  numbers, Posbility: 0.7500
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  at, Posbility: 0.0020
Next Token :  , Posbility: 0.0147
Next Token :  have, Posbility: 0.0400
Next Token :  are, Posbility: 0.1084
Next Token :  differ, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0059
Next Token :  by, Posbility: 0.0161
Next Token :  only, Posbility: 0.0161
Next Token :  in, Posbility: 0.0437
Next Token :  at, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0366
Next Token :  the, Posbility: 0.0366
Next Token :  more, Posbility: 0.0996
Next Token :  two, Posbility: 0.2715
Next Token :  one, Posbility: 0.2715
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  position, Posbility: 0.0060
Next Token :  , Posbility: 0.0162
Next Token :  byte, Posbility: 0.0162
Next Token :  or, Posbility: 0.0442
Next Token :  bit, Posbility: 0.8867
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  and, Posbility: 0.0024
Next Token :  or, Posbility: 0.0064
Next Token : 
, Posbility: 0.0106
Next Token :  , Posbility: 0.0106
Next Token :  position, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0569
Next Token : ,, Posbility: 0.0569
Next Token :  and, Posbility: 0.1543
Next Token :  only, Posbility: 0.1543
Next Token :  or, Posbility: 0.4199
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  no, Posbility: 0.0038
Next Token :  , Posbility: 0.0063
Next Token : 
, Posbility: 0.0171
Next Token :  more, Posbility: 0.0171
Next Token :  not, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  and, Posbility: 0.0294
Next Token :  *), Posbility: 0.0378
Next Token : 
, Posbility: 0.0486
Next Token : ,, Posbility: 0.1689
Next Token : ., Posbility: 0.5898
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0206
Next Token :   , Posbility: 0.0233
Next Token :  , Posbility: 0.0437
Next Token : 
, Posbility: 0.2217
Next Token :  *), Posbility: 0.6016
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0020
Next Token : , Posbility: 0.0033
Next Token : 

, Posbility: 0.0845
Next Token : 
, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0009
Next Token : val, Posbility: 0.0023
Next Token : module, Posbility: 0.0026
Next Token : (, Posbility: 0.0062
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  same, Posbility: 0.0194
Next Token :  bit, Posbility: 0.0282
Next Token :  is, Posbility: 0.0320
Next Token :  check, Posbility: 0.0361
Next Token :  , Posbility: 0.7266
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ident, Posbility: 0.0038
Next Token : (, Posbility: 0.0049
Next Token : x, Posbility: 0.0080
Next Token : eq, Posbility: 0.0090
Next Token : diff, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0007
Next Token : 1, Posbility: 0.0009
Next Token : s, Posbility: 0.0022
Next Token :  =, Posbility: 0.0066
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : at, Posbility: 0.0023
Next Token : bits, Posbility: 0.0027
Next Token : pos, Posbility: 0.0034
Next Token : one, Posbility: 0.0044
Next Token : bit, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : wise, Posbility: 0.0004
Next Token :  , Posbility: 0.0012
Next Token :  =, Posbility: 0.0096
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : not, Posbility: 0.0006
Next Token : val, Posbility: 0.0008
Next Token : neg, Posbility: 0.0008
Next Token : position, Posbility: 0.0010
Next Token : pos, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0138
Next Token :  , Posbility: 0.0618
Next Token : 2, Posbility: 0.0618
Next Token : _, Posbility: 0.2158
Next Token :  =, Posbility: 0.5859
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0082
Next Token :  fun, Posbility: 0.0175
Next Token : 
, Posbility: 0.0537
Next Token :  , Posbility: 0.0688
Next Token :  function, Posbility: 0.8398
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0005
Next Token : (, Posbility: 0.0019
Next Token :  |, Posbility: 0.0021
Next Token :  , Posbility: 0.0227
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0010
Next Token : (, Posbility: 0.0010
Next Token : |, Posbility: 0.0013
Next Token :     , Posbility: 0.0036
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ?, Posbility: 0.0004
Next Token : {, Posbility: 0.0007
Next Token : (, Posbility: 0.0008
Next Token : let, Posbility: 0.0019
Next Token : |, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0019
Next Token :  [], Posbility: 0.0031
Next Token :  [, Posbility: 0.0031
Next Token :  0, Posbility: 0.0051
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0013
Next Token : y, Posbility: 0.0021
Next Token : _, Posbility: 0.0039
Next Token : (, Posbility: 0.0084
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0024
Next Token :  =, Posbility: 0.0031
Next Token : ::, Posbility: 0.0045
Next Token : s, Posbility: 0.0074
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 0.0003
Next Token : ->, Posbility: 0.0006
Next Token : :, Posbility: 0.0012
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  0, Posbility: 0.0005
Next Token :  a, Posbility: 0.0005
Next Token :  [], Posbility: 0.0005
Next Token :  [, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0019
Next Token : _, Posbility: 0.0124
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ', Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0008
Next Token :  |, Posbility: 0.0009
Next Token : 
, Posbility: 0.0028
Next Token : ,, Posbility: 0.0028
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0001
Next Token : :, Posbility: 0.0002
Next Token : ::, Posbility: 0.0003
Next Token : -, Posbility: 0.0006
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  [, Posbility: 0.0003
Next Token :  function, Posbility: 0.0005
Next Token : 
, Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0005
Next Token : diff, Posbility: 0.0007
Next Token : (, Posbility: 0.0013
Next Token : x, Posbility: 0.0041
Next Token : y, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y 
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0005
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: y
 score:False
Error type: noerr
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0008
Next Token :  +, Posbility: 0.0009
Next Token :  |, Posbility: 0.0010
Next Token : 
, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0007
Next Token : ^, Posbility: 0.0008
Next Token : ::, Posbility: 0.0011
Next Token : ->, Posbility: 0.0203
Next Token : -, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  1, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0002
Next Token : f, Posbility: 0.0003
Next Token : (, Posbility: 0.0013
Next Token : y, Posbility: 0.0013
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : ::, Posbility: 0.0004
Next Token :  =, Posbility: 0.0004
Next Token : 
, Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x 
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : :, Posbility: 0.0001
Next Token : ->, Posbility: 0.0006
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0028
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0005
Next Token :   , Posbility: 0.0009
Next Token :  =, Posbility: 0.0024
Next Token :  , Posbility: 0.0258
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs

 score:False
Error type: noerr
---------------------------
Next Token : |, Posbility: 0.0005
Next Token : end, Posbility: 0.0007
Next Token : (, Posbility: 0.0007
Next Token :  , Posbility: 0.0007
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : where, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token :  None, Posbility: 0.0003
Next Token :  0, Posbility: 0.0008
Next Token :  [], Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0006
Next Token : (, Posbility: 0.0010
Next Token : y, Posbility: 0.0036
Next Token : x, Posbility: 0.0067
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  false, Posbility: 0.0030
Next Token : 
, Posbility: 0.0050
Next Token :  None, Posbility: 0.0050
Next Token :  fail, Posbility: 0.0136
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : throw, Posbility: 0.0005
Next Token : (, Posbility: 0.0009
Next Token : (), Posbility: 0.0013
Next Token : return, Posbility: 0.0019
Next Token : raise, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  ", Posbility: 0.0004
Next Token : _, Posbility: 0.0013
Next Token :  , Posbility: 0.0028
Next Token :  Not, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  found, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_
 score:False
Error type: noerr
---------------------------
Next Token : done, Posbility: 0.0000
Next Token : equal, Posbility: 0.0000
Next Token : find, Posbility: 0.0000
Next Token : Found, Posbility: 0.0000
Next Token : found, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0087
Next Token :  *), Posbility: 0.0112
Next Token :  (*, Posbility: 0.0269
Next Token : 

, Posbility: 0.1367
Next Token : 
, Posbility: 0.7852
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0153
Next Token : ```, Posbility: 0.0164
Next Token :   , Posbility: 0.0197
Next Token : let, Posbility: 0.0830
Next Token : (, Posbility: 0.6523
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : */, Posbility: 0.0012
Next Token : ***, Posbility: 0.0021
Next Token : *************, Posbility: 0.0025
Next Token : **, Posbility: 0.0201
Next Token : *, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  Use, Posbility: 0.0102
Next Token :  Check, Posbility: 0.0168
Next Token :  The, Posbility: 0.0216
Next Token :  [, Posbility: 0.0356
Next Token :  , Posbility: 0.8086
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : write, Posbility: 0.0022
Next Token : Compare, Posbility: 0.0029
Next Token : Define, Posbility: 0.0029
Next Token : Test, Posbility: 0.0078
Next Token : Write, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0012
Next Token :  another, Posbility: 0.0015
Next Token :  an, Posbility: 0.0024
Next Token :  the, Posbility: 0.0066
Next Token :  a, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :    , Posbility: 0.0005
Next Token :  version, Posbility: 0.0008
Next Token :  , Posbility: 0.0061
Next Token :   , Posbility: 0.0747
Next Token :  function, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0014
Next Token :  , Posbility: 0.0023
Next Token :  which, Posbility: 0.0063
Next Token :  that, Posbility: 0.0466
Next Token :  to, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  find, Posbility: 0.0154
Next Token :  count, Posbility: 0.0154
Next Token :  compute, Posbility: 0.0154
Next Token :  , Posbility: 0.0417
Next Token :  check, Posbility: 0.8398
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0024
Next Token :  the, Posbility: 0.0065
Next Token :  that, Posbility: 0.0065
Next Token :  , Posbility: 0.0176
Next Token :  whether, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0024
Next Token :  any, Posbility: 0.0024
Next Token :  a, Posbility: 0.0064
Next Token :  two, Posbility: 0.0175
Next Token :  the, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  number, Posbility: 0.0064
Next Token :  numbers, Posbility: 0.0064
Next Token :  , Posbility: 0.0064
Next Token :  first, Posbility: 0.0064
Next Token :  two, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  values, Posbility: 0.0024
Next Token :  integer, Posbility: 0.0024
Next Token :  , Posbility: 0.0065
Next Token :  strings, Posbility: 0.0065
Next Token :  numbers, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  do, Posbility: 0.0009
Next Token :  , Posbility: 0.0024
Next Token :  have, Posbility: 0.0065
Next Token :  are, Posbility: 0.0177
Next Token :  differ, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0023
Next Token :  only, Posbility: 0.0063
Next Token :  in, Posbility: 0.0171
Next Token :  by, Posbility: 0.0171
Next Token :  at, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  the, Posbility: 0.0144
Next Token :  a, Posbility: 0.0144
Next Token :  more, Posbility: 0.0144
Next Token :  two, Posbility: 0.1064
Next Token :  one, Posbility: 0.7852
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  position, Posbility: 0.0009
Next Token :  or, Posbility: 0.0065
Next Token :  , Posbility: 0.0065
Next Token :  byte, Posbility: 0.0065
Next Token :  bit, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  location, Posbility: 0.0005
Next Token :  or, Posbility: 0.0015
Next Token : 
, Posbility: 0.0031
Next Token :  , Posbility: 0.0031
Next Token :  position, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0063
Next Token : ,, Posbility: 0.0063
Next Token : 
, Posbility: 0.0170
Next Token :  only, Posbility: 0.0170
Next Token :  or, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  only, Posbility: 0.0003
Next Token :  no, Posbility: 0.0004
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 0.0085
Next Token :  not, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0061
Next Token : 
, Posbility: 0.0101
Next Token :  *), Posbility: 0.0101
Next Token : ,, Posbility: 0.0311
Next Token : ., Posbility: 0.9102
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0045
Next Token :   , Posbility: 0.0051
Next Token :  , Posbility: 0.0201
Next Token : 
, Posbility: 0.0898
Next Token :  *), Posbility: 0.8555
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)

 score:False
Error type: noerr
---------------------------
Next Token : function, Posbility: 0.0000
Next Token : module, Posbility: 0.0001
Next Token : val, Posbility: 0.0004
Next Token : (, Posbility: 0.0004
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  bit, Posbility: 0.0034
Next Token :  rec, Posbility: 0.0039
Next Token :  is, Posbility: 0.0056
Next Token :  check, Posbility: 0.0064
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : eq, Posbility: 0.0006
Next Token : f, Posbility: 0.0009
Next Token : (, Posbility: 0.0024
Next Token : x, Posbility: 0.0024
Next Token : diff, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : bit, Posbility: 0.0002
Next Token : s, Posbility: 0.0003
Next Token :  =, Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : at, Posbility: 0.0003
Next Token : pos, Posbility: 0.0004
Next Token : bits, Posbility: 0.0004
Next Token : one, Posbility: 0.0009
Next Token : bit, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : wise, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : positions, Posbility: 0.0000
Next Token : neg, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : position, Posbility: 0.0003
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0007
Next Token : 2, Posbility: 0.0019
Next Token : _, Posbility: 0.0084
Next Token :  , Posbility: 0.0108
Next Token :  =, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0010
Next Token :  fun, Posbility: 0.0035
Next Token : 
, Posbility: 0.0084
Next Token :  , Posbility: 0.0096
Next Token :  function, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0001
Next Token :  {, Posbility: 0.0002
Next Token :  |, Posbility: 0.0005
Next Token :  , Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : |, Posbility: 0.0002
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0009
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ?, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : {, Posbility: 0.0003
Next Token : let, Posbility: 0.0003
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token :  a, Posbility: 0.0003
Next Token :  0, Posbility: 0.0003
Next Token :  {, Posbility: 0.0004
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : X, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : _, Posbility: 0.0007
Next Token : (, Posbility: 0.0013
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token : :, Posbility: 0.0003
Next Token : ::, Posbility: 0.0004
Next Token : s, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : ->, Posbility: 0.0001
Next Token : :, Posbility: 0.0003
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0028
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  |, Posbility: 0.0003
Next Token : ,, Posbility: 0.0004
Next Token : 
, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0015
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y 
 score:False
Error type: noerr
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: y
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  |, Posbility: 0.0002
Next Token :  +, Posbility: 0.0003
Next Token : 
, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : ^, Posbility: 0.0001
Next Token : ->, Posbility: 0.0025
Next Token : -, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : y, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x 
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0036
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs

 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  
 score:False
Error type: noerr
---------------------------
Next Token : {, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : where, Posbility: 0.0000
Next Token : when, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0001
Next Token :  Not, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0004
Next Token : x, Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0001
Next Token :  Not, Posbility: 0.0001
Next Token :  fail, Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : raised, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : throw, Posbility: 0.0001
Next Token : return, Posbility: 0.0001
Next Token : raise, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  No, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  Not, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  found, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_
 score:False
Error type: noerr
---------------------------
Next Token : defined, Posbility: 0.0000
Next Token : done, Posbility: 0.0000
Next Token : find, Posbility: 0.0000
Next Token : Found, Posbility: 0.0000
Next Token : found, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0134
Next Token :  *), Posbility: 0.0152
Next Token : (, Posbility: 0.0195
Next Token : 

, Posbility: 0.0991
Next Token : 
, Posbility: 0.8281
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0077
Next Token : ```, Posbility: 0.0077
Next Token :   , Posbility: 0.0082
Next Token : let, Posbility: 0.0344
Next Token : (, Posbility: 0.8359
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : */, Posbility: 0.0009
Next Token : ***, Posbility: 0.0018
Next Token : *************, Posbility: 0.0021
Next Token : **, Posbility: 0.0123
Next Token : *, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  What, Posbility: 0.0048
Next Token :  Check, Posbility: 0.0054
Next Token :  The, Posbility: 0.0101
Next Token :  [, Posbility: 0.0242
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Compare, Posbility: 0.0011
Next Token : Define, Posbility: 0.0014
Next Token : write, Posbility: 0.0016
Next Token : Test, Posbility: 0.0031
Next Token : Write, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0004
Next Token :  function, Posbility: 0.0004
Next Token :  an, Posbility: 0.0009
Next Token :  the, Posbility: 0.0025
Next Token :  a, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :    , Posbility: 0.0003
Next Token :  version, Posbility: 0.0009
Next Token :  , Posbility: 0.0039
Next Token :   , Posbility: 0.0291
Next Token :  function, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0007
Next Token :  , Posbility: 0.0011
Next Token :  which, Posbility: 0.0031
Next Token :  that, Posbility: 0.0291
Next Token :  to, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  count, Posbility: 0.0024
Next Token :  compute, Posbility: 0.0024
Next Token :  , Posbility: 0.0065
Next Token :  find, Posbility: 0.0065
Next Token :  check, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  the, Posbility: 0.0009
Next Token :  for, Posbility: 0.0009
Next Token :  that, Posbility: 0.0024
Next Token :  , Posbility: 0.0067
Next Token :  whether, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0024
Next Token :  a, Posbility: 0.0024
Next Token :  one, Posbility: 0.0024
Next Token :  two, Posbility: 0.0066
Next Token :  the, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  number, Posbility: 0.0009
Next Token :  three, Posbility: 0.0009
Next Token :  , Posbility: 0.0009
Next Token :  first, Posbility: 0.0009
Next Token :  two, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  integer, Posbility: 0.0009
Next Token :  values, Posbility: 0.0015
Next Token :  , Posbility: 0.0024
Next Token :  strings, Posbility: 0.0024
Next Token :  numbers, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  do, Posbility: 0.0002
Next Token :  , Posbility: 0.0015
Next Token :  have, Posbility: 0.0025
Next Token :  are, Posbility: 0.0041
Next Token :  differ, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0015
Next Token :  only, Posbility: 0.0040
Next Token :  in, Posbility: 0.0065
Next Token :  by, Posbility: 0.0065
Next Token :  at, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  the, Posbility: 0.0024
Next Token :  a, Posbility: 0.0024
Next Token :  all, Posbility: 0.0024
Next Token :  two, Posbility: 0.0176
Next Token :  one, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token :  byte, Posbility: 0.0025
Next Token :  or, Posbility: 0.0032
Next Token :  bit, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  location, Posbility: 0.0002
Next Token :  or, Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token : 
, Posbility: 0.0013
Next Token :  position, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0024
Next Token : ., Posbility: 0.0051
Next Token : 
, Posbility: 0.0065
Next Token :  only, Posbility: 0.0065
Next Token :  or, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  only, Posbility: 0.0000
Next Token :  no, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0032
Next Token :  not, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0008
Next Token : 
, Posbility: 0.0013
Next Token : ,, Posbility: 0.0019
Next Token :  *), Posbility: 0.0022
Next Token : ., Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0004
Next Token :   , Posbility: 0.0006
Next Token :  , Posbility: 0.0021
Next Token : 
, Posbility: 0.0157
Next Token :  *), Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)

 score:False
Error type: noerr
---------------------------
Next Token : const, Posbility: 0.0000
Next Token : module, Posbility: 0.0000
Next Token : val, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  bit, Posbility: 0.0005
Next Token :  is, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0009
Next Token :  check, Posbility: 0.0012
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : f, Posbility: 0.0003
Next Token : x, Posbility: 0.0005
Next Token : (, Posbility: 0.0007
Next Token : diff, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : bit, Posbility: 0.0001
Next Token :  =, Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : at, Posbility: 0.0001
Next Token : bits, Posbility: 0.0001
Next Token : pos, Posbility: 0.0001
Next Token : one, Posbility: 0.0002
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : wise, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : not, Posbility: 0.0000
Next Token : positions, Posbility: 0.0000
Next Token : neg, Posbility: 0.0000
Next Token : position, Posbility: 0.0001
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token : _, Posbility: 0.0012
Next Token :  , Posbility: 0.0025
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0002
Next Token :  fun, Posbility: 0.0009
Next Token : 
, Posbility: 0.0019
Next Token :  , Posbility: 0.0022
Next Token :  function, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : |, Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : {, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token : s, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y 
 score:False
Error type: noerr
---------------------------
Next Token : \\, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: y
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : ->, Posbility: 0.0003
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x 
 score:False
Error type: noerr
---------------------------
Next Token : ·, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  --, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs

 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  
 score:False
Error type: noerr
---------------------------
Next Token : where, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : when, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  Not, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  Not, Posbility: 0.0000
Next Token :  fail, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : raised, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : throw, Posbility: 0.0000
Next Token : raise, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  No, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  Not, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  found, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_
 score:False
Error type: noerr
---------------------------
Next Token :  found, Posbility: 0.0000
Next Token : done, Posbility: 0.0000
Next Token : find, Posbility: 0.0000
Next Token : Found, Posbility: 0.0000
Next Token : found, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0086
Next Token :  *), Posbility: 0.0110
Next Token : (, Posbility: 0.0160
Next Token : 

, Posbility: 0.0718
Next Token : 
, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found

 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0040
Next Token :   , Posbility: 0.0045
Next Token : ```, Posbility: 0.0058
Next Token : let, Posbility: 0.0139
Next Token : (, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : ***, Posbility: 0.0007
Next Token : */, Posbility: 0.0008
Next Token : *************, Posbility: 0.0011
Next Token : **, Posbility: 0.0059
Next Token : *, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  Check, Posbility: 0.0019
Next Token :  What, Posbility: 0.0019
Next Token :  The, Posbility: 0.0045
Next Token :  [, Posbility: 0.0121
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Rewrite, Posbility: 0.0005
Next Token : Define, Posbility: 0.0007
Next Token : write, Posbility: 0.0013
Next Token : Test, Posbility: 0.0017
Next Token : Write, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  function, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  an, Posbility: 0.0003
Next Token :  the, Posbility: 0.0009
Next Token :  a, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  type, Posbility: 0.0002
Next Token :  version, Posbility: 0.0003
Next Token :  , Posbility: 0.0024
Next Token :   , Posbility: 0.0140
Next Token :  function, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token :  which, Posbility: 0.0015
Next Token :  that, Posbility: 0.0140
Next Token :  to, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  find, Posbility: 0.0024
Next Token :  count, Posbility: 0.0024
Next Token :  compare, Posbility: 0.0024
Next Token :  , Posbility: 0.0066
Next Token :  check, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0001
Next Token :  the, Posbility: 0.0002
Next Token :  that, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  whether, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0005
Next Token :  one, Posbility: 0.0005
Next Token :  a, Posbility: 0.0015
Next Token :  two, Posbility: 0.0041
Next Token :  the, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  number, Posbility: 0.0003
Next Token :  three, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  first, Posbility: 0.0003
Next Token :  two, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  integer, Posbility: 0.0005
Next Token :  values, Posbility: 0.0009
Next Token :  , Posbility: 0.0015
Next Token :  strings, Posbility: 0.0015
Next Token :  numbers, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  do, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token :  have, Posbility: 0.0009
Next Token :  are, Posbility: 0.0019
Next Token :  differ, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0005
Next Token :  only, Posbility: 0.0009
Next Token :  in, Posbility: 0.0019
Next Token :  by, Posbility: 0.0019
Next Token :  at, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0007
Next Token :  a, Posbility: 0.0007
Next Token :  more, Posbility: 0.0012
Next Token :  two, Posbility: 0.0040
Next Token :  one, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  or, Posbility: 0.0012
Next Token :  byte, Posbility: 0.0012
Next Token :  bit, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  or, Posbility: 0.0001
Next Token :  location, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  position, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0005
Next Token : ., Posbility: 0.0015
Next Token :  only, Posbility: 0.0025
Next Token : 
, Posbility: 0.0028
Next Token :  or, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  only, Posbility: 0.0000
Next Token :  no, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0012
Next Token :  not, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token : ,, Posbility: 0.0005
Next Token :  *), Posbility: 0.0008
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 0.0052
Next Token :  *), Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)

 score:False
Error type: noerr
---------------------------
Next Token : const, Posbility: 0.0000
Next Token : module, Posbility: 0.0000
Next Token : val, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  bit, Posbility: 0.0001
Next Token :  is, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0002
Next Token :  check, Posbility: 0.0003
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : diff, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : bit, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : bits, Posbility: 0.0000
Next Token : at, Posbility: 0.0000
Next Token : pos, Posbility: 0.0000
Next Token : one, Posbility: 0.0001
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pos, Posbility: 0.0000
Next Token : wise, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ps, Posbility: 0.0000
Next Token : positions, Posbility: 0.0000
Next Token : neg, Posbility: 0.0000
Next Token : position, Posbility: 0.0000
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.0008
Next Token :  function, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y 
 score:False
Error type: noerr
---------------------------
Next Token : \\, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: y
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys 
 score:False
Error type: noerr
---------------------------
Next Token : −, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : ->, Posbility: 0.0001
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x 
 score:False
Error type: noerr
---------------------------
Next Token : ·, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  --, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs

 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : when, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  Not, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  not, Posbility: 0.0000
Next Token :  Not, Posbility: 0.0000
Next Token :  fail, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : raised, Posbility: 0.0000
Next Token : throw, Posbility: 0.0000
Next Token : raise, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  No, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  Not, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  found, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_
 score:False
Error type: noerr
---------------------------
Next Token :  found, Posbility: 0.0000
Next Token : done, Posbility: 0.0000
Next Token : find, Posbility: 0.0000
Next Token : Found, Posbility: 0.0000
Next Token : found, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0061
Next Token :  *), Posbility: 0.0079
Next Token : (, Posbility: 0.0129
Next Token : 

, Posbility: 0.0513
Next Token : 
, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0030
Next Token : ), Posbility: 0.0030
Next Token : ```, Posbility: 0.0041
Next Token : let, Posbility: 0.0064
Next Token : (, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : ***, Posbility: 0.0003
Next Token : *************, Posbility: 0.0004
Next Token : */, Posbility: 0.0006
Next Token : **, Posbility: 0.0022
Next Token : *, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  What, Posbility: 0.0008
Next Token :  Check, Posbility: 0.0009
Next Token :  The, Posbility: 0.0019
Next Token :  [, Posbility: 0.0052
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Rewrite, Posbility: 0.0003
Next Token : Define, Posbility: 0.0003
Next Token : Test, Posbility: 0.0009
Next Token : write, Posbility: 0.0009
Next Token : Write, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  function, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  an, Posbility: 0.0002
Next Token :  the, Posbility: 0.0006
Next Token :  a, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  type, Posbility: 0.0001
Next Token :  version, Posbility: 0.0003
Next Token :  , Posbility: 0.0019
Next Token :   , Posbility: 0.0085
Next Token :  function, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  which, Posbility: 0.0005
Next Token :  that, Posbility: 0.0059
Next Token :  to, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  compute, Posbility: 0.0009
Next Token :  count, Posbility: 0.0024
Next Token :  find, Posbility: 0.0024
Next Token :  , Posbility: 0.0066
Next Token :  check, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  the, Posbility: 0.0001
Next Token :  that, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  whether, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  one, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  a, Posbility: 0.0009
Next Token :  two, Posbility: 0.0025
Next Token :  the, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  first, Posbility: 0.0003
Next Token :  numbers, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  three, Posbility: 0.0003
Next Token :  two, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  number, Posbility: 0.0003
Next Token :  values, Posbility: 0.0007
Next Token :  , Posbility: 0.0009
Next Token :  strings, Posbility: 0.0015
Next Token :  numbers, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  difference, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  have, Posbility: 0.0003
Next Token :  are, Posbility: 0.0007
Next Token :  differ, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0002
Next Token :  only, Posbility: 0.0002
Next Token :  in, Posbility: 0.0006
Next Token :  by, Posbility: 0.0007
Next Token :  at, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  more, Posbility: 0.0004
Next Token :  two, Posbility: 0.0012
Next Token :  one, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  or, Posbility: 0.0006
Next Token :  byte, Posbility: 0.0006
Next Token :  bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  pos, Posbility: 0.0000
Next Token :  location, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  position, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0002
Next Token : ., Posbility: 0.0007
Next Token :  only, Posbility: 0.0010
Next Token : 
, Posbility: 0.0012
Next Token :  or, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  only, Posbility: 0.0000
Next Token :  no, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0007
Next Token :  not, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : ,, Posbility: 0.0002
Next Token :  *), Posbility: 0.0004
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  They, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0022
Next Token :  *), Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)

 score:False
Error type: noerr
---------------------------
Next Token : const, Posbility: 0.0000
Next Token : module, Posbility: 0.0000
Next Token : val, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  bit, Posbility: 0.0000
Next Token :  is, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  check, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : diff, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : bit, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pos, Posbility: 0.0000
Next Token : byte, Posbility: 0.0000
Next Token : at, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : pos, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ps, Posbility: 0.0000
Next Token : positions, Posbility: 0.0000
Next Token : neg, Posbility: 0.0000
Next Token : position, Posbility: 0.0000
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  function, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  (*, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function

 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  |
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x 
 score:False
Error type: noerr
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x ::
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs ->
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y 
 score:False
Error type: noerr
---------------------------
Next Token : \\, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y ::
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: y
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys 
 score:False
Error type: noerr
---------------------------
Next Token : −, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x 
 score:False
Error type: noerr
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x ::
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: 
 score:False
Error type: noerr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: x
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  --, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs

 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : ~, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  |
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  Not, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | 
 score:False
Error type: noerr
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ 
 score:False
Error type: noerr
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ ->
 score:False
Error type: noerr
---------------------------
Next Token :  not, Posbility: 0.0000
Next Token :  fail, Posbility: 0.0000
Next Token :  Not, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> 
 score:False
Error type: noerr
---------------------------
Next Token : raises, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : raised, Posbility: 0.0000
Next Token : throw, Posbility: 0.0000
Next Token : raise, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  No, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Not, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  found, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_
 score:False
Error type: noerr
---------------------------
Next Token :  found, Posbility: 0.0000
Next Token : done, Posbility: 0.0000
Next Token : find, Posbility: 0.0000
Next Token : Found, Posbility: 0.0000
Next Token : found, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0038
Next Token :  *), Posbility: 0.0049
Next Token : (, Posbility: 0.0104
Next Token : 

, Posbility: 0.0410
Next Token : 
, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0020
Next Token :   , Posbility: 0.0020
Next Token : ```, Posbility: 0.0031
Next Token : let, Posbility: 0.0035
Next Token : (, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(
 score:False
Error type: noerr
---------------------------
Next Token : ***, Posbility: 0.0002
Next Token : *************, Posbility: 0.0002
Next Token : */, Posbility: 0.0004
Next Token : **, Posbility: 0.0015
Next Token : *, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  Check, Posbility: 0.0005
Next Token :  What, Posbility: 0.0005
Next Token :  The, Posbility: 0.0012
Next Token :  [, Posbility: 0.0036
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Define, Posbility: 0.0002
Next Token : Rewrite, Posbility: 0.0002
Next Token : Test, Posbility: 0.0006
Next Token : write, Posbility: 0.0006
Next Token : Write, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  code, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  an, Posbility: 0.0001
Next Token :  the, Posbility: 0.0004
Next Token :  a, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  type, Posbility: 0.0001
Next Token :  version, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token :   , Posbility: 0.0041
Next Token :  function, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  which, Posbility: 0.0004
Next Token :  that, Posbility: 0.0046
Next Token :  to, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  compare, Posbility: 0.0007
Next Token :  count, Posbility: 0.0009
Next Token :  find, Posbility: 0.0015
Next Token :  , Posbility: 0.0019
Next Token :  check, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  that, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  whether, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  one, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  a, Posbility: 0.0004
Next Token :  two, Posbility: 0.0015
Next Token :  the, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  number, Posbility: 0.0001
Next Token :  numbers, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  three, Posbility: 0.0002
Next Token :  two, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  number, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :  values, Posbility: 0.0004
Next Token :  strings, Posbility: 0.0009
Next Token :  numbers, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  difference, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  have, Posbility: 0.0002
Next Token :  are, Posbility: 0.0004
Next Token :  differ, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0003
Next Token :  by, Posbility: 0.0003
Next Token :  at, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  the, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  more, Posbility: 0.0002
Next Token :  two, Posbility: 0.0006
Next Token :  one, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  or, Posbility: 0.0002
Next Token :  byte, Posbility: 0.0003
Next Token :  bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  location, Posbility: 0.0000
Next Token :  pos, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  position, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  only, Posbility: 0.0002
Next Token : ., Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token :  or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  no, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0004
Next Token :  not, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  *), Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  They, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0010
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)

 score:False
Error type: noerr
---------------------------
Next Token : const, Posbility: 0.0000
Next Token : Let, Posbility: 0.0000
Next Token : val, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0000
Next Token :  bit, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  check, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : diff, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : bit, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_
 score:False
Error type: noerr
---------------------------
Next Token : pos, Posbility: 0.0000
Next Token : byte, Posbility: 0.0000
Next Token : at, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : pos, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_
 score:False
Error type: noerr
---------------------------
Next Token : positions, Posbility: 0.0000
Next Token : ps, Posbility: 0.0000
Next Token : neg, Posbility: 0.0000
Next Token : position, Posbility: 0.0000
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos =
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  function, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function

 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  
 score:False
Error type: noerr
---------------------------
Next Token : {, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  |
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x ::
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: x
 score:False
Error type: noerr
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs ->
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y 
 score:False
Error type: noerr
---------------------------
Next Token : \\, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y ::
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: y
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys 
 score:False
Error type: noerr
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x 
 score:False
Error type: noerr
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x ::
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: 
 score:False
Error type: noerr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  --, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : ~, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  |
 score:False
Error type: noerr
---------------------------
Next Token :  Not, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | 
 score:False
Error type: noerr
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ 
 score:False
Error type: noerr
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ ->
 score:False
Error type: noerr
---------------------------
Next Token :  not, Posbility: 0.0000
Next Token :  Not, Posbility: 0.0000
Next Token :  fail, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> 
 score:False
Error type: noerr
---------------------------
Next Token : raises, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : raised, Posbility: 0.0000
Next Token : throw, Posbility: 0.0000
Next Token : raise, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  No, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Not, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  found, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_
 score:False
Error type: noerr
---------------------------
Next Token : not, Posbility: 0.0000
Next Token : done, Posbility: 0.0000
Next Token : find, Posbility: 0.0000
Next Token : Found, Posbility: 0.0000
Next Token : found, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0027
Next Token :  *), Posbility: 0.0030
Next Token : (, Posbility: 0.0082
Next Token : 

, Posbility: 0.0325
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0017
Next Token :     , Posbility: 0.0019
Next Token : let, Posbility: 0.0019
Next Token : ```, Posbility: 0.0020
Next Token : (, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(
 score:False
Error type: noerr
---------------------------
Next Token : ****************, Posbility: 0.0001
Next Token : *************, Posbility: 0.0001
Next Token : */, Posbility: 0.0003
Next Token : **, Posbility: 0.0007
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  Check, Posbility: 0.0003
Next Token :  The, Posbility: 0.0005
Next Token :  [, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Rewrite, Posbility: 0.0001
Next Token : Define, Posbility: 0.0001
Next Token : Test, Posbility: 0.0004
Next Token : write, Posbility: 0.0005
Next Token : Write, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  function, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  an, Posbility: 0.0001
Next Token :  the, Posbility: 0.0002
Next Token :  a, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  type, Posbility: 0.0000
Next Token :  version, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :   , Posbility: 0.0019
Next Token :  function, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  which, Posbility: 0.0002
Next Token :  that, Posbility: 0.0022
Next Token :  to, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  count, Posbility: 0.0004
Next Token :  compare, Posbility: 0.0004
Next Token :  find, Posbility: 0.0007
Next Token :  , Posbility: 0.0012
Next Token :  check, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  that, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  whether, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  one, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  a, Posbility: 0.0002
Next Token :  two, Posbility: 0.0009
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  number, Posbility: 0.0000
Next Token :  numbers, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  three, Posbility: 0.0001
Next Token :  two, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  number, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  values, Posbility: 0.0002
Next Token :  strings, Posbility: 0.0004
Next Token :  numbers, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  difference, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  have, Posbility: 0.0001
Next Token :  are, Posbility: 0.0003
Next Token :  differ, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  by, Posbility: 0.0001
Next Token :  at, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  more, Posbility: 0.0001
Next Token :  two, Posbility: 0.0003
Next Token :  one, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  or, Posbility: 0.0001
Next Token :  byte, Posbility: 0.0002
Next Token :  bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  pos, Posbility: 0.0000
Next Token :  location, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  position, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 0.0002
Next Token :  only, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  no, Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  not, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  *), Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  They, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0010
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)

 score:False
Error type: noerr
---------------------------
Next Token : const, Posbility: 0.0000
Next Token : Let, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : val, Posbility: 0.0000
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let
 score:False
Error type: noerr
---------------------------
Next Token :  differ, Posbility: 0.0000
Next Token :  bit, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  check, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : diff, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : bit, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_
 score:False
Error type: noerr
---------------------------
Next Token : at, Posbility: 0.0000
Next Token : pos, Posbility: 0.0000
Next Token : byte, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : pos, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_
 score:False
Error type: noerr
---------------------------
Next Token : neg, Posbility: 0.0000
Next Token : positions, Posbility: 0.0000
Next Token : ps, Posbility: 0.0000
Next Token : position, Posbility: 0.0000
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos =
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  function, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function

 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  
 score:False
Error type: noerr
---------------------------
Next Token : {, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  |
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x ::
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: x
 score:False
Error type: noerr
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs ->
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y 
 score:False
Error type: noerr
---------------------------
Next Token : \\, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y ::
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: y
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys 
 score:False
Error type: noerr
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x 
 score:False
Error type: noerr
---------------------------
Next Token : ·, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x ::
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: 
 score:False
Error type: noerr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  --, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : ~, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  |
 score:False
Error type: noerr
---------------------------
Next Token :  Not, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | 
 score:False
Error type: noerr
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ 
 score:False
Error type: noerr
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ ->
 score:False
Error type: noerr
---------------------------
Next Token :  not, Posbility: 0.0000
Next Token :  Not, Posbility: 0.0000
Next Token :  fail, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> 
 score:False
Error type: noerr
---------------------------
Next Token : raises, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : raised, Posbility: 0.0000
Next Token : throw, Posbility: 0.0000
Next Token : raise, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  No, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Not, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  found, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_
 score:False
Error type: noerr
---------------------------
Next Token :  found, Posbility: 0.0000
Next Token : done, Posbility: 0.0000
Next Token : find, Posbility: 0.0000
Next Token : Found, Posbility: 0.0000
Next Token : found, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0024
Next Token :  *), Posbility: 0.0027
Next Token : (, Posbility: 0.0057
Next Token : 

, Posbility: 0.0255
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found

 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0012
Next Token : ```, Posbility: 0.0015
Next Token :     , Posbility: 0.0016
Next Token :   , Posbility: 0.0016
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(
 score:False
Error type: noerr
---------------------------
Next Token : ***, Posbility: 0.0001
Next Token : ****************, Posbility: 0.0001
Next Token : */, Posbility: 0.0002
Next Token : **, Posbility: 0.0006
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  Check, Posbility: 0.0002
Next Token :  The, Posbility: 0.0004
Next Token :  [, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Define, Posbility: 0.0001
Next Token : Rewrite, Posbility: 0.0001
Next Token : Test, Posbility: 0.0004
Next Token : write, Posbility: 0.0005
Next Token : Write, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  function, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  an, Posbility: 0.0000
Next Token :  the, Posbility: 0.0002
Next Token :  a, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  type, Posbility: 0.0000
Next Token :  version, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token :   , Posbility: 0.0007
Next Token :  function, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  which, Posbility: 0.0001
Next Token :  that, Posbility: 0.0013
Next Token :  to, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  count, Posbility: 0.0003
Next Token :  compare, Posbility: 0.0003
Next Token :  find, Posbility: 0.0006
Next Token :  , Posbility: 0.0009
Next Token :  check, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  that, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  whether, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  one, Posbility: 0.0001
Next Token :  a, Posbility: 0.0002
Next Token :  two, Posbility: 0.0006
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  number, Posbility: 0.0000
Next Token :  numbers, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  three, Posbility: 0.0001
Next Token :  two, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  number, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  values, Posbility: 0.0002
Next Token :  strings, Posbility: 0.0003
Next Token :  numbers, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  difference, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  have, Posbility: 0.0001
Next Token :  are, Posbility: 0.0001
Next Token :  differ, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  by, Posbility: 0.0001
Next Token :  at, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  more, Posbility: 0.0001
Next Token :  two, Posbility: 0.0002
Next Token :  one, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  or, Posbility: 0.0001
Next Token :  byte, Posbility: 0.0001
Next Token :  bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  pos, Posbility: 0.0000
Next Token :  location, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  position, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  only, Posbility: 0.0001
Next Token : ., Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  no, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  not, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  *), Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  {}), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0006
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)

 score:False
Error type: noerr
---------------------------
Next Token : const, Posbility: 0.0000
Next Token : val, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : Let, Posbility: 0.0000
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let
 score:False
Error type: noerr
---------------------------
Next Token :  differ, Posbility: 0.0000
Next Token :  bit, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  check, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : diff, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : bit, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_
 score:False
Error type: noerr
---------------------------
Next Token : pos, Posbility: 0.0000
Next Token : byte, Posbility: 0.0000
Next Token : at, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : pos, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_
 score:False
Error type: noerr
---------------------------
Next Token :  pos, Posbility: 0.0000
Next Token : neg, Posbility: 0.0000
Next Token : ps, Posbility: 0.0000
Next Token : position, Posbility: 0.0000
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos =
 score:False
Error type: noerr
---------------------------
Next Token :  functions, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  function, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function

 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  
 score:False
Error type: noerr
---------------------------
Next Token : {, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  |
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x ::
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys - x :: xs
  | _ -> raise Not_found
(* Write a function to check whether the two numbers differ at one bit position or not. *)
let diff_bit_pos = function
  | x :: 
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>